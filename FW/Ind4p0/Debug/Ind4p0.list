
Ind4p0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08008938  08008938  00009938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00009e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b8  200001dc  08009014  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a94  08009014  0000aa94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121e1  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  0001c3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  0001fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fae  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a37  00000000  00000000  000398f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f95c  00000000  00000000  0004e329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  000edc85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  000edd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f3794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001450  00000000  00000000  000f37f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  000f4c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800891c 	.word	0x0800891c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800891c 	.word	0x0800891c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <__io_putchar+0x20>)
 8000eba:	f003 fe33 	bl	8004b24 <HAL_UART_Transmit>
	return ch;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000540 	.word	0x20000540

08000ecc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed2:	f001 fa81 	bl	80023d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ed6:	f000 f83b 	bl	8000f50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eda:	f000 f9a1 	bl	8001220 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ede:	f000 f97f 	bl	80011e0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ee2:	f000 f893 	bl	800100c <MX_ADC1_Init>
	MX_I2C1_Init();
 8000ee6:	f000 f8ff 	bl	80010e8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000eea:	f000 f94f 	bl	800118c <MX_USART1_UART_Init>
	MX_TIM10_Init();
 8000eee:	f000 f929 	bl	8001144 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	//	arm_fir_init_f32(&S_FIR, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], SAMPLES);
	arm_fir_init_f32(&S_FIR, NUM_TAPS_HP, (float32_t *)&firCoeffs32_high_pass[0], &firStateF32_HP[0], SAMPLES);
 8000ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <main+0x64>)
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <main+0x68>)
 8000efc:	2157      	movs	r1, #87	@ 0x57
 8000efe:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <main+0x6c>)
 8000f00:	f004 fe16 	bl	8005b30 <arm_fir_init_f32>


	/********************************************
	 * attiva l'UART in interrupt mode
	 ********************************************/
	HAL_UART_Receive_IT(&huart1,&UART1_rx, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <main+0x70>)
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <main+0x74>)
 8000f0a:	f003 fe96 	bl	8004c3a <HAL_UART_Receive_IT>


	//************************************************************************************************//
	HAL_TIM_Base_Start_IT(&htim10);
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <main+0x78>)
 8000f10:	f003 fb9e 	bl	8004650 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_PRESCALER(&htim10, 1);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <main+0x78>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
	//	 *******************************************************/
	//	//HAL_ADCEx_Calibration_Start(&hadc1);
	//	/*******************************************************/
	//
	//
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 3);
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	490a      	ldr	r1, [pc, #40]	@ (8000f48 <main+0x7c>)
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <main+0x80>)
 8000f22:	f001 fb33 	bl	800258c <HAL_ADC_Start_DMA>


		//		HAL_UART_Transmit(&huart1, tt, sizeof(tt), 100);


		HAL_Delay(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2a:	f001 fac7 	bl	80024bc <HAL_Delay>
 8000f2e:	e7fa      	b.n	8000f26 <main+0x5a>
 8000f30:	200007d8 	.word	0x200007d8
 8000f34:	08008938 	.word	0x08008938
 8000f38:	200007cc 	.word	0x200007cc
 8000f3c:	200005b8 	.word	0x200005b8
 8000f40:	20000540 	.word	0x20000540
 8000f44:	200004f8 	.word	0x200004f8
 8000f48:	200007c0 	.word	0x200007c0
 8000f4c:	200003fc 	.word	0x200003fc

08000f50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	@ 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fdb9 	bl	8006ad6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <SystemClock_Config+0xb4>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <SystemClock_Config+0xb4>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <SystemClock_Config+0xb4>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <SystemClock_Config+0xb8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <SystemClock_Config+0xb8>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <SystemClock_Config+0xb8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fe9d 	bl	8003d00 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000fcc:	f000 ff4e 	bl	8001e6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f900 	bl	80041f0 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8000ff6:	f000 ff39 	bl	8001e6c <Error_Handler>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	@ 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001020:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <MX_ADC1_Init+0xd4>)
 8001022:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001032:	2201      	movs	r2, #1
 8001034:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001038:	2201      	movs	r2, #1
 800103a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800104c:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <MX_ADC1_Init+0xd8>)
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001058:	2203      	movs	r2, #3
 800105a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_ADC1_Init+0xd0>)
 8001066:	2201      	movs	r2, #1
 8001068:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481c      	ldr	r0, [pc, #112]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800106c:	f001 fa4a 	bl	8002504 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001076:	f000 fef9 	bl	8001e6c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	@ (80010dc <MX_ADC1_Init+0xd0>)
 800108c:	f001 fb78 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001096:	f000 fee9 	bl	8001e6c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800109a:	2301      	movs	r3, #1
 800109c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0xd0>)
 80010a8:	f001 fb6a 	bl	8002780 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 80010b2:	f000 fedb 	bl	8001e6c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80010ba:	2303      	movs	r3, #3
 80010bc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0xd0>)
 80010c4:	f001 fb5c 	bl	8002780 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xc6>
	{
		Error_Handler();
 80010ce:	f000 fecd 	bl	8001e6c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200003fc 	.word	0x200003fc
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	@ (800113c <MX_I2C1_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_I2C1_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_I2C1_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_I2C1_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_I2C1_Init+0x50>)
 8001126:	f002 fca7 	bl	8003a78 <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001130:	f000 fe9c 	bl	8001e6c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200004a4 	.word	0x200004a4
 800113c:	40005400 	.word	0x40005400
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_TIM10_Init+0x40>)
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <MX_TIM10_Init+0x44>)
 800114c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 0;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_TIM10_Init+0x40>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_TIM10_Init+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_TIM10_Init+0x40>)
 800115c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001160:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_TIM10_Init+0x40>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_TIM10_Init+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_TIM10_Init+0x40>)
 8001170:	f003 fa1e 	bl	80045b0 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 800117a:	f000 fe77 	bl	8001e6c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200004f8 	.word	0x200004f8
 8001188:	40014400 	.word	0x40014400

0800118c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_USART1_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011c4:	f003 fc5e 	bl	8004a84 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80011ce:	f000 fe4d 	bl	8001e6c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000540 	.word	0x20000540
 80011dc:	40011000 	.word	0x40011000

080011e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_DMA_Init+0x3c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_DMA_Init+0x3c>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	2038      	movs	r0, #56	@ 0x38
 8001208:	f001 fe45 	bl	8002e96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800120c:	2038      	movs	r0, #56	@ 0x38
 800120e:	f001 fe5e 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ac:	480b      	ldr	r0, [pc, #44]	@ (80012dc <MX_GPIO_Init+0xbc>)
 80012ae:	f002 fbaf 	bl	8003a10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LEDB_Pin */
	GPIO_InitStruct.Pin = LEDB_Pin;
 80012b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_GPIO_Init+0xbc>)
 80012cc:	f002 fa1c 	bl	8003708 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800

080012e0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */


// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]


	adc_channel_instance.ADC_X = value[0];
 80012fc:	4bae      	ldr	r3, [pc, #696]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29a      	uxth	r2, r3
 8001302:	4bae      	ldr	r3, [pc, #696]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001304:	809a      	strh	r2, [r3, #4]
	adc_channel_instance.ADC_Y = value[1];
 8001306:	4bac      	ldr	r3, [pc, #688]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b29a      	uxth	r2, r3
 800130c:	4bab      	ldr	r3, [pc, #684]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 800130e:	80da      	strh	r2, [r3, #6]
	adc_channel_instance.ADC_Z = value[2];
 8001310:	4ba9      	ldr	r3, [pc, #676]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	b29a      	uxth	r2, r3
 8001316:	4ba9      	ldr	r3, [pc, #676]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001318:	811a      	strh	r2, [r3, #8]



	Input_X[current_index_aqsample] = adc_channel_instance.ADC_X;
 800131a:	4ba8      	ldr	r3, [pc, #672]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 800131c:	889a      	ldrh	r2, [r3, #4]
 800131e:	4ba8      	ldr	r3, [pc, #672]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 2a90 	vmov	s15, r2
 8001326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132a:	4aa6      	ldr	r2, [pc, #664]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	edc3 7a00 	vstr	s15, [r3]
	Input_Y[current_index_aqsample] = adc_channel_instance.ADC_Y;
 8001334:	4ba1      	ldr	r3, [pc, #644]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001336:	88da      	ldrh	r2, [r3, #6]
 8001338:	4ba1      	ldr	r3, [pc, #644]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	ee07 2a90 	vmov	s15, r2
 8001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001344:	4aa0      	ldr	r2, [pc, #640]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	edc3 7a00 	vstr	s15, [r3]
	Input_Z[current_index_aqsample] = adc_channel_instance.ADC_Z;
 800134e:	4b9b      	ldr	r3, [pc, #620]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001350:	891a      	ldrh	r2, [r3, #8]
 8001352:	4b9b      	ldr	r3, [pc, #620]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 2a90 	vmov	s15, r2
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	4a9b      	ldr	r2, [pc, #620]	@ (80015cc <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	edc3 7a00 	vstr	s15, [r3]


	/**************************************************************************************************************************************
	 * ELABORAZIONE
	 **************************************************************************************************************************************/
	arm_fir_f32(&S_FIR,&Input_X[current_index_aqsample], &output_X, 1);
 8001368:	4b95      	ldr	r3, [pc, #596]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4a95      	ldr	r2, [pc, #596]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001370:	1899      	adds	r1, r3, r2
 8001372:	2301      	movs	r3, #1
 8001374:	4a96      	ldr	r2, [pc, #600]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001376:	4897      	ldr	r0, [pc, #604]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001378:	f004 fbec 	bl	8005b54 <arm_fir_f32>
	arm_fir_f32(&S_FIR,&Input_Y[current_index_aqsample], &output_Y, 1);
 800137c:	4b90      	ldr	r3, [pc, #576]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4a91      	ldr	r2, [pc, #580]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8001384:	1899      	adds	r1, r3, r2
 8001386:	2301      	movs	r3, #1
 8001388:	4a93      	ldr	r2, [pc, #588]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 800138a:	4892      	ldr	r0, [pc, #584]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 800138c:	f004 fbe2 	bl	8005b54 <arm_fir_f32>
	arm_fir_f32(&S_FIR,&Input_Z[current_index_aqsample], &output_Z, 1);
 8001390:	4b8b      	ldr	r3, [pc, #556]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4a8d      	ldr	r2, [pc, #564]	@ (80015cc <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001398:	1899      	adds	r1, r3, r2
 800139a:	2301      	movs	r3, #1
 800139c:	4a8f      	ldr	r2, [pc, #572]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 800139e:	488d      	ldr	r0, [pc, #564]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80013a0:	f004 fbd8 	bl	8005b54 <arm_fir_f32>

	output_X  = output_X * 10;
 80013a4:	4b8a      	ldr	r3, [pc, #552]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b87      	ldr	r3, [pc, #540]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
	output_Y  = output_Y * 10;
 80013b8:	4b87      	ldr	r3, [pc, #540]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	4b84      	ldr	r3, [pc, #528]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	output_Z  = output_Z * 10;
 80013cc:	4b83      	ldr	r3, [pc, #524]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	4b80      	ldr	r3, [pc, #512]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80013dc:	edc3 7a00 	vstr	s15, [r3]


	if(output_X < 0)
 80013e0:	4b7b      	ldr	r3, [pc, #492]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d507      	bpl.n	8001400 <HAL_ADC_ConvCpltCallback+0x10c>
		output_X = output_X * -1;
 80013f0:	4b77      	ldr	r3, [pc, #476]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eef1 7a67 	vneg.f32	s15, s15
 80013fa:	4b75      	ldr	r3, [pc, #468]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]
	if(output_Y < 0)
 8001400:	4b75      	ldr	r3, [pc, #468]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d507      	bpl.n	8001420 <HAL_ADC_ConvCpltCallback+0x12c>
		output_Y = output_Y * -1;
 8001410:	4b71      	ldr	r3, [pc, #452]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eef1 7a67 	vneg.f32	s15, s15
 800141a:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	if(output_Z < 0)
 8001420:	4b6e      	ldr	r3, [pc, #440]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d507      	bpl.n	8001440 <HAL_ADC_ConvCpltCallback+0x14c>
		output_Z = output_Z * -1;
 8001430:	4b6a      	ldr	r3, [pc, #424]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef1 7a67 	vneg.f32	s15, s15
 800143a:	4b68      	ldr	r3, [pc, #416]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
	/*******************************************************/

	/*********************************************************************************************************
	 * Se uno dei tre segnali supera la soglia degli urti viene messo a true il flag del bump
	 *********************************************************************************************************/
	if(BumpFlag==false && ((output_X>bumpsThreshold)||(output_Y>bumpsThreshold)||(output_Z>bumpsThreshold)) ){
 8001440:	4b67      	ldr	r3, [pc, #412]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x2ec>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d038      	beq.n	80014c0 <HAL_ADC_ConvCpltCallback+0x1cc>
 800144e:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145a:	4b5d      	ldr	r3, [pc, #372]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d41b      	bmi.n	80014a2 <HAL_ADC_ConvCpltCallback+0x1ae>
 800146a:	4b5e      	ldr	r3, [pc, #376]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0x2f0>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	4b58      	ldr	r3, [pc, #352]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d40d      	bmi.n	80014a2 <HAL_ADC_ConvCpltCallback+0x1ae>
 8001486:	4b57      	ldr	r3, [pc, #348]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001492:	4b52      	ldr	r3, [pc, #328]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d50e      	bpl.n	80014c0 <HAL_ADC_ConvCpltCallback+0x1cc>
		//send_bump_alarm();
		output_X_bump = output_X;
 80014a2:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x2f4>)
 80014a8:	6013      	str	r3, [r2, #0]
		output_Y_bump = output_Y;
 80014aa:	4b4b      	ldr	r3, [pc, #300]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a4f      	ldr	r2, [pc, #316]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x2f8>)
 80014b0:	6013      	str	r3, [r2, #0]
		output_Z_bump = output_Z;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a4e      	ldr	r2, [pc, #312]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x2fc>)
 80014b8:	6013      	str	r3, [r2, #0]
		BumpFlag=true;
 80014ba:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x2ec>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
	/************************************************************************************************/

	/*********************************************************************************************************
	 * Se uno dei tre segnali supera la soglia nascosta degli urti viene messo a true il flag dell'hidden bump
	 *********************************************************************************************************/
	if(HiddenBumpFlag==false &&((output_X>hiddenBumpsThreshold)||(output_Y>hiddenBumpsThreshold)||(output_Z>hiddenBumpsThreshold)) ){
 80014c0:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <HAL_ADC_ConvCpltCallback+0x300>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f083 0301 	eor.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d038      	beq.n	8001540 <HAL_ADC_ConvCpltCallback+0x24c>
 80014ce:	4b4a      	ldr	r3, [pc, #296]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x304>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	d41b      	bmi.n	8001522 <HAL_ADC_ConvCpltCallback+0x22e>
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x304>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d40d      	bmi.n	8001522 <HAL_ADC_ConvCpltCallback+0x22e>
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x304>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d50e      	bpl.n	8001540 <HAL_ADC_ConvCpltCallback+0x24c>
		//send_hidden_bump_alarm();
		output_X_bump = output_X;
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a30      	ldr	r2, [pc, #192]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8001528:	6013      	str	r3, [r2, #0]
		output_Y_bump = output_Y;
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001530:	6013      	str	r3, [r2, #0]
		output_Z_bump = output_Z;
 8001532:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2e      	ldr	r2, [pc, #184]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x2fc>)
 8001538:	6013      	str	r3, [r2, #0]
		HiddenBumpFlag=true;
 800153a:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <HAL_ADC_ConvCpltCallback+0x300>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]

	/******************************************************
	 * Se output_X supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni xShakesCount
	 ******************************************************/
	if(output_X>shakesThreshold){
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_ADC_ConvCpltCallback+0x308>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d505      	bpl.n	8001568 <HAL_ADC_ConvCpltCallback+0x274>
		xShakesCount++;
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <HAL_ADC_ConvCpltCallback+0x30c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001566:	701a      	strb	r2, [r3, #0]
	/******************************************************/
	/******************************************************
	 * Se output_Y supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni yShakesCount
	 ******************************************************/
	if(output_Y>shakesThreshold){
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_ADC_ConvCpltCallback+0x308>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d505      	bpl.n	8001590 <HAL_ADC_ConvCpltCallback+0x29c>
		yShakesCount++;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <HAL_ADC_ConvCpltCallback+0x310>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_ADC_ConvCpltCallback+0x310>)
 800158e:	701a      	strb	r2, [r3, #0]
	/******************************************************/
	/******************************************************
	 * Se output_Z supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni zShakesCount
	 ******************************************************/
	if(output_Z>shakesThreshold){
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_ADC_ConvCpltCallback+0x308>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d531      	bpl.n	8001610 <HAL_ADC_ConvCpltCallback+0x31c>
		zShakesCount++;
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_ADC_ConvCpltCallback+0x314>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	e02a      	b.n	800160c <HAL_ADC_ConvCpltCallback+0x318>
 80015b6:	bf00      	nop
 80015b8:	200007c0 	.word	0x200007c0
 80015bc:	20002934 	.word	0x20002934
 80015c0:	20001130 	.word	0x20001130
 80015c4:	20001134 	.word	0x20001134
 80015c8:	20001934 	.word	0x20001934
 80015cc:	20002134 	.word	0x20002134
 80015d0:	20000590 	.word	0x20000590
 80015d4:	200007cc 	.word	0x200007cc
 80015d8:	20000594 	.word	0x20000594
 80015dc:	20000598 	.word	0x20000598
 80015e0:	200005a8 	.word	0x200005a8
 80015e4:	20000000 	.word	0x20000000
 80015e8:	2000059c 	.word	0x2000059c
 80015ec:	200005a0 	.word	0x200005a0
 80015f0:	200005a4 	.word	0x200005a4
 80015f4:	200005a9 	.word	0x200005a9
 80015f8:	20000006 	.word	0x20000006
 80015fc:	20000002 	.word	0x20000002
 8001600:	2000058a 	.word	0x2000058a
 8001604:	2000058b 	.word	0x2000058b
 8001608:	2000058c 	.word	0x2000058c
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_ADC_ConvCpltCallback+0x348>)
 800160e:	701a      	strb	r2, [r3, #0]
	}
	/******************************************************/

	/**************************************************************************************************************************************/

	current_index_aqsample = (current_index_aqsample + 1) % SAMPLES;
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	425a      	negs	r2, r3
 8001618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001620:	bf58      	it	pl
 8001622:	4253      	negpl	r3, r2
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001626:	6013      	str	r3, [r2, #0]



	HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 8001628:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_ADC_ConvCpltCallback+0x350>)
 800162e:	f002 fa08 	bl	8003a42 <HAL_GPIO_TogglePin>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000058c 	.word	0x2000058c
 8001640:	20001130 	.word	0x20001130
 8001644:	40020800 	.word	0x40020800

08001648 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d111      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x36>
		//		printf("%f %f %f %f %f %f\r\n",Input_X[current_index_aqsample],Input_Y[current_index_aqsample],Input_Z[current_index_aqsample],output_X,output_Y,output_Z);
		/****************************************************************************************************************/
		//printf("%d %d %d\r\n",adc_channel_instance.ADC_X,adc_channel_instance.ADC_Y,adc_channel_instance.ADC_Z);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//if((output_X>bumpsThreshold)||(output_Y>bumpsThreshold)||(output_Z>bumpsThreshold)){
		if(BumpFlag==true){
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_TIM_PeriodElapsedCallback+0x24>
			//send_bump_alarm((uint8_t)output_X, (uint8_t)output_Y, (uint8_t)output_Z);
			send_bump_alarm();
 8001662:	f000 f96b 	bl	800193c <send_bump_alarm>
			BumpFlag=false;
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

		/*********************************************************************************************************
		 * Se uno dei tre segnali supera la soglia nascosta degli urti viene trasmesso al SW l'allarme di urto
		 *********************************************************************************************************/
		//if((output_X>hiddenBumpsThreshold)||(output_Y>hiddenBumpsThreshold)||(output_Z>hiddenBumpsThreshold)){
		if(HiddenBumpFlag==true){
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_TIM_PeriodElapsedCallback+0x36>
			send_hidden_bump_alarm();
 8001674:	f000 f9d4 	bl	8001a20 <send_hidden_bump_alarm>
			HiddenBumpFlag=false;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	//
	//		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
	//
	//	}
	/* USER CODE END Callback 0 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40014400 	.word	0x40014400
 800168c:	200005a8 	.word	0x200005a8
 8001690:	200005a9 	.word	0x200005a9

08001694 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b091      	sub	sp, #68	@ 0x44
 8001698:	af04      	add	r7, sp, #16
 800169a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a55      	ldr	r2, [pc, #340]	@ (80017f4 <HAL_UART_RxCpltCallback+0x160>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	f040 80a2 	bne.w	80017ea <HAL_UART_RxCpltCallback+0x156>
	{

		/*****************************************************************************************/

		UART1_rxBuffer[rxbuffer_index] = UART1_rx;
 80016a6:	4b54      	ldr	r3, [pc, #336]	@ (80017f8 <HAL_UART_RxCpltCallback+0x164>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_UART_RxCpltCallback+0x168>)
 80016ae:	7819      	ldrb	r1, [r3, #0]
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_UART_RxCpltCallback+0x16c>)
 80016b2:	5499      	strb	r1, [r3, r2]
		//		rxbuffer_index = (rxbuffer_index + 1) % MAX_BUFFER_LENGHT;
		rxbuffer_index = (rxbuffer_index + 1);
 80016b4:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <HAL_UART_RxCpltCallback+0x164>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <HAL_UART_RxCpltCallback+0x164>)
 80016be:	701a      	strb	r2, [r3, #0]


		// se è arrivato tutto il pacchetto entra nell'if
		if(UART1_rx == ETX_TAG)
 80016c0:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_UART_RxCpltCallback+0x168>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2baf      	cmp	r3, #175	@ 0xaf
 80016c6:	f040 808b 	bne.w	80017e0 <HAL_UART_RxCpltCallback+0x14c>
		{

			int size_of_packet = sizeof(protocollo_uart);
 80016ca:	231e      	movs	r3, #30
 80016cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rxbuffer_index >= size_of_packet)
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_UART_RxCpltCallback+0x164>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d6:	4293      	cmp	r3, r2
 80016d8:	dc79      	bgt.n	80017ce <HAL_UART_RxCpltCallback+0x13a>
			{

				protocollo_uart dummy;
				memcpy(&dummy,UART1_rxBuffer,size_of_packet);
 80016da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4947      	ldr	r1, [pc, #284]	@ (8001800 <HAL_UART_RxCpltCallback+0x16c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fa77 	bl	8006bd6 <memcpy>

				if((dummy.stx == STX_TAG)&&(dummy.etx == ETX_TAG))
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	2bbe      	cmp	r3, #190	@ 0xbe
 80016ec:	d16f      	bne.n	80017ce <HAL_UART_RxCpltCallback+0x13a>
 80016ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80016f2:	2baf      	cmp	r3, #175	@ 0xaf
 80016f4:	d16b      	bne.n	80017ce <HAL_UART_RxCpltCallback+0x13a>
				{

					switch(dummy.cmd)
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	3b02      	subs	r3, #2
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d863      	bhi.n	80017c6 <HAL_UART_RxCpltCallback+0x132>
 80016fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <HAL_UART_RxCpltCallback+0x70>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001725 	.word	0x08001725
 8001708:	080017cd 	.word	0x080017cd
 800170c:	080017c7 	.word	0x080017c7
 8001710:	080017c7 	.word	0x080017c7
 8001714:	0800178b 	.word	0x0800178b
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017bb 	.word	0x080017bb
 8001720:	080017c1 	.word	0x080017c1
					{

					case 	shake_monitor_cmd:

						shakesCount = xShakesCount;
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_UART_RxCpltCallback+0x170>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 800172c:	801a      	strh	r2, [r3, #0]
						if(yShakesCount > shakesCount) shakesCount = yShakesCount;
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_UART_RxCpltCallback+0x178>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d904      	bls.n	8001746 <HAL_UART_RxCpltCallback+0xb2>
 800173c:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_UART_RxCpltCallback+0x178>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 8001744:	801a      	strh	r2, [r3, #0]
						if(zShakesCount > shakesCount) shakesCount = zShakesCount;
 8001746:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <HAL_UART_RxCpltCallback+0x17c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d904      	bls.n	800175e <HAL_UART_RxCpltCallback+0xca>
 8001754:	4b2e      	ldr	r3, [pc, #184]	@ (8001810 <HAL_UART_RxCpltCallback+0x17c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 800175c:	801a      	strh	r2, [r3, #0]

						send_shakes_count(shakesCount,xShakesCount,yShakesCount,zShakesCount);
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_UART_RxCpltCallback+0x174>)
 8001760:	8818      	ldrh	r0, [r3, #0]
 8001762:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <HAL_UART_RxCpltCallback+0x170>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_UART_RxCpltCallback+0x178>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <HAL_UART_RxCpltCallback+0x17c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f000 f9c7 	bl	8001b04 <send_shakes_count>

						xShakesCount = 0;
 8001776:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_UART_RxCpltCallback+0x170>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
						yShakesCount = 0;
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_UART_RxCpltCallback+0x178>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
						zShakesCount = 0;
 8001782:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_UART_RxCpltCallback+0x17c>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
						break;
 8001788:	e021      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>

					case 	reboot_cmd:
						break;

					case 	setConfiguration_cmd:
						receive_config(dummy);
 800178a:	466c      	mov	r4, sp
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001792:	c407      	stmia	r4!, {r0, r1, r2}
 8001794:	8023      	strh	r3, [r4, #0]
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179c:	f000 f8ac 	bl	80018f8 <receive_config>
						break;
 80017a0:	e015      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>

					case 	saveConfiguration_cmd:
						receive_config(dummy);
 80017a2:	466c      	mov	r4, sp
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017aa:	c407      	stmia	r4!, {r0, r1, r2}
 80017ac:	8023      	strh	r3, [r4, #0]
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b4:	f000 f8a0 	bl	80018f8 <receive_config>
						break;
 80017b8:	e009      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>

					case 	getConfiguration_cmd:
						send_config();
 80017ba:	f000 f82b 	bl	8001814 <send_config>
						break;
 80017be:	e006      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>

					case 	getRawData_cmd:
						send_raw_data();
 80017c0:	f000 fa30 	bl	8001c24 <send_raw_data>
						break;
 80017c4:	e003      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>
						//case    alarm_disabled_cmd:
						//	send_alarm_disabled();
						//	break;

					default:
						send_nack();
 80017c6:	f000 facf 	bl	8001d68 <send_nack>
						break;
 80017ca:	e000      	b.n	80017ce <HAL_UART_RxCpltCallback+0x13a>
						break;
 80017cc:	bf00      	nop
			}

			/**************************************************************
			 * azzera il buffer UART1_rxBuffer e l'indice rxbuffer_index
			 **************************************************************/
			memset(UART1_rxBuffer,0,sizeof(UART1_rxBuffer));
 80017ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d2:	2100      	movs	r1, #0
 80017d4:	480a      	ldr	r0, [pc, #40]	@ (8001800 <HAL_UART_RxCpltCallback+0x16c>)
 80017d6:	f005 f97e 	bl	8006ad6 <memset>
			rxbuffer_index = 0;
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <HAL_UART_RxCpltCallback+0x164>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart1, &pippo, 1, 100);

		/********************************************
		 * attiva l'UART in interrupt mode
		 ********************************************/
		HAL_UART_Receive_IT(&huart1,&UART1_rx, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	4906      	ldr	r1, [pc, #24]	@ (80017fc <HAL_UART_RxCpltCallback+0x168>)
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <HAL_UART_RxCpltCallback+0x160>)
 80017e6:	f003 fa28 	bl	8004c3a <HAL_UART_Receive_IT>

		/*****************************************************************************************/

	}

}
 80017ea:	bf00      	nop
 80017ec:	3734      	adds	r7, #52	@ 0x34
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000540 	.word	0x20000540
 80017f8:	200007bc 	.word	0x200007bc
 80017fc:	200005b8 	.word	0x200005b8
 8001800:	200005bc 	.word	0x200005bc
 8001804:	2000058a 	.word	0x2000058a
 8001808:	20000588 	.word	0x20000588
 800180c:	2000058b 	.word	0x2000058b
 8001810:	2000058c 	.word	0x2000058c

08001814 <send_config>:

/************************************************************************************************
 * Invia i parametri di configurazione all'interfaccia SW
 ************************************************************************************************/

void send_config(){
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0


	protocollo_uart send_pkt = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	221e      	movs	r2, #30
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f005 f958 	bl	8006ad6 <memset>
	send_pkt.stx = STX_TAG;
 8001826:	23be      	movs	r3, #190	@ 0xbe
 8001828:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = getConfiguration_cmd;
 800182a:	2308      	movs	r3, #8
 800182c:	717b      	strb	r3, [r7, #5]


	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <send_config+0xb0>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <send_config+0xb4>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 800183a:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <send_config+0xb8>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 8001840:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <send_config+0xbc>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <send_config+0xc0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <send_config+0xc4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <send_config+0xc8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <send_config+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 8001860:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <send_config+0xd0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <send_config+0xd4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <send_config+0xd8>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	3302      	adds	r3, #2
 800187c:	2119      	movs	r1, #25
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fabc 	bl	8001dfc <crc_16>
 8001884:	4603      	mov	r3, r0
 8001886:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 800188a:	23af      	movs	r3, #175	@ 0xaf
 800188c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001890:	231e      	movs	r3, #30
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001898:	2100      	movs	r1, #0
 800189a:	4815      	ldr	r0, [pc, #84]	@ (80018f0 <send_config+0xdc>)
 800189c:	f005 f91b 	bl	8006ad6 <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 80018a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4812      	ldr	r0, [pc, #72]	@ (80018f0 <send_config+0xdc>)
 80018a8:	f005 f995 	bl	8006bd6 <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	2364      	movs	r3, #100	@ 0x64
 80018b2:	490f      	ldr	r1, [pc, #60]	@ (80018f0 <send_config+0xdc>)
 80018b4:	480f      	ldr	r0, [pc, #60]	@ (80018f4 <send_config+0xe0>)
 80018b6:	f003 f935 	bl	8004b24 <HAL_UART_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	@ 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000002 	.word	0x20000002
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000588 	.word	0x20000588
 80018d4:	2000058a 	.word	0x2000058a
 80018d8:	2000058b 	.word	0x2000058b
 80018dc:	2000058c 	.word	0x2000058c
 80018e0:	20000590 	.word	0x20000590
 80018e4:	20000594 	.word	0x20000594
 80018e8:	20000598 	.word	0x20000598
 80018ec:	20000006 	.word	0x20000006
 80018f0:	200006bc 	.word	0x200006bc
 80018f4:	20000540 	.word	0x20000540

080018f8 <receive_config>:

/************************************************
 * Riceve i parametri di configurazione
 * dall'interfaccia SW
 ************************************************/
void receive_config(protocollo_uart pkt){
 80018f8:	b084      	sub	sp, #16
 80018fa:	b490      	push	{r4, r7}
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	f107 0408 	add.w	r4, r7, #8
 8001902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bumpsThreshold = pkt.pay.bumpsThreshold;
 8001906:	897a      	ldrh	r2, [r7, #10]
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <receive_config+0x34>)
 800190a:	801a      	strh	r2, [r3, #0]
	shakesThreshold = pkt.pay.shakesThreshold;
 800190c:	89ba      	ldrh	r2, [r7, #12]
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <receive_config+0x38>)
 8001910:	801a      	strh	r2, [r3, #0]
	shakesSamplingTime = pkt.pay.shakesSamplingTime;
 8001912:	89fa      	ldrh	r2, [r7, #14]
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <receive_config+0x3c>)
 8001916:	801a      	strh	r2, [r3, #0]
	hiddenBumpsThreshold = pkt.pay.hiddenBumpsThreshold;
 8001918:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <receive_config+0x40>)
 8001920:	801a      	strh	r2, [r3, #0]
	//shakesCount = pkt.payload[3];



}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc90      	pop	{r4, r7}
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	20000000 	.word	0x20000000
 8001930:	20000002 	.word	0x20000002
 8001934:	20000004 	.word	0x20000004
 8001938:	20000006 	.word	0x20000006

0800193c <send_bump_alarm>:
/************************************************/
/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per urto
 ************************************************************************************************/
//void send_bump_alarm(uint8_t output_X,uint8_t output_Y,uint8_t output_Z){
void send_bump_alarm(){
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0


	protocollo_uart send_pkt = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	221e      	movs	r2, #30
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f005 f8c4 	bl	8006ad6 <memset>
	send_pkt.stx = STX_TAG;
 800194e:	23be      	movs	r3, #190	@ 0xbe
 8001950:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = bump_event_cmd;
 8001952:	2300      	movs	r3, #0
 8001954:	717b      	strb	r3, [r7, #5]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001956:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <send_bump_alarm+0xb0>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <send_bump_alarm+0xb4>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <send_bump_alarm+0xb8>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <send_bump_alarm+0xbc>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <send_bump_alarm+0xc0>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001974:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <send_bump_alarm+0xc4>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 800197a:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <send_bump_alarm+0xc8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X_bump;
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <send_bump_alarm+0xcc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y_bump;
 8001988:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <send_bump_alarm+0xd0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z_bump;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <send_bump_alarm+0xd4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <send_bump_alarm+0xd8>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	f8a7 301d 	strh.w	r3, [r7, #29]


	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	3302      	adds	r3, #2
 80019a4:	2119      	movs	r1, #25
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fa28 	bl	8001dfc <crc_16>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 80019b2:	23af      	movs	r3, #175	@ 0xaf
 80019b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	int size_of_packet = sizeof(protocollo_uart);
 80019b8:	231e      	movs	r3, #30
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 80019bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c0:	2100      	movs	r1, #0
 80019c2:	4815      	ldr	r0, [pc, #84]	@ (8001a18 <send_bump_alarm+0xdc>)
 80019c4:	f005 f887 	bl	8006ad6 <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 80019c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <send_bump_alarm+0xdc>)
 80019d0:	f005 f901 	bl	8006bd6 <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2364      	movs	r3, #100	@ 0x64
 80019da:	490f      	ldr	r1, [pc, #60]	@ (8001a18 <send_bump_alarm+0xdc>)
 80019dc:	480f      	ldr	r0, [pc, #60]	@ (8001a1c <send_bump_alarm+0xe0>)
 80019de:	f003 f8a1 	bl	8004b24 <HAL_UART_Transmit>
}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000002 	.word	0x20000002
 80019f4:	20000004 	.word	0x20000004
 80019f8:	20000588 	.word	0x20000588
 80019fc:	2000058a 	.word	0x2000058a
 8001a00:	2000058b 	.word	0x2000058b
 8001a04:	2000058c 	.word	0x2000058c
 8001a08:	2000059c 	.word	0x2000059c
 8001a0c:	200005a0 	.word	0x200005a0
 8001a10:	200005a4 	.word	0x200005a4
 8001a14:	20000006 	.word	0x20000006
 8001a18:	200006bc 	.word	0x200006bc
 8001a1c:	20000540 	.word	0x20000540

08001a20 <send_hidden_bump_alarm>:

/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per urto
 ************************************************************************************************/
//void send_bump_alarm(uint8_t output_X,uint8_t output_Y,uint8_t output_Z){
void send_hidden_bump_alarm(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0

	protocollo_uart send_pkt = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	221e      	movs	r2, #30
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f005 f852 	bl	8006ad6 <memset>
	send_pkt.stx = STX_TAG;
 8001a32:	23be      	movs	r3, #190	@ 0xbe
 8001a34:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = hidden_bump_event_cmd;
 8001a36:	230a      	movs	r3, #10
 8001a38:	717b      	strb	r3, [r7, #5]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <send_hidden_bump_alarm+0xb0>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <send_hidden_bump_alarm+0xb4>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <send_hidden_bump_alarm+0xb8>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 8001a4c:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <send_hidden_bump_alarm+0xbc>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <send_hidden_bump_alarm+0xc0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <send_hidden_bump_alarm+0xc4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <send_hidden_bump_alarm+0xc8>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X_bump;
 8001a64:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <send_hidden_bump_alarm+0xcc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y_bump;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <send_hidden_bump_alarm+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z_bump;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <send_hidden_bump_alarm+0xd4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <send_hidden_bump_alarm+0xd8>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	3302      	adds	r3, #2
 8001a88:	2119      	movs	r1, #25
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f9b6 	bl	8001dfc <crc_16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 8001a96:	23af      	movs	r3, #175	@ 0xaf
 8001a98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001a9c:	231e      	movs	r3, #30
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001aa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4815      	ldr	r0, [pc, #84]	@ (8001afc <send_hidden_bump_alarm+0xdc>)
 8001aa8:	f005 f815 	bl	8006ad6 <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4812      	ldr	r0, [pc, #72]	@ (8001afc <send_hidden_bump_alarm+0xdc>)
 8001ab4:	f005 f88f 	bl	8006bd6 <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	2364      	movs	r3, #100	@ 0x64
 8001abe:	490f      	ldr	r1, [pc, #60]	@ (8001afc <send_hidden_bump_alarm+0xdc>)
 8001ac0:	480f      	ldr	r0, [pc, #60]	@ (8001b00 <send_hidden_bump_alarm+0xe0>)
 8001ac2:	f003 f82f 	bl	8004b24 <HAL_UART_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000002 	.word	0x20000002
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20000588 	.word	0x20000588
 8001ae0:	2000058a 	.word	0x2000058a
 8001ae4:	2000058b 	.word	0x2000058b
 8001ae8:	2000058c 	.word	0x2000058c
 8001aec:	2000059c 	.word	0x2000059c
 8001af0:	200005a0 	.word	0x200005a0
 8001af4:	200005a4 	.word	0x200005a4
 8001af8:	20000006 	.word	0x20000006
 8001afc:	200006bc 	.word	0x200006bc
 8001b00:	20000540 	.word	0x20000540

08001b04 <send_shakes_count>:
/************************************************************************************************/

/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per vibrazioni
 ************************************************************************************************/
void send_shakes_count(uint16_t shakesCount, uint16_t XshakesCount, uint16_t YshakesCount, uint16_t ZshakesCount){
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b08d      	sub	sp, #52	@ 0x34
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	80fb      	strh	r3, [r7, #6]
 8001b16:	4603      	mov	r3, r0
 8001b18:	80bb      	strh	r3, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	803b      	strh	r3, [r7, #0]


	protocollo_uart send_pkt = {0};
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	221e      	movs	r2, #30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 ffd3 	bl	8006ad6 <memset>
	send_pkt.stx = STX_TAG;
 8001b30:	23be      	movs	r3, #190	@ 0xbe
 8001b32:	733b      	strb	r3, [r7, #12]
	send_pkt.cmd = shake_event_cmd;
 8001b34:	2301      	movs	r3, #1
 8001b36:	737b      	strb	r3, [r7, #13]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <send_shakes_count+0xe4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	81fb      	strh	r3, [r7, #14]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <send_shakes_count+0xe8>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	823b      	strh	r3, [r7, #16]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <send_shakes_count+0xec>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	827b      	strh	r3, [r7, #18]
	send_pkt.pay.shakesCount = shakesCount;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	82bb      	strh	r3, [r7, #20]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <send_shakes_count+0xf0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	75bb      	strb	r3, [r7, #22]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <send_shakes_count+0xf4>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	75fb      	strb	r3, [r7, #23]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <send_shakes_count+0xf8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	763b      	strb	r3, [r7, #24]
	send_pkt.pay.output_X = output_X; //avgOutput_X; //output_X;
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <send_shakes_count+0xfc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.output_Y = output_Y; //avgOutput_Y;//output_Y;
 8001b68:	4b26      	ldr	r3, [pc, #152]	@ (8001c04 <send_shakes_count+0x100>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8c7 301d 	str.w	r3, [r7, #29]
	send_pkt.pay.output_Z = output_Z; //avgOutput_Z; //output_Z;
 8001b70:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <send_shakes_count+0x104>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <send_shakes_count+0x108>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	f8a7 3025 	strh.w	r3, [r7, #37]	@ 0x25

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	3302      	adds	r3, #2
 8001b86:	2119      	movs	r1, #25
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f937 	bl	8001dfc <crc_16>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f8a7 3027 	strh.w	r3, [r7, #39]	@ 0x27

	send_pkt.etx = ETX_TAG;
 8001b94:	23af      	movs	r3, #175	@ 0xaf
 8001b96:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

	int size_of_packet = sizeof(protocollo_uart);
 8001b9a:	231e      	movs	r3, #30
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	481a      	ldr	r0, [pc, #104]	@ (8001c10 <send_shakes_count+0x10c>)
 8001ba6:	f004 ff96 	bl	8006ad6 <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4817      	ldr	r0, [pc, #92]	@ (8001c10 <send_shakes_count+0x10c>)
 8001bb4:	f005 f80f 	bl	8006bd6 <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	4914      	ldr	r1, [pc, #80]	@ (8001c10 <send_shakes_count+0x10c>)
 8001bc0:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <send_shakes_count+0x110>)
 8001bc2:	f002 ffaf 	bl	8004b24 <HAL_UART_Transmit>


	/***************************************************************
	 * Riazzera i valori medi calcolati per gli assi X, Y e Z
	 ***************************************************************/
	avgOutput_X = 0;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <send_shakes_count+0x114>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	avgOutput_Y = 0;
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <send_shakes_count+0x118>)
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
	avgOutput_Z = 0;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <send_shakes_count+0x11c>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
	/***************************************************************/

}
 8001bde:	bf00      	nop
 8001be0:	3734      	adds	r7, #52	@ 0x34
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000002 	.word	0x20000002
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	2000058a 	.word	0x2000058a
 8001bf8:	2000058b 	.word	0x2000058b
 8001bfc:	2000058c 	.word	0x2000058c
 8001c00:	20000590 	.word	0x20000590
 8001c04:	20000594 	.word	0x20000594
 8001c08:	20000598 	.word	0x20000598
 8001c0c:	20000006 	.word	0x20000006
 8001c10:	200006bc 	.word	0x200006bc
 8001c14:	20000540 	.word	0x20000540
 8001c18:	200005ac 	.word	0x200005ac
 8001c1c:	200005b0 	.word	0x200005b0
 8001c20:	200005b4 	.word	0x200005b4

08001c24 <send_raw_data>:
/************************************************************************************************/

/************************************************************************************************
 * Invia all'interfaccia SW i dati grezzi
 ************************************************************************************************/
void send_raw_data(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0

	protocollo_uart send_pkt = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	221e      	movs	r2, #30
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 ff50 	bl	8006ad6 <memset>
	send_pkt.stx = STX_TAG;
 8001c36:	23be      	movs	r3, #190	@ 0xbe
 8001c38:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = getRawData_cmd;
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	717b      	strb	r3, [r7, #5]


	//*************************************//

	if(output_X < 0)
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <send_raw_data+0x110>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d507      	bpl.n	8001c5e <send_raw_data+0x3a>
		output_X = output_X * -1;
 8001c4e:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <send_raw_data+0x110>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	eef1 7a67 	vneg.f32	s15, s15
 8001c58:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <send_raw_data+0x110>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	if(output_Y < 0)
 8001c5e:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <send_raw_data+0x114>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d507      	bpl.n	8001c7e <send_raw_data+0x5a>
		output_Y = output_Y * -1;
 8001c6e:	4b32      	ldr	r3, [pc, #200]	@ (8001d38 <send_raw_data+0x114>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	eef1 7a67 	vneg.f32	s15, s15
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <send_raw_data+0x114>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
	if(output_Z < 0)
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d3c <send_raw_data+0x118>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d507      	bpl.n	8001c9e <send_raw_data+0x7a>
		output_Z = output_Z * -1;
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <send_raw_data+0x118>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef1 7a67 	vneg.f32	s15, s15
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <send_raw_data+0x118>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]

	//***************************************//

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <send_raw_data+0x11c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <send_raw_data+0x120>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <send_raw_data+0x124>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <send_raw_data+0x128>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <send_raw_data+0x12c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <send_raw_data+0x130>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <send_raw_data+0x134>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <send_raw_data+0x110>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <send_raw_data+0x114>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <send_raw_data+0x118>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <send_raw_data+0x138>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	3302      	adds	r3, #2
 8001cec:	2119      	movs	r1, #25
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f884 	bl	8001dfc <crc_16>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8a7 301f 	strh.w	r3, [r7, #31]

	send_pkt.etx = ETX_TAG;
 8001cfa:	23af      	movs	r3, #175	@ 0xaf
 8001cfc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001d00:	231e      	movs	r3, #30
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <send_raw_data+0x13c>)
 8001d0c:	f004 fee3 	bl	8006ad6 <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	@ (8001d60 <send_raw_data+0x13c>)
 8001d18:	f004 ff5d 	bl	8006bd6 <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2364      	movs	r3, #100	@ 0x64
 8001d22:	490f      	ldr	r1, [pc, #60]	@ (8001d60 <send_raw_data+0x13c>)
 8001d24:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <send_raw_data+0x140>)
 8001d26:	f002 fefd 	bl	8004b24 <HAL_UART_Transmit>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000590 	.word	0x20000590
 8001d38:	20000594 	.word	0x20000594
 8001d3c:	20000598 	.word	0x20000598
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000002 	.word	0x20000002
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	20000588 	.word	0x20000588
 8001d50:	2000058a 	.word	0x2000058a
 8001d54:	2000058b 	.word	0x2000058b
 8001d58:	2000058c 	.word	0x2000058c
 8001d5c:	20000006 	.word	0x20000006
 8001d60:	200006bc 	.word	0x200006bc
 8001d64:	20000540 	.word	0x20000540

08001d68 <send_nack>:
//
//}
/************************************************************************************************/


void send_nack(){
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <init_crc16_tab>:


/************************************************************************************
 * inizializzazione crc16
 ************************************************************************************/
static void init_crc16_tab( void ) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	80fb      	strh	r3, [r7, #6]
 8001d82:	e029      	b.n	8001dd8 <init_crc16_tab+0x60>

		crc = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	807b      	strh	r3, [r7, #2]
		c   = i;
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	80bb      	strh	r3, [r7, #4]
 8001d90:	e017      	b.n	8001dc2 <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	883b      	ldrh	r3, [r7, #0]
 8001d96:	4053      	eors	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <init_crc16_tab+0x38>
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <init_crc16_tab+0x78>)
 8001daa:	4053      	eors	r3, r2
 8001dac:	807b      	strh	r3, [r7, #2]
 8001dae:	e002      	b.n	8001db6 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8001db6:	883b      	ldrh	r3, [r7, #0]
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	88bb      	ldrh	r3, [r7, #4]
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d9e4      	bls.n	8001d92 <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	490a      	ldr	r1, [pc, #40]	@ (8001df4 <init_crc16_tab+0x7c>)
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	80fb      	strh	r3, [r7, #6]
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	2bff      	cmp	r3, #255	@ 0xff
 8001ddc:	d9d2      	bls.n	8001d84 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <init_crc16_tab+0x80>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	ffffa001 	.word	0xffffa001
 8001df4:	200001fc 	.word	0x200001fc
 8001df8:	200001f8 	.word	0x200001f8

08001dfc <crc_16>:
/************************************************************************************/

/*********************************************************************************
 * Calcolo crc 16
 *********************************************************************************/
uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <crc_16+0x68>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <crc_16+0x1c>
 8001e14:	f7ff ffb0 	bl	8001d78 <init_crc16_tab>

	crc = CRC_START_16;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d018      	beq.n	8001e58 <crc_16+0x5c>
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e011      	b.n	8001e50 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	8af9      	ldrh	r1, [r7, #22]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1c58      	adds	r0, r3, #1
 8001e38:	6138      	str	r0, [r7, #16]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	404b      	eors	r3, r1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4909      	ldr	r1, [pc, #36]	@ (8001e68 <crc_16+0x6c>)
 8001e42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e46:	4053      	eors	r3, r2
 8001e48:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3e9      	bcc.n	8001e2c <crc_16+0x30>
	}

	return crc;
 8001e58:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200001f8 	.word	0x200001f8
 8001e68:	200001fc 	.word	0x200001fc

08001e6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <Error_Handler+0x8>

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <HAL_ADC_MspInit+0xdc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d157      	bne.n	8001f9a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001f22:	2307      	movs	r3, #7
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	481d      	ldr	r0, [pc, #116]	@ (8001fac <HAL_ADC_MspInit+0xe4>)
 8001f36:	f001 fbe7 	bl	8003708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <HAL_ADC_MspInit+0xec>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f7e:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f80:	f000 ffc0 	bl	8002f04 <HAL_DMA_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f8a:	f7ff ff6f 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f92:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f94:	4a06      	ldr	r2, [pc, #24]	@ (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	20000444 	.word	0x20000444
 8001fb4:	40026410 	.word	0x40026410

08001fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	@ (800203c <HAL_I2C_MspInit+0x84>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d12b      	bne.n	8002032 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffa:	2312      	movs	r3, #18
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002006:	2304      	movs	r3, #4
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <HAL_I2C_MspInit+0x8c>)
 8002012:	f001 fb79 	bl	8003708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 8002020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_I2C_MspInit+0x88>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40005400 	.word	0x40005400
 8002040:	40023800 	.word	0x40023800
 8002044:	40020400 	.word	0x40020400

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_TIM_Base_MspInit+0x48>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d115      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	6453      	str	r3, [r2, #68]	@ 0x44
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2101      	movs	r1, #1
 800207a:	2019      	movs	r0, #25
 800207c:	f000 ff0b 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002080:	2019      	movs	r0, #25
 8002082:	f000 ff24 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40014400 	.word	0x40014400
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <HAL_UART_MspInit+0x94>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d134      	bne.n	8002124 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a14      	ldr	r2, [pc, #80]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_UART_MspInit+0x98>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002104:	2307      	movs	r3, #7
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4809      	ldr	r0, [pc, #36]	@ (8002134 <HAL_UART_MspInit+0x9c>)
 8002110:	f001 fafa 	bl	8003708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2025      	movs	r0, #37	@ 0x25
 800211a:	f000 febc 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211e:	2025      	movs	r0, #37	@ 0x25
 8002120:	f000 fed5 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	@ 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40011000 	.word	0x40011000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <NMI_Handler+0x4>

08002140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <MemManage_Handler+0x4>

08002150 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <UsageFault_Handler+0x4>

08002160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218e:	f000 f975 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800219e:	f002 fab9 	bl	8004714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004f8 	.word	0x200004f8

080021ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <USART1_IRQHandler+0x10>)
 80021b2:	f002 fd67 	bl	8004c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000540 	.word	0x20000540

080021c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA2_Stream0_IRQHandler+0x10>)
 80021c6:	f001 f835 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000444 	.word	0x20000444

080021d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_kill>:

int _kill(int pid, int sig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ee:	f004 fcc5 	bl	8006b7c <__errno>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2216      	movs	r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
  return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_exit>:

void _exit (int status)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffe7 	bl	80021e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002216:	bf00      	nop
 8002218:	e7fd      	b.n	8002216 <_exit+0x12>

0800221a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e00a      	b.n	8002242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800222c:	f3af 8000 	nop.w
 8002230:	4601      	mov	r1, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60ba      	str	r2, [r7, #8]
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf0      	blt.n	800222c <_read+0x12>
  }

  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e009      	b.n	800227a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fe1a 	bl	8000ea8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	dbf1      	blt.n	8002266 <_write+0x12>
  }
  return len;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_close>:

int _close(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b4:	605a      	str	r2, [r3, #4]
  return 0;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_isatty>:

int _isatty(int file)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f004 fc2a 	bl	8006b7c <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20020000 	.word	0x20020000
 8002354:	00000400 	.word	0x00000400
 8002358:	20002940 	.word	0x20002940
 800235c:	20002a98 	.word	0x20002a98

08002360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002388:	f7ff ffea 	bl	8002360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f004 fbe9 	bl	8006b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b6:	f7fe fd89 	bl	8000ecc <main>
  bx  lr    
 80023ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80023c8:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 80023cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80023d0:	20002a94 	.word	0x20002a94

080023d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC_IRQHandler>
	...

080023d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_Init+0x40>)
 80023e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <HAL_Init+0x40>)
 80023ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_Init+0x40>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 fd3d 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	200f      	movs	r0, #15
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff fd34 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fd55 	bl	8002eea <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 fd1d 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000008 	.word	0x20000008
 8002474:	20000010 	.word	0x20000010
 8002478:	2000000c 	.word	0x2000000c

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000010 	.word	0x20000010
 80024a0:	20002944 	.word	0x20002944

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20002944 	.word	0x20002944

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000010 	.word	0x20000010

08002504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e033      	b.n	8002582 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fcd0 	bl	8001ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800254a:	f023 0302 	bic.w	r3, r3, #2
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa44 	bl	80029e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
 8002572:	e001      	b.n	8002578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_Start_DMA+0x1e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0ce      	b.n	8002748 <HAL_ADC_Start_DMA+0x1bc>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d018      	beq.n	80025f2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002750 <HAL_ADC_Start_DMA+0x1c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002754 <HAL_ADC_Start_DMA+0x1c8>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0c9a      	lsrs	r2, r3, #18
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002600:	d107      	bne.n	8002612 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002610:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 8086 	bne.w	800272e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800264c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002660:	d106      	bne.n	8002670 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f023 0206 	bic.w	r2, r3, #6
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44
 800266e:	e002      	b.n	8002676 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_ADC_Start_DMA+0x1cc>)
 8002680:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	4a35      	ldr	r2, [pc, #212]	@ (800275c <HAL_ADC_Start_DMA+0x1d0>)
 8002688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	4a34      	ldr	r2, [pc, #208]	@ (8002760 <HAL_ADC_Start_DMA+0x1d4>)
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	4a33      	ldr	r2, [pc, #204]	@ (8002764 <HAL_ADC_Start_DMA+0x1d8>)
 8002698:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	334c      	adds	r3, #76	@ 0x4c
 80026ce:	4619      	mov	r1, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f000 fcc4 	bl	8003060 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10f      	bne.n	8002704 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d129      	bne.n	8002746 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	e020      	b.n	8002746 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <HAL_ADC_Start_DMA+0x1dc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d11b      	bne.n	8002746 <HAL_ADC_Start_DMA+0x1ba>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d114      	bne.n	8002746 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e00b      	b.n	8002746 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000008 	.word	0x20000008
 8002754:	431bde83 	.word	0x431bde83
 8002758:	40012300 	.word	0x40012300
 800275c:	08002bdd 	.word	0x08002bdd
 8002760:	08002c97 	.word	0x08002c97
 8002764:	08002cb3 	.word	0x08002cb3
 8002768:	40012000 	.word	0x40012000

0800276c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1c>
 8002798:	2302      	movs	r3, #2
 800279a:	e113      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x244>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d925      	bls.n	80027f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	3b1e      	subs	r3, #30
 80027c2:	2207      	movs	r2, #7
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4403      	add	r3, r0
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	409a      	lsls	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e022      	b.n	800283e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	2207      	movs	r2, #7
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	4603      	mov	r3, r0
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4403      	add	r3, r0
 8002834:	409a      	lsls	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d824      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b05      	subs	r3, #5
 8002858:	221f      	movs	r2, #31
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	400a      	ands	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	3b05      	subs	r3, #5
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
 800288e:	e04c      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d824      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b23      	subs	r3, #35	@ 0x23
 80028aa:	221f      	movs	r2, #31
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43da      	mvns	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	400a      	ands	r2, r1
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b23      	subs	r3, #35	@ 0x23
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e0:	e023      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b41      	subs	r3, #65	@ 0x41
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b41      	subs	r3, #65	@ 0x41
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 800292c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a28      	ldr	r2, [pc, #160]	@ (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b12      	cmp	r3, #18
 800293e:	d10b      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12b      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x1f4>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b11      	cmp	r3, #17
 8002972:	d122      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_ADC_ConfigChannel+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a11      	ldr	r2, [pc, #68]	@ (80029e0 <HAL_ADC_ConfigChannel+0x260>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9a      	lsrs	r2, r3, #18
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40012300 	.word	0x40012300
 80029d4:	40012000 	.word	0x40012000
 80029d8:	10000012 	.word	0x10000012
 80029dc:	20000008 	.word	0x20000008
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ec:	4b79      	ldr	r3, [pc, #484]	@ (8002bd4 <ADC_Init+0x1f0>)
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <ADC_Init+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e00f      	b.n	8002ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0202 	bic.w	r2, r2, #2
 8002af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	035a      	lsls	r2, r3, #13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13c      	bne.n	8002c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d127      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7fe fb43 	bl	80012f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd75 	bl	800276c <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7fe fb1b 	bl	80012e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fd4a 	bl	800276c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	@ (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff3e 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff31 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fac8 	bl	80024a4 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e099      	b.n	8003054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	e00f      	b.n	8002f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7ff faaf 	bl	80024a4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d908      	bls.n	8002f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e078      	b.n	8003054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e8      	bne.n	8002f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4b38      	ldr	r3, [pc, #224]	@ (800305c <HAL_DMA_Init+0x158>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d117      	bne.n	8003026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fb01 	bl	8003610 <DMA_CheckFifoParam>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003022:	2301      	movs	r3, #1
 8003024:	e016      	b.n	8003054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fab8 	bl	80035a4 <DMA_CalcBaseAndBitshift>
 8003034:	4603      	mov	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	223f      	movs	r2, #63	@ 0x3f
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	f010803f 	.word	0xf010803f

08003060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_DMA_Start_IT+0x26>
 8003082:	2302      	movs	r3, #2
 8003084:	e040      	b.n	8003108 <HAL_DMA_Start_IT+0xa8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12f      	bne.n	80030fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa4a 	bl	8003548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	223f      	movs	r2, #63	@ 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0216 	orr.w	r2, r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e005      	b.n	8003106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800311e:	f7ff f9c1 	bl	80024a4 <HAL_GetTick>
 8003122:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d008      	beq.n	8003142 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e052      	b.n	80031e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003160:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_Abort+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003192:	e013      	b.n	80031bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003194:	f7ff f986 	bl	80024a4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d90c      	bls.n	80031bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e015      	b.n	80031e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e4      	bne.n	8003194 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	223f      	movs	r2, #63	@ 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00c      	b.n	8003228 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2205      	movs	r2, #5
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003240:	4b8e      	ldr	r3, [pc, #568]	@ (800347c <HAL_DMA_IRQHandler+0x248>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a8e      	ldr	r2, [pc, #568]	@ (8003480 <HAL_DMA_IRQHandler+0x24c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	2208      	movs	r2, #8
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2208      	movs	r2, #8
 800328e:	409a      	lsls	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	2204      	movs	r2, #4
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2204      	movs	r2, #4
 80032fa:	409a      	lsls	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003310:	2210      	movs	r2, #16
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d043      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	2210      	movs	r2, #16
 8003330:	409a      	lsls	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d018      	beq.n	8003376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d024      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e01f      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e016      	b.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0208 	bic.w	r2, r2, #8
 8003392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	2220      	movs	r2, #32
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 808f 	beq.w	80034d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8087 	beq.w	80034d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	2220      	movs	r2, #32
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d136      	bne.n	800344c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0216 	bic.w	r2, r2, #22
 80033ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_DMA_IRQHandler+0x1da>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0208 	bic.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	223f      	movs	r2, #63	@ 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07e      	beq.n	8003540 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
        }
        return;
 800344a:	e079      	b.n	8003540 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	2b00      	cmp	r3, #0
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e02c      	b.n	80034d4 <HAL_DMA_IRQHandler+0x2a0>
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008
 8003480:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
 8003494:	e01e      	b.n	80034d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10f      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0210 	bic.w	r2, r2, #16
 80034b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d032      	beq.n	8003542 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d022      	beq.n	800352e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2205      	movs	r2, #5
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3301      	adds	r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	d307      	bcc.n	800351c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f2      	bne.n	8003500 <HAL_DMA_IRQHandler+0x2cc>
 800351a:	e000      	b.n	800351e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800351c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e000      	b.n	8003542 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003540:	bf00      	nop
    }
  }
}
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d108      	bne.n	8003588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003586:	e007      	b.n	8003598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3b10      	subs	r3, #16
 80035b4:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <DMA_CalcBaseAndBitshift+0x64>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035be:	4a13      	ldr	r2, [pc, #76]	@ (800360c <DMA_CalcBaseAndBitshift+0x68>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d909      	bls.n	80035e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e4:	e007      	b.n	80035f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	aaaaaaab 	.word	0xaaaaaaab
 800360c:	08008aac 	.word	0x08008aac

08003610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11f      	bne.n	800366a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d856      	bhi.n	80036de <DMA_CheckFifoParam+0xce>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <DMA_CheckFifoParam+0x28>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	0800365b 	.word	0x0800365b
 8003640:	08003649 	.word	0x08003649
 8003644:	080036df 	.word	0x080036df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d046      	beq.n	80036e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e043      	b.n	80036e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003662:	d140      	bne.n	80036e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003668:	e03d      	b.n	80036e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003672:	d121      	bne.n	80036b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d837      	bhi.n	80036ea <DMA_CheckFifoParam+0xda>
 800367a:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <DMA_CheckFifoParam+0x70>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003691 	.word	0x08003691
 8003684:	08003697 	.word	0x08003697
 8003688:	08003691 	.word	0x08003691
 800368c:	080036a9 	.word	0x080036a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e030      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d025      	beq.n	80036ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a6:	e022      	b.n	80036ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036b0:	d11f      	bne.n	80036f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b6:	e01c      	b.n	80036f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d903      	bls.n	80036c6 <DMA_CheckFifoParam+0xb6>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d003      	beq.n	80036cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c4:	e018      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ca:	e015      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e00b      	b.n	80036f6 <DMA_CheckFifoParam+0xe6>
      break;
 80036de:	bf00      	nop
 80036e0:	e00a      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e008      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e006      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e004      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
    }
  } 
  
  return status; 
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	@ 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e159      	b.n	80039d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003724:	2201      	movs	r2, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	f040 8148 	bne.w	80039d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d005      	beq.n	800375a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003756:	2b02      	cmp	r3, #2
 8003758:	d130      	bne.n	80037bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003790:	2201      	movs	r2, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 0201 	and.w	r2, r3, #1
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d017      	beq.n	80037f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d123      	bne.n	800384c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0203 	and.w	r2, r3, #3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a2 	beq.w	80039d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b57      	ldr	r3, [pc, #348]	@ (80039f0 <HAL_GPIO_Init+0x2e8>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	4a56      	ldr	r2, [pc, #344]	@ (80039f0 <HAL_GPIO_Init+0x2e8>)
 8003898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800389c:	6453      	str	r3, [r2, #68]	@ 0x44
 800389e:	4b54      	ldr	r3, [pc, #336]	@ (80039f0 <HAL_GPIO_Init+0x2e8>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038aa:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_GPIO_Init+0x2ec>)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	3302      	adds	r3, #2
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	220f      	movs	r2, #15
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a49      	ldr	r2, [pc, #292]	@ (80039f8 <HAL_GPIO_Init+0x2f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x202>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a48      	ldr	r2, [pc, #288]	@ (80039fc <HAL_GPIO_Init+0x2f4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x1fe>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a47      	ldr	r2, [pc, #284]	@ (8003a00 <HAL_GPIO_Init+0x2f8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x1fa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a46      	ldr	r2, [pc, #280]	@ (8003a04 <HAL_GPIO_Init+0x2fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x1f6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a45      	ldr	r2, [pc, #276]	@ (8003a08 <HAL_GPIO_Init+0x300>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x1f2>
 80038f6:	2304      	movs	r3, #4
 80038f8:	e008      	b.n	800390c <HAL_GPIO_Init+0x204>
 80038fa:	2307      	movs	r3, #7
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x204>
 80038fe:	2303      	movs	r3, #3
 8003900:	e004      	b.n	800390c <HAL_GPIO_Init+0x204>
 8003902:	2302      	movs	r3, #2
 8003904:	e002      	b.n	800390c <HAL_GPIO_Init+0x204>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_GPIO_Init+0x204>
 800390a:	2300      	movs	r3, #0
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f002 0203 	and.w	r2, r2, #3
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	4093      	lsls	r3, r2
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800391c:	4935      	ldr	r1, [pc, #212]	@ (80039f4 <HAL_GPIO_Init+0x2ec>)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392a:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800394e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003978:	4a24      	ldr	r2, [pc, #144]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800397e:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a8:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039cc:	4a0f      	ldr	r2, [pc, #60]	@ (8003a0c <HAL_GPIO_Init+0x304>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	f67f aea2 	bls.w	8003724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	@ 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40013800 	.word	0x40013800
 80039f8:	40020000 	.word	0x40020000
 80039fc:	40020400 	.word	0x40020400
 8003a00:	40020800 	.word	0x40020800
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a20:	787b      	ldrb	r3, [r7, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a2c:	e003      	b.n	8003a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	041a      	lsls	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	041a      	lsls	r2, r3, #16
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43d9      	mvns	r1, r3
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	400b      	ands	r3, r1
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	619a      	str	r2, [r3, #24]
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e12b      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fa8a 	bl	8001fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	@ 0x24
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003adc:	f000 fd40 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a81      	ldr	r2, [pc, #516]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d807      	bhi.n	8003afc <HAL_I2C_Init+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a80      	ldr	r2, [pc, #512]	@ (8003cf0 <HAL_I2C_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e006      	b.n	8003b0a <HAL_I2C_Init+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf4 <HAL_I2C_Init+0x27c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bf94      	ite	ls
 8003b04:	2301      	movls	r3, #1
 8003b06:	2300      	movhi	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0e7      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a78      	ldr	r2, [pc, #480]	@ (8003cf8 <HAL_I2C_Init+0x280>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d802      	bhi.n	8003b4c <HAL_I2C_Init+0xd4>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	e009      	b.n	8003b60 <HAL_I2C_Init+0xe8>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	4a69      	ldr	r2, [pc, #420]	@ (8003cfc <HAL_I2C_Init+0x284>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	495c      	ldr	r1, [pc, #368]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d819      	bhi.n	8003bb4 <HAL_I2C_Init+0x13c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e59      	subs	r1, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b94:	400b      	ands	r3, r1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_I2C_Init+0x138>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e59      	subs	r1, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	e051      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e04f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_I2C_Init+0x168>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_Init+0x18e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Init+0x196>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_I2C_Init+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e58      	subs	r0, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	6809      	ldr	r1, [r1, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6911      	ldr	r1, [r2, #16]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000186a0 	.word	0x000186a0
 8003cf0:	001e847f 	.word	0x001e847f
 8003cf4:	003d08ff 	.word	0x003d08ff
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e267      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d075      	beq.n	8003e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1e:	4b88      	ldr	r3, [pc, #544]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d00c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b85      	ldr	r3, [pc, #532]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d112      	bne.n	8003d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4b82      	ldr	r3, [pc, #520]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	4b7e      	ldr	r3, [pc, #504]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d05b      	beq.n	8003e08 <HAL_RCC_OscConfig+0x108>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d157      	bne.n	8003e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e242      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d64:	d106      	bne.n	8003d74 <HAL_RCC_OscConfig+0x74>
 8003d66:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e01d      	b.n	8003db0 <HAL_RCC_OscConfig+0xb0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x98>
 8003d7e:	4b70      	ldr	r3, [pc, #448]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6f      	ldr	r2, [pc, #444]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0xb0>
 8003d98:	4b69      	ldr	r3, [pc, #420]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a68      	ldr	r2, [pc, #416]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b66      	ldr	r3, [pc, #408]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a65      	ldr	r2, [pc, #404]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fe fb74 	bl	80024a4 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fb70 	bl	80024a4 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	@ 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e207      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0xc0>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe fb60 	bl	80024a4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fe fb5c 	bl	80024a4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	@ 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1f3      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	4b51      	ldr	r3, [pc, #324]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0xe8>
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d063      	beq.n	8003ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e16:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d11c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b44      	ldr	r3, [pc, #272]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	4b41      	ldr	r3, [pc, #260]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_RCC_OscConfig+0x152>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e1c7      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4937      	ldr	r1, [pc, #220]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	e03a      	b.n	8003ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e70:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_RCC_OscConfig+0x244>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fb15 	bl	80024a4 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7e:	f7fe fb11 	bl	80024a4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e1a8      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b28      	ldr	r3, [pc, #160]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4925      	ldr	r1, [pc, #148]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
 8003eb0:	e015      	b.n	8003ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCC_OscConfig+0x244>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe faf4 	bl	80024a4 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe faf0 	bl	80024a4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e187      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d036      	beq.n	8003f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_RCC_OscConfig+0x248>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe fad4 	bl	80024a4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fe fad0 	bl	80024a4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e167      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f12:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_OscConfig+0x240>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x200>
 8003f1e:	e01b      	b.n	8003f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_OscConfig+0x248>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7fe fabd 	bl	80024a4 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00e      	b.n	8003f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fab9 	bl	80024a4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d907      	bls.n	8003f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e150      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	42470000 	.word	0x42470000
 8003f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b88      	ldr	r3, [pc, #544]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ea      	bne.n	8003f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8097 	beq.w	8004094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b81      	ldr	r3, [pc, #516]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f86:	4b7a      	ldr	r3, [pc, #488]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b77      	ldr	r3, [pc, #476]	@ (8004174 <HAL_RCC_OscConfig+0x474>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b74      	ldr	r3, [pc, #464]	@ (8004174 <HAL_RCC_OscConfig+0x474>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a73      	ldr	r2, [pc, #460]	@ (8004174 <HAL_RCC_OscConfig+0x474>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fa79 	bl	80024a4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fe fa75 	bl	80024a4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e10c      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004174 <HAL_RCC_OscConfig+0x474>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ea>
 8003fdc:	4b64      	ldr	r3, [pc, #400]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4a63      	ldr	r2, [pc, #396]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe8:	e01c      	b.n	8004024 <HAL_RCC_OscConfig+0x324>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x30c>
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a5b      	ldr	r2, [pc, #364]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0x324>
 800400c:	4b58      	ldr	r3, [pc, #352]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a57      	ldr	r2, [pc, #348]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	4b55      	ldr	r3, [pc, #340]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a54      	ldr	r2, [pc, #336]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800401e:	f023 0304 	bic.w	r3, r3, #4
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fe fa3a 	bl	80024a4 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe fa36 	bl	80024a4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0cb      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ee      	beq.n	8004034 <HAL_RCC_OscConfig+0x334>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fe fa24 	bl	80024a4 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fe fa20 	bl	80024a4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0b5      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ee      	bne.n	8004060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	4a38      	ldr	r2, [pc, #224]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a1 	beq.w	80041e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800409e:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d05c      	beq.n	8004164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d141      	bne.n	8004136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b31      	ldr	r3, [pc, #196]	@ (8004178 <HAL_RCC_OscConfig+0x478>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f9f4 	bl	80024a4 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe f9f0 	bl	80024a4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e087      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	019b      	lsls	r3, r3, #6
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	491b      	ldr	r1, [pc, #108]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <HAL_RCC_OscConfig+0x478>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe f9c9 	bl	80024a4 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004116:	f7fe f9c5 	bl	80024a4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e05c      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x416>
 8004134:	e054      	b.n	80041e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_RCC_OscConfig+0x478>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe f9b2 	bl	80024a4 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe f9ae 	bl	80024a4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e045      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <HAL_RCC_OscConfig+0x470>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x444>
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e038      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
 8004170:	40023800 	.word	0x40023800
 8004174:	40007000 	.word	0x40007000
 8004178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800417c:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x4ec>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d028      	beq.n	80041dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d121      	bne.n	80041dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d11a      	bne.n	80041dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d111      	bne.n	80041dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	3b01      	subs	r3, #1
 80041c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800

080041f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0cc      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004204:	4b68      	ldr	r3, [pc, #416]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d90c      	bls.n	800422c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b65      	ldr	r3, [pc, #404]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b63      	ldr	r3, [pc, #396]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0b8      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004244:	4b59      	ldr	r3, [pc, #356]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a58      	ldr	r2, [pc, #352]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800424e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800425c:	4b53      	ldr	r3, [pc, #332]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	494d      	ldr	r1, [pc, #308]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d044      	beq.n	8004310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4b47      	ldr	r3, [pc, #284]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d119      	bne.n	80042ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07f      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ae:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06f      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042be:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e067      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ce:	4b37      	ldr	r3, [pc, #220]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f023 0203 	bic.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4934      	ldr	r1, [pc, #208]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e0:	f7fe f8e0 	bl	80024a4 <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e8:	f7fe f8dc 	bl	80024a4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e04f      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 020c 	and.w	r2, r3, #12
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	429a      	cmp	r2, r3
 800430e:	d1eb      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d20c      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b22      	ldr	r3, [pc, #136]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b20      	ldr	r3, [pc, #128]	@ (80043a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e032      	b.n	800439e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004344:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4916      	ldr	r1, [pc, #88]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	490e      	ldr	r1, [pc, #56]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004376:	f000 f821 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800437a:	4602      	mov	r2, r0
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	490a      	ldr	r1, [pc, #40]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	5ccb      	ldrb	r3, [r1, r3]
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	4a09      	ldr	r2, [pc, #36]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004392:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe f840 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023c00 	.word	0x40023c00
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08008a94 	.word	0x08008a94
 80043b4:	20000008 	.word	0x20000008
 80043b8:	2000000c 	.word	0x2000000c

080043bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b090      	sub	sp, #64	@ 0x40
 80043c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c8:	2300      	movs	r3, #0
 80043ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043cc:	2300      	movs	r3, #0
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d4:	4b59      	ldr	r3, [pc, #356]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d00d      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x40>
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	f200 80a1 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x16c>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ee:	e09b      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b53      	ldr	r3, [pc, #332]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x184>)
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80043f4:	e09b      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f6:	4b53      	ldr	r3, [pc, #332]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x188>)
 80043f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043fa:	e098      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043fc:	4b4f      	ldr	r3, [pc, #316]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004406:	4b4d      	ldr	r3, [pc, #308]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d028      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	2200      	movs	r2, #0
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	627a      	str	r2, [r7, #36]	@ 0x24
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004424:	2100      	movs	r1, #0
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x188>)
 8004428:	fb03 f201 	mul.w	r2, r3, r1
 800442c:	2300      	movs	r3, #0
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	4413      	add	r3, r2
 8004434:	4a43      	ldr	r2, [pc, #268]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x188>)
 8004436:	fba0 1202 	umull	r1, r2, r0, r2
 800443a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800443c:	460a      	mov	r2, r1
 800443e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004442:	4413      	add	r3, r2
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	2200      	movs	r2, #0
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	61fa      	str	r2, [r7, #28]
 800444e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004456:	f7fc fbaf 	bl	8000bb8 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4613      	mov	r3, r2
 8004460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004462:	e053      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	2200      	movs	r2, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	617a      	str	r2, [r7, #20]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004476:	f04f 0b00 	mov.w	fp, #0
 800447a:	4652      	mov	r2, sl
 800447c:	465b      	mov	r3, fp
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448c:	0150      	lsls	r0, r2, #5
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	ebb2 080a 	subs.w	r8, r2, sl
 8004496:	eb63 090b 	sbc.w	r9, r3, fp
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044ae:	ebb2 0408 	subs.w	r4, r2, r8
 80044b2:	eb63 0509 	sbc.w	r5, r3, r9
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	00eb      	lsls	r3, r5, #3
 80044c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c4:	00e2      	lsls	r2, r4, #3
 80044c6:	4614      	mov	r4, r2
 80044c8:	461d      	mov	r5, r3
 80044ca:	eb14 030a 	adds.w	r3, r4, sl
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	eb45 030b 	adc.w	r3, r5, fp
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e2:	4629      	mov	r1, r5
 80044e4:	028b      	lsls	r3, r1, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ec:	4621      	mov	r1, r4
 80044ee:	028a      	lsls	r2, r1, #10
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	2200      	movs	r2, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	60fa      	str	r2, [r7, #12]
 80044fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004500:	f7fc fb5a 	bl	8000bb8 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCC_GetSysClockFreq+0x180>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800451c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004526:	e002      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x184>)
 800452a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800452c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004530:	4618      	mov	r0, r3
 8004532:	3740      	adds	r7, #64	@ 0x40
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	00f42400 	.word	0x00f42400
 8004544:	017d7840 	.word	0x017d7840

08004548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCC_GetHCLKFreq+0x14>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000008 	.word	0x20000008

08004560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004564:	f7ff fff0 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0a9b      	lsrs	r3, r3, #10
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	08008aa4 	.word	0x08008aa4

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800458c:	f7ff ffdc 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0b5b      	lsrs	r3, r3, #13
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08008aa4 	.word	0x08008aa4

080045b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e041      	b.n	8004646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fd36 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 f9a8 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e044      	b.n	80046f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1e      	ldr	r2, [pc, #120]	@ (8004700 <HAL_TIM_Base_Start_IT+0xb0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004692:	d013      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1a      	ldr	r2, [pc, #104]	@ (8004704 <HAL_TIM_Base_Start_IT+0xb4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a19      	ldr	r2, [pc, #100]	@ (8004708 <HAL_TIM_Base_Start_IT+0xb8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a17      	ldr	r2, [pc, #92]	@ (800470c <HAL_TIM_Base_Start_IT+0xbc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a16      	ldr	r2, [pc, #88]	@ (8004710 <HAL_TIM_Base_Start_IT+0xc0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d111      	bne.n	80046e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d010      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	e007      	b.n	80046f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40014000 	.word	0x40014000

08004714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d020      	beq.n	8004778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0202 	mvn.w	r2, #2
 8004748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8d2 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8c4 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8d5 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0204 	mvn.w	r2, #4
 8004794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8ac 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f89e 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8af 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0208 	mvn.w	r2, #8
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2204      	movs	r2, #4
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f886 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f878 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f889 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0210 	mvn.w	r2, #16
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2208      	movs	r2, #8
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f860 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f852 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f863 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0201 	mvn.w	r2, #1
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc fee4 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8e6 	bl	8004a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f834 	bl	8004930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0220 	mvn.w	r2, #32
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8b8 	bl	8004a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3a      	ldr	r2, [pc, #232]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a37      	ldr	r2, [pc, #220]	@ (8004a44 <TIM_Base_SetConfig+0x100>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <TIM_Base_SetConfig+0x104>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x38>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a35      	ldr	r2, [pc, #212]	@ (8004a4c <TIM_Base_SetConfig+0x108>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2b      	ldr	r2, [pc, #172]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d017      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a28      	ldr	r2, [pc, #160]	@ (8004a44 <TIM_Base_SetConfig+0x100>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a27      	ldr	r2, [pc, #156]	@ (8004a48 <TIM_Base_SetConfig+0x104>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00f      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <TIM_Base_SetConfig+0x108>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00b      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a25      	ldr	r2, [pc, #148]	@ (8004a50 <TIM_Base_SetConfig+0x10c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a24      	ldr	r2, [pc, #144]	@ (8004a54 <TIM_Base_SetConfig+0x110>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <TIM_Base_SetConfig+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <TIM_Base_SetConfig+0xfc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]
  }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd faf4 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fdbd 	bl	8005648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	@ 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d175      	bne.n	8004c30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x2c>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e06e      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	@ 0x21
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd fc9f 	bl	80024a4 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b98:	e02e      	b.n	8004bf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb1f 	bl	80051e8 <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e03a      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e007      	b.n	8004bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2140      	movs	r1, #64	@ 0x40
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 faeb 	bl	80051e8 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e006      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d112      	bne.n	8004c7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Receive_IT+0x26>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e00b      	b.n	8004c7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb12 	bl	800529a <UART_Start_Receive_IT>
 8004c76:	4603      	mov	r3, r0
 8004c78:	e000      	b.n	8004c7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b0ba      	sub	sp, #232	@ 0xe8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fbf2 	bl	80054cc <UART_Receive_IT>
      return;
 8004ce8:	e25b      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80de 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x22c>
 8004cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80d1 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
 8004d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0208 	orr.w	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 81f2 	beq.w	8005198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb7d 	bl	80054cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_UART_IRQHandler+0x17a>
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04f      	beq.n	8004e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa85 	bl	800530e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b40      	cmp	r3, #64	@ 0x40
 8004e10:	d141      	bne.n	8004e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005064 <HAL_UART_IRQHandler+0x3e0>)
 8004e6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe f9bc 	bl	80031f0 <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00e      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f994 	bl	80051bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00a      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f990 	bl	80051bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e006      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f98c 	bl	80051bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eaa:	e175      	b.n	8005198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	bf00      	nop
    return;
 8004eae:	e173      	b.n	8005198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 814f 	bne.w	8005158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8148 	beq.w	8005158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8141 	beq.w	8005158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	f040 80b6 	bne.w	8005068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8145 	beq.w	800519c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f080 813e 	bcs.w	800519c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f32:	f000 8088 	beq.w	8005046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e1      	bne.n	8004f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e3      	bne.n	8004fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005016:	f023 0310 	bic.w	r3, r3, #16
 800501a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005028:	65ba      	str	r2, [r7, #88]	@ 0x58
 800502a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800502e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e3      	bne.n	8005004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe f865 	bl	8003110 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005054:	b29b      	uxth	r3, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8b7 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005062:	e09b      	b.n	800519c <HAL_UART_IRQHandler+0x518>
 8005064:	080053d5 	.word	0x080053d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005070:	b29b      	uxth	r3, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 808e 	beq.w	80051a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8089 	beq.w	80051a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800509e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e3      	bne.n	800508e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	623b      	str	r3, [r7, #32]
   return(result);
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e3      	bne.n	80050c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	60fb      	str	r3, [r7, #12]
   return(result);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0310 	bic.w	r3, r3, #16
 8005122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	617b      	str	r3, [r7, #20]
   return(result);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e3      	bne.n	800510c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800514a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f83d 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005156:	e023      	b.n	80051a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_UART_IRQHandler+0x4f4>
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f943 	bl	80053fc <UART_Transmit_IT>
    return;
 8005176:	e014      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <HAL_UART_IRQHandler+0x51e>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f983 	bl	800549c <UART_EndTransmit_IT>
    return;
 8005196:	e004      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005198:	bf00      	nop
 800519a:	e002      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80051a0:	bf00      	nop
  }
}
 80051a2:	37e8      	adds	r7, #232	@ 0xe8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f8:	e03b      	b.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d037      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fd f94f 	bl	80024a4 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <UART_WaitOnFlagUntilTimeout+0x30>
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e03a      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d023      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b80      	cmp	r3, #128	@ 0x80
 800522e:	d020      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b40      	cmp	r3, #64	@ 0x40
 8005234:	d01d      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d116      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f857 	bl	800530e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2208      	movs	r2, #8
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e00f      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	429a      	cmp	r2, r3
 800528e:	d0b4      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2222      	movs	r2, #34	@ 0x22
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0220 	orr.w	r2, r2, #32
 80052fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b095      	sub	sp, #84	@ 0x54
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800532c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005336:	643a      	str	r2, [r7, #64]	@ 0x40
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800533c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	61fb      	str	r3, [r7, #28]
   return(result);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800536a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	2b01      	cmp	r3, #1
 8005384:	d119      	bne.n	80053ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	60bb      	str	r3, [r7, #8]
   return(result);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	647b      	str	r3, [r7, #68]	@ 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a6:	61ba      	str	r2, [r7, #24]
 80053a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	613b      	str	r3, [r7, #16]
   return(result);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053c8:	bf00      	nop
 80053ca:	3754      	adds	r7, #84	@ 0x54
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fee4 	bl	80051bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b21      	cmp	r3, #33	@ 0x21
 800540e:	d13e      	bne.n	800548e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005418:	d114      	bne.n	8005444 <UART_Transmit_IT+0x48>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d110      	bne.n	8005444 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005436:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]
 8005442:	e008      	b.n	8005456 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6211      	str	r1, [r2, #32]
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4619      	mov	r1, r3
 8005464:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005478:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005488:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800548e:	2302      	movs	r3, #2
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fe73 	bl	80051a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	@ 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b22      	cmp	r3, #34	@ 0x22
 80054de:	f040 80ae 	bne.w	800563e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d117      	bne.n	800551c <UART_Receive_IT+0x50>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	b29a      	uxth	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
 800551a:	e026      	b.n	800556a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	d007      	beq.n	8005540 <UART_Receive_IT+0x74>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <UART_Receive_IT+0x82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e008      	b.n	8005560 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555a:	b2da      	uxtb	r2, r3
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29b      	uxth	r3, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4619      	mov	r1, r3
 8005578:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800557a:	2b00      	cmp	r3, #0
 800557c:	d15d      	bne.n	800563a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0220 	bic.w	r2, r2, #32
 800558c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800559c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d135      	bne.n	8005630 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f023 0310 	bic.w	r3, r3, #16
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ea:	623a      	str	r2, [r7, #32]
 80055ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	69f9      	ldr	r1, [r7, #28]
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d10a      	bne.n	8005622 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fdd1 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
 800562e:	e002      	b.n	8005636 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fc f82f 	bl	8001694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e002      	b.n	8005640 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3730      	adds	r7, #48	@ 0x30
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800564c:	b0c0      	sub	sp, #256	@ 0x100
 800564e:	af00      	add	r7, sp, #0
 8005650:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	68d9      	ldr	r1, [r3, #12]
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	ea40 0301 	orr.w	r3, r0, r1
 8005670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	431a      	orrs	r2, r3
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	431a      	orrs	r2, r3
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056a0:	f021 010c 	bic.w	r1, r1, #12
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056ae:	430b      	orrs	r3, r1
 80056b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c2:	6999      	ldr	r1, [r3, #24]
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	ea40 0301 	orr.w	r3, r0, r1
 80056ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005914 <UART_SetConfig+0x2cc>)
 80056d8:	429a      	cmp	r2, r3
 80056da:	d005      	beq.n	80056e8 <UART_SetConfig+0xa0>
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005918 <UART_SetConfig+0x2d0>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d104      	bne.n	80056f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7fe ff4e 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 80056ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056f0:	e003      	b.n	80056fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f2:	f7fe ff35 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 80056f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005704:	f040 810c 	bne.w	8005920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005712:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	1891      	adds	r1, r2, r2
 8005720:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005722:	415b      	adcs	r3, r3
 8005724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800572a:	4621      	mov	r1, r4
 800572c:	eb12 0801 	adds.w	r8, r2, r1
 8005730:	4629      	mov	r1, r5
 8005732:	eb43 0901 	adc.w	r9, r3, r1
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800574a:	4690      	mov	r8, r2
 800574c:	4699      	mov	r9, r3
 800574e:	4623      	mov	r3, r4
 8005750:	eb18 0303 	adds.w	r3, r8, r3
 8005754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005758:	462b      	mov	r3, r5
 800575a:	eb49 0303 	adc.w	r3, r9, r3
 800575e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800576e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005776:	460b      	mov	r3, r1
 8005778:	18db      	adds	r3, r3, r3
 800577a:	653b      	str	r3, [r7, #80]	@ 0x50
 800577c:	4613      	mov	r3, r2
 800577e:	eb42 0303 	adc.w	r3, r2, r3
 8005782:	657b      	str	r3, [r7, #84]	@ 0x54
 8005784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800578c:	f7fb fa14 	bl	8000bb8 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4b61      	ldr	r3, [pc, #388]	@ (800591c <UART_SetConfig+0x2d4>)
 8005796:	fba3 2302 	umull	r2, r3, r3, r2
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	011c      	lsls	r4, r3, #4
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057b8:	415b      	adcs	r3, r3
 80057ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057c0:	4641      	mov	r1, r8
 80057c2:	eb12 0a01 	adds.w	sl, r2, r1
 80057c6:	4649      	mov	r1, r9
 80057c8:	eb43 0b01 	adc.w	fp, r3, r1
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e0:	4692      	mov	sl, r2
 80057e2:	469b      	mov	fp, r3
 80057e4:	4643      	mov	r3, r8
 80057e6:	eb1a 0303 	adds.w	r3, sl, r3
 80057ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ee:	464b      	mov	r3, r9
 80057f0:	eb4b 0303 	adc.w	r3, fp, r3
 80057f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005804:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800580c:	460b      	mov	r3, r1
 800580e:	18db      	adds	r3, r3, r3
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
 8005812:	4613      	mov	r3, r2
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	647b      	str	r3, [r7, #68]	@ 0x44
 800581a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800581e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005822:	f7fb f9c9 	bl	8000bb8 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4611      	mov	r1, r2
 800582c:	4b3b      	ldr	r3, [pc, #236]	@ (800591c <UART_SetConfig+0x2d4>)
 800582e:	fba3 2301 	umull	r2, r3, r3, r1
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2264      	movs	r2, #100	@ 0x64
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	1acb      	subs	r3, r1, r3
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005842:	4b36      	ldr	r3, [pc, #216]	@ (800591c <UART_SetConfig+0x2d4>)
 8005844:	fba3 2302 	umull	r2, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005850:	441c      	add	r4, r3
 8005852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005856:	2200      	movs	r2, #0
 8005858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800585c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	1891      	adds	r1, r2, r2
 800586a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800586c:	415b      	adcs	r3, r3
 800586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005874:	4641      	mov	r1, r8
 8005876:	1851      	adds	r1, r2, r1
 8005878:	6339      	str	r1, [r7, #48]	@ 0x30
 800587a:	4649      	mov	r1, r9
 800587c:	414b      	adcs	r3, r1
 800587e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800588c:	4659      	mov	r1, fp
 800588e:	00cb      	lsls	r3, r1, #3
 8005890:	4651      	mov	r1, sl
 8005892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005896:	4651      	mov	r1, sl
 8005898:	00ca      	lsls	r2, r1, #3
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	4642      	mov	r2, r8
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058a8:	464b      	mov	r3, r9
 80058aa:	460a      	mov	r2, r1
 80058ac:	eb42 0303 	adc.w	r3, r2, r3
 80058b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058c8:	460b      	mov	r3, r1
 80058ca:	18db      	adds	r3, r3, r3
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ce:	4613      	mov	r3, r2
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058de:	f7fb f96b 	bl	8000bb8 <__aeabi_uldivmod>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <UART_SetConfig+0x2d4>)
 80058e8:	fba3 1302 	umull	r1, r3, r3, r2
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	2164      	movs	r1, #100	@ 0x64
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	3332      	adds	r3, #50	@ 0x32
 80058fa:	4a08      	ldr	r2, [pc, #32]	@ (800591c <UART_SetConfig+0x2d4>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	f003 0207 	and.w	r2, r3, #7
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4422      	add	r2, r4
 800590e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005910:	e106      	b.n	8005b20 <UART_SetConfig+0x4d8>
 8005912:	bf00      	nop
 8005914:	40011000 	.word	0x40011000
 8005918:	40011400 	.word	0x40011400
 800591c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005924:	2200      	movs	r2, #0
 8005926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800592a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800592e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005932:	4642      	mov	r2, r8
 8005934:	464b      	mov	r3, r9
 8005936:	1891      	adds	r1, r2, r2
 8005938:	6239      	str	r1, [r7, #32]
 800593a:	415b      	adcs	r3, r3
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
 800593e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005942:	4641      	mov	r1, r8
 8005944:	1854      	adds	r4, r2, r1
 8005946:	4649      	mov	r1, r9
 8005948:	eb43 0501 	adc.w	r5, r3, r1
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	00eb      	lsls	r3, r5, #3
 8005956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595a:	00e2      	lsls	r2, r4, #3
 800595c:	4614      	mov	r4, r2
 800595e:	461d      	mov	r5, r3
 8005960:	4643      	mov	r3, r8
 8005962:	18e3      	adds	r3, r4, r3
 8005964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005968:	464b      	mov	r3, r9
 800596a:	eb45 0303 	adc.w	r3, r5, r3
 800596e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800597e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800598e:	4629      	mov	r1, r5
 8005990:	008b      	lsls	r3, r1, #2
 8005992:	4621      	mov	r1, r4
 8005994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005998:	4621      	mov	r1, r4
 800599a:	008a      	lsls	r2, r1, #2
 800599c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059a0:	f7fb f90a 	bl	8000bb8 <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4b60      	ldr	r3, [pc, #384]	@ (8005b2c <UART_SetConfig+0x4e4>)
 80059aa:	fba3 2302 	umull	r2, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	011c      	lsls	r4, r3, #4
 80059b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	1891      	adds	r1, r2, r2
 80059ca:	61b9      	str	r1, [r7, #24]
 80059cc:	415b      	adcs	r3, r3
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	4641      	mov	r1, r8
 80059d6:	1851      	adds	r1, r2, r1
 80059d8:	6139      	str	r1, [r7, #16]
 80059da:	4649      	mov	r1, r9
 80059dc:	414b      	adcs	r3, r1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059ec:	4659      	mov	r1, fp
 80059ee:	00cb      	lsls	r3, r1, #3
 80059f0:	4651      	mov	r1, sl
 80059f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059f6:	4651      	mov	r1, sl
 80059f8:	00ca      	lsls	r2, r1, #3
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	4642      	mov	r2, r8
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a08:	464b      	mov	r3, r9
 8005a0a:	460a      	mov	r2, r1
 8005a0c:	eb42 0303 	adc.w	r3, r2, r3
 8005a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	008b      	lsls	r3, r1, #2
 8005a30:	4641      	mov	r1, r8
 8005a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a36:	4641      	mov	r1, r8
 8005a38:	008a      	lsls	r2, r1, #2
 8005a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a3e:	f7fb f8bb 	bl	8000bb8 <__aeabi_uldivmod>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	4b38      	ldr	r3, [pc, #224]	@ (8005b2c <UART_SetConfig+0x4e4>)
 8005a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2264      	movs	r2, #100	@ 0x64
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	1acb      	subs	r3, r1, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	@ 0x32
 8005a5c:	4a33      	ldr	r2, [pc, #204]	@ (8005b2c <UART_SetConfig+0x4e4>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a68:	441c      	add	r4, r3
 8005a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6e:	2200      	movs	r2, #0
 8005a70:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a72:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	1891      	adds	r1, r2, r2
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	415b      	adcs	r3, r3
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a88:	4641      	mov	r1, r8
 8005a8a:	1851      	adds	r1, r2, r1
 8005a8c:	6039      	str	r1, [r7, #0]
 8005a8e:	4649      	mov	r1, r9
 8005a90:	414b      	adcs	r3, r1
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	00cb      	lsls	r3, r1, #3
 8005aa4:	4651      	mov	r1, sl
 8005aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aaa:	4651      	mov	r1, sl
 8005aac:	00ca      	lsls	r2, r1, #3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aba:	464b      	mov	r3, r9
 8005abc:	460a      	mov	r2, r1
 8005abe:	eb42 0303 	adc.w	r3, r2, r3
 8005ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ace:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005adc:	4649      	mov	r1, r9
 8005ade:	008b      	lsls	r3, r1, #2
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	008a      	lsls	r2, r1, #2
 8005aea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aee:	f7fb f863 	bl	8000bb8 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <UART_SetConfig+0x4e4>)
 8005af8:	fba3 1302 	umull	r1, r3, r3, r2
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	2164      	movs	r1, #100	@ 0x64
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	3332      	adds	r3, #50	@ 0x32
 8005b0a:	4a08      	ldr	r2, [pc, #32]	@ (8005b2c <UART_SetConfig+0x4e4>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4422      	add	r2, r4
 8005b1e:	609a      	str	r2, [r3, #8]
}
 8005b20:	bf00      	nop
 8005b22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b26:	46bd      	mov	sp, r7
 8005b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2c:	51eb851f 	.word	0x51eb851f

08005b30 <arm_fir_init_f32>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	9c04      	ldr	r4, [sp, #16]
 8005b34:	6082      	str	r2, [r0, #8]
 8005b36:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005b3a:	3c01      	subs	r4, #1
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	440c      	add	r4, r1
 8005b40:	8001      	strh	r1, [r0, #0]
 8005b42:	461e      	mov	r6, r3
 8005b44:	00a2      	lsls	r2, r4, #2
 8005b46:	4618      	mov	r0, r3
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f000 ffc4 	bl	8006ad6 <memset>
 8005b4e:	606e      	str	r6, [r5, #4]
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	bf00      	nop

08005b54 <arm_fir_f32>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	ed2d 8b10 	vpush	{d8-d15}
 8005b5c:	b089      	sub	sp, #36	@ 0x24
 8005b5e:	4605      	mov	r5, r0
 8005b60:	9003      	str	r0, [sp, #12]
 8005b62:	8800      	ldrh	r0, [r0, #0]
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	461e      	mov	r6, r3
 8005b68:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8005b6c:	9001      	str	r0, [sp, #4]
 8005b6e:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8005b72:	3b01      	subs	r3, #1
 8005b74:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8005b78:	08f3      	lsrs	r3, r6, #3
 8005b7a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8005b7e:	9400      	str	r4, [sp, #0]
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	f000 81ef 	beq.w	8005f64 <arm_fir_f32+0x410>
 8005b86:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8005b8a:	469e      	mov	lr, r3
 8005b8c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005b90:	1f1e      	subs	r6, r3, #4
 8005b92:	4625      	mov	r5, r4
 8005b94:	9605      	str	r6, [sp, #20]
 8005b96:	4604      	mov	r4, r0
 8005b98:	eb08 0003 	add.w	r0, r8, r3
 8005b9c:	f004 0a07 	and.w	sl, r4, #7
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	f10c 0420 	add.w	r4, ip, #32
 8005ba6:	f8cd c018 	str.w	ip, [sp, #24]
 8005baa:	4684      	mov	ip, r0
 8005bac:	4648      	mov	r0, r9
 8005bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005bb2:	9107      	str	r1, [sp, #28]
 8005bb4:	f105 0720 	add.w	r7, r5, #32
 8005bb8:	f101 0620 	add.w	r6, r1, #32
 8005bbc:	f102 0520 	add.w	r5, r2, #32
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005bc8:	f847 3c20 	str.w	r3, [r7, #-32]
 8005bcc:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8005bd0:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005bd4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005bd8:	f847 3c18 	str.w	r3, [r7, #-24]
 8005bdc:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8005be0:	f847 3c14 	str.w	r3, [r7, #-20]
 8005be4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005be8:	f847 3c10 	str.w	r3, [r7, #-16]
 8005bec:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8005bf0:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005bf4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005bf8:	f847 3c08 	str.w	r3, [r7, #-8]
 8005bfc:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8005fc4 <arm_fir_f32+0x470>
 8005c00:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005c04:	f847 3c04 	str.w	r3, [r7, #-4]
 8005c08:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8005c0c:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8005c10:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8005c14:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8005c18:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005c1c:	ed54 0a03 	vldr	s1, [r4, #-12]
 8005c20:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005c24:	1f21      	subs	r1, r4, #4
 8005c26:	eef0 8a63 	vmov.f32	s17, s7
 8005c2a:	eef0 9a63 	vmov.f32	s19, s7
 8005c2e:	eef0 aa63 	vmov.f32	s21, s7
 8005c32:	eef0 ba63 	vmov.f32	s23, s7
 8005c36:	eeb0 ca63 	vmov.f32	s24, s7
 8005c3a:	eef0 ca63 	vmov.f32	s25, s7
 8005c3e:	eeb0 da63 	vmov.f32	s26, s7
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f000 81e8 	beq.w	8006018 <arm_fir_f32+0x4c4>
 8005c48:	f108 0120 	add.w	r1, r8, #32
 8005c4c:	f104 031c 	add.w	r3, r4, #28
 8005c50:	4683      	mov	fp, r0
 8005c52:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 8005c56:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 8005c5a:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8005c5e:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 8005c62:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 8005c66:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005c6a:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005c6e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005c72:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005c76:	ee24 fa03 	vmul.f32	s30, s8, s6
 8005c7a:	ee64 ea22 	vmul.f32	s29, s8, s5
 8005c7e:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 8005c82:	ee24 ea02 	vmul.f32	s28, s8, s4
 8005c86:	ee64 da21 	vmul.f32	s27, s8, s3
 8005c8a:	ee24 ba01 	vmul.f32	s22, s8, s2
 8005c8e:	ee24 aa20 	vmul.f32	s20, s8, s1
 8005c92:	ee24 9a00 	vmul.f32	s18, s8, s0
 8005c96:	ee24 4a08 	vmul.f32	s8, s8, s16
 8005c9a:	ee3f da0d 	vadd.f32	s26, s30, s26
 8005c9e:	ee74 3a23 	vadd.f32	s7, s8, s7
 8005ca2:	ee24 faa2 	vmul.f32	s30, s9, s5
 8005ca6:	ee7e caac 	vadd.f32	s25, s29, s25
 8005caa:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8005cae:	ee64 ea82 	vmul.f32	s29, s9, s4
 8005cb2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005cb6:	ee7d baab 	vadd.f32	s23, s27, s23
 8005cba:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8005cbe:	ee64 da81 	vmul.f32	s27, s9, s2
 8005cc2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005cc6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005cca:	ee24 baa0 	vmul.f32	s22, s9, s1
 8005cce:	ee24 aa80 	vmul.f32	s20, s9, s0
 8005cd2:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005cd6:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005cda:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005cde:	ee25 4a02 	vmul.f32	s8, s10, s4
 8005ce2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ce6:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8005cea:	ee7e caac 	vadd.f32	s25, s29, s25
 8005cee:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005cf2:	ee65 ea21 	vmul.f32	s29, s10, s3
 8005cf6:	ee25 ea01 	vmul.f32	s28, s10, s2
 8005cfa:	ee7d baab 	vadd.f32	s23, s27, s23
 8005cfe:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005d02:	ee65 da20 	vmul.f32	s27, s10, s1
 8005d06:	ee25 ba00 	vmul.f32	s22, s10, s0
 8005d0a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005d0e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005d12:	ee28 aa05 	vmul.f32	s20, s16, s10
 8005d16:	ee23 9a05 	vmul.f32	s18, s6, s10
 8005d1a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8005d1e:	ee25 5a22 	vmul.f32	s10, s10, s5
 8005d22:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8005d26:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005d2a:	ed53 1a04 	vldr	s3, [r3, #-16]
 8005d2e:	ee7e caac 	vadd.f32	s25, s29, s25
 8005d32:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005d36:	ee65 ea81 	vmul.f32	s29, s11, s2
 8005d3a:	ee25 eaa0 	vmul.f32	s28, s11, s1
 8005d3e:	ee7d baab 	vadd.f32	s23, s27, s23
 8005d42:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005d46:	ee65 da80 	vmul.f32	s27, s11, s0
 8005d4a:	ee28 ba25 	vmul.f32	s22, s16, s11
 8005d4e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005d52:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005d56:	ee23 aa25 	vmul.f32	s20, s6, s11
 8005d5a:	ee22 9aa5 	vmul.f32	s18, s5, s11
 8005d5e:	ee3d da04 	vadd.f32	s26, s26, s8
 8005d62:	ee65 5a82 	vmul.f32	s11, s11, s4
 8005d66:	ee66 4a01 	vmul.f32	s9, s12, s2
 8005d6a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005d6e:	ed13 1a03 	vldr	s2, [r3, #-12]
 8005d72:	ee75 5a85 	vadd.f32	s11, s11, s10
 8005d76:	ee3d da23 	vadd.f32	s26, s26, s7
 8005d7a:	ee22 5a06 	vmul.f32	s10, s4, s12
 8005d7e:	ee7e caac 	vadd.f32	s25, s29, s25
 8005d82:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005d86:	ee66 ea20 	vmul.f32	s29, s12, s1
 8005d8a:	ee26 ea00 	vmul.f32	s28, s12, s0
 8005d8e:	ee7d baab 	vadd.f32	s23, s27, s23
 8005d92:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005d96:	ee68 da06 	vmul.f32	s27, s16, s12
 8005d9a:	ee23 ba06 	vmul.f32	s22, s6, s12
 8005d9e:	ee22 aa86 	vmul.f32	s20, s5, s12
 8005da2:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005da6:	ee26 6a21 	vmul.f32	s12, s12, s3
 8005daa:	ee26 9aa0 	vmul.f32	s18, s13, s1
 8005dae:	ee36 6a25 	vadd.f32	s12, s12, s11
 8005db2:	ed53 0a02 	vldr	s1, [r3, #-8]
 8005db6:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8005dba:	ee3d da24 	vadd.f32	s26, s26, s9
 8005dbe:	ee7e caac 	vadd.f32	s25, s29, s25
 8005dc2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005dc6:	ee66 ea80 	vmul.f32	s29, s13, s0
 8005dca:	ee28 ea26 	vmul.f32	s28, s16, s13
 8005dce:	ee7d baab 	vadd.f32	s23, s27, s23
 8005dd2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005dd6:	ee63 da26 	vmul.f32	s27, s6, s13
 8005dda:	ee22 baa6 	vmul.f32	s22, s5, s13
 8005dde:	ee3a aa29 	vadd.f32	s20, s20, s19
 8005de2:	ee75 8a28 	vadd.f32	s17, s10, s17
 8005de6:	ee62 9a26 	vmul.f32	s19, s4, s13
 8005dea:	ee66 6a81 	vmul.f32	s13, s13, s2
 8005dee:	ee27 5a00 	vmul.f32	s10, s14, s0
 8005df2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005df6:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8005dfa:	ee7e caac 	vadd.f32	s25, s29, s25
 8005dfe:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005e02:	ee68 ea07 	vmul.f32	s29, s16, s14
 8005e06:	ee23 ea07 	vmul.f32	s28, s6, s14
 8005e0a:	ee7d baab 	vadd.f32	s23, s27, s23
 8005e0e:	ee22 ba07 	vmul.f32	s22, s4, s14
 8005e12:	ee62 da87 	vmul.f32	s27, s5, s14
 8005e16:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005e1a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e1e:	ee61 9a87 	vmul.f32	s19, s3, s14
 8005e22:	ee67 3a20 	vmul.f32	s7, s14, s1
 8005e26:	ed13 0a01 	vldr	s0, [r3, #-4]
 8005e2a:	ee3d da09 	vadd.f32	s26, s26, s18
 8005e2e:	ee21 6a07 	vmul.f32	s12, s2, s14
 8005e32:	ee3d da05 	vadd.f32	s26, s26, s10
 8005e36:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005e3a:	ee63 5a27 	vmul.f32	s11, s6, s15
 8005e3e:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8005e42:	ee62 4a27 	vmul.f32	s9, s4, s15
 8005e46:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8005e4a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005e4e:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8005e52:	ee61 9a27 	vmul.f32	s19, s2, s15
 8005e56:	ee36 7a28 	vadd.f32	s14, s12, s17
 8005e5a:	ee7e caac 	vadd.f32	s25, s29, s25
 8005e5e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8005e62:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005e66:	ee7d baab 	vadd.f32	s23, s27, s23
 8005e6a:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8005e6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005e72:	f1bb 0b01 	subs.w	fp, fp, #1
 8005e76:	f101 0120 	add.w	r1, r1, #32
 8005e7a:	ee38 da0d 	vadd.f32	s26, s16, s26
 8005e7e:	ee75 caac 	vadd.f32	s25, s11, s25
 8005e82:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8005e86:	ee74 baab 	vadd.f32	s23, s9, s23
 8005e8a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8005e8e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8005e92:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005e96:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8005e9a:	f103 0320 	add.w	r3, r3, #32
 8005e9e:	f47f aed8 	bne.w	8005c52 <arm_fir_f32+0xfe>
 8005ea2:	eb09 0104 	add.w	r1, r9, r4
 8005ea6:	46e3      	mov	fp, ip
 8005ea8:	b3a2      	cbz	r2, 8005f14 <arm_fir_f32+0x3c0>
 8005eaa:	4613      	mov	r3, r2
 8005eac:	ecbb 6a01 	vldmia	fp!, {s12}
 8005eb0:	ecf1 7a01 	vldmia	r1!, {s15}
 8005eb4:	ee26 3a03 	vmul.f32	s6, s12, s6
 8005eb8:	ee26 4a22 	vmul.f32	s8, s12, s5
 8005ebc:	ee66 4a02 	vmul.f32	s9, s12, s4
 8005ec0:	ee26 5a21 	vmul.f32	s10, s12, s3
 8005ec4:	ee66 5a01 	vmul.f32	s11, s12, s2
 8005ec8:	ee66 6a20 	vmul.f32	s13, s12, s1
 8005ecc:	ee26 7a00 	vmul.f32	s14, s12, s0
 8005ed0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	ee3d da03 	vadd.f32	s26, s26, s6
 8005eda:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005ede:	eeb0 3a62 	vmov.f32	s6, s5
 8005ee2:	ee3c ca24 	vadd.f32	s24, s24, s9
 8005ee6:	eef0 2a42 	vmov.f32	s5, s4
 8005eea:	ee7b ba85 	vadd.f32	s23, s23, s10
 8005eee:	eeb0 2a61 	vmov.f32	s4, s3
 8005ef2:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8005ef6:	eef0 1a41 	vmov.f32	s3, s2
 8005efa:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8005efe:	eeb0 1a60 	vmov.f32	s2, s1
 8005f02:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005f06:	eef0 0a40 	vmov.f32	s1, s0
 8005f0a:	ee73 3a86 	vadd.f32	s7, s7, s12
 8005f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f12:	d1cb      	bne.n	8005eac <arm_fir_f32+0x358>
 8005f14:	f1be 0e01 	subs.w	lr, lr, #1
 8005f18:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8005f1c:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8005f20:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 8005f24:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8005f28:	ed45 aa04 	vstr	s21, [r5, #-16]
 8005f2c:	ed45 9a03 	vstr	s19, [r5, #-12]
 8005f30:	ed45 8a02 	vstr	s17, [r5, #-8]
 8005f34:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005f38:	f107 0720 	add.w	r7, r7, #32
 8005f3c:	f106 0620 	add.w	r6, r6, #32
 8005f40:	f104 0420 	add.w	r4, r4, #32
 8005f44:	f105 0520 	add.w	r5, r5, #32
 8005f48:	f47f ae3c 	bne.w	8005bc4 <arm_fir_f32+0x70>
 8005f4c:	9b02      	ldr	r3, [sp, #8]
 8005f4e:	9800      	ldr	r0, [sp, #0]
 8005f50:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005f54:	9907      	ldr	r1, [sp, #28]
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	4652      	mov	r2, sl
 8005f5a:	4418      	add	r0, r3
 8005f5c:	9000      	str	r0, [sp, #0]
 8005f5e:	4419      	add	r1, r3
 8005f60:	449c      	add	ip, r3
 8005f62:	441a      	add	r2, r3
 8005f64:	9b04      	ldr	r3, [sp, #16]
 8005f66:	f013 0e07 	ands.w	lr, r3, #7
 8005f6a:	d01f      	beq.n	8005fac <arm_fir_f32+0x458>
 8005f6c:	9f00      	ldr	r7, [sp, #0]
 8005f6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f72:	4676      	mov	r6, lr
 8005f74:	4665      	mov	r5, ip
 8005f76:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f7a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8005fc4 <arm_fir_f32+0x470>
 8005f7e:	f847 3b04 	str.w	r3, [r7], #4
 8005f82:	4644      	mov	r4, r8
 8005f84:	464b      	mov	r3, r9
 8005f86:	4628      	mov	r0, r5
 8005f88:	ecb0 7a01 	vldmia	r0!, {s14}
 8005f8c:	ecf4 7a01 	vldmia	r4!, {s15}
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	3b01      	subs	r3, #1
 8005f96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f9a:	d1f5      	bne.n	8005f88 <arm_fir_f32+0x434>
 8005f9c:	3e01      	subs	r6, #1
 8005f9e:	ece2 6a01 	vstmia	r2!, {s13}
 8005fa2:	f105 0504 	add.w	r5, r5, #4
 8005fa6:	d1e6      	bne.n	8005f76 <arm_fir_f32+0x422>
 8005fa8:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8005fac:	9b01      	ldr	r3, [sp, #4]
 8005fae:	1e59      	subs	r1, r3, #1
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	088e      	lsrs	r6, r1, #2
 8005fb4:	685c      	ldr	r4, [r3, #4]
 8005fb6:	d020      	beq.n	8005ffa <arm_fir_f32+0x4a6>
 8005fb8:	f104 0210 	add.w	r2, r4, #16
 8005fbc:	f10c 0310 	add.w	r3, ip, #16
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	e001      	b.n	8005fc8 <arm_fir_f32+0x474>
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005fcc:	f842 5c10 	str.w	r5, [r2, #-16]
 8005fd0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005fd4:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005fd8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005fdc:	f842 5c08 	str.w	r5, [r2, #-8]
 8005fe0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005fe4:	f842 5c04 	str.w	r5, [r2, #-4]
 8005fe8:	3801      	subs	r0, #1
 8005fea:	f103 0310 	add.w	r3, r3, #16
 8005fee:	f102 0210 	add.w	r2, r2, #16
 8005ff2:	d1e9      	bne.n	8005fc8 <arm_fir_f32+0x474>
 8005ff4:	0133      	lsls	r3, r6, #4
 8005ff6:	441c      	add	r4, r3
 8005ff8:	449c      	add	ip, r3
 8005ffa:	f011 0303 	ands.w	r3, r1, #3
 8005ffe:	d006      	beq.n	800600e <arm_fir_f32+0x4ba>
 8006000:	4622      	mov	r2, r4
 8006002:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006006:	f842 1b04 	str.w	r1, [r2], #4
 800600a:	3b01      	subs	r3, #1
 800600c:	d1f9      	bne.n	8006002 <arm_fir_f32+0x4ae>
 800600e:	b009      	add	sp, #36	@ 0x24
 8006010:	ecbd 8b10 	vpop	{d8-d15}
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	46c3      	mov	fp, r8
 800601a:	e745      	b.n	8005ea8 <arm_fir_f32+0x354>

0800601c <__cvt>:
 800601c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	ec57 6b10 	vmov	r6, r7, d0
 8006024:	2f00      	cmp	r7, #0
 8006026:	460c      	mov	r4, r1
 8006028:	4619      	mov	r1, r3
 800602a:	463b      	mov	r3, r7
 800602c:	bfbb      	ittet	lt
 800602e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006032:	461f      	movlt	r7, r3
 8006034:	2300      	movge	r3, #0
 8006036:	232d      	movlt	r3, #45	@ 0x2d
 8006038:	700b      	strb	r3, [r1, #0]
 800603a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800603c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006040:	4691      	mov	r9, r2
 8006042:	f023 0820 	bic.w	r8, r3, #32
 8006046:	bfbc      	itt	lt
 8006048:	4632      	movlt	r2, r6
 800604a:	4616      	movlt	r6, r2
 800604c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006050:	d005      	beq.n	800605e <__cvt+0x42>
 8006052:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006056:	d100      	bne.n	800605a <__cvt+0x3e>
 8006058:	3401      	adds	r4, #1
 800605a:	2102      	movs	r1, #2
 800605c:	e000      	b.n	8006060 <__cvt+0x44>
 800605e:	2103      	movs	r1, #3
 8006060:	ab03      	add	r3, sp, #12
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	ab02      	add	r3, sp, #8
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	ec47 6b10 	vmov	d0, r6, r7
 800606c:	4653      	mov	r3, sl
 800606e:	4622      	mov	r2, r4
 8006070:	f000 fe4a 	bl	8006d08 <_dtoa_r>
 8006074:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006078:	4605      	mov	r5, r0
 800607a:	d119      	bne.n	80060b0 <__cvt+0x94>
 800607c:	f019 0f01 	tst.w	r9, #1
 8006080:	d00e      	beq.n	80060a0 <__cvt+0x84>
 8006082:	eb00 0904 	add.w	r9, r0, r4
 8006086:	2200      	movs	r2, #0
 8006088:	2300      	movs	r3, #0
 800608a:	4630      	mov	r0, r6
 800608c:	4639      	mov	r1, r7
 800608e:	f7fa fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006092:	b108      	cbz	r0, 8006098 <__cvt+0x7c>
 8006094:	f8cd 900c 	str.w	r9, [sp, #12]
 8006098:	2230      	movs	r2, #48	@ 0x30
 800609a:	9b03      	ldr	r3, [sp, #12]
 800609c:	454b      	cmp	r3, r9
 800609e:	d31e      	bcc.n	80060de <__cvt+0xc2>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060a4:	1b5b      	subs	r3, r3, r5
 80060a6:	4628      	mov	r0, r5
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	b004      	add	sp, #16
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060b4:	eb00 0904 	add.w	r9, r0, r4
 80060b8:	d1e5      	bne.n	8006086 <__cvt+0x6a>
 80060ba:	7803      	ldrb	r3, [r0, #0]
 80060bc:	2b30      	cmp	r3, #48	@ 0x30
 80060be:	d10a      	bne.n	80060d6 <__cvt+0xba>
 80060c0:	2200      	movs	r2, #0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80060cc:	b918      	cbnz	r0, 80060d6 <__cvt+0xba>
 80060ce:	f1c4 0401 	rsb	r4, r4, #1
 80060d2:	f8ca 4000 	str.w	r4, [sl]
 80060d6:	f8da 3000 	ldr.w	r3, [sl]
 80060da:	4499      	add	r9, r3
 80060dc:	e7d3      	b.n	8006086 <__cvt+0x6a>
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	9103      	str	r1, [sp, #12]
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e7d9      	b.n	800609a <__cvt+0x7e>

080060e6 <__exponent>:
 80060e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060e8:	2900      	cmp	r1, #0
 80060ea:	bfba      	itte	lt
 80060ec:	4249      	neglt	r1, r1
 80060ee:	232d      	movlt	r3, #45	@ 0x2d
 80060f0:	232b      	movge	r3, #43	@ 0x2b
 80060f2:	2909      	cmp	r1, #9
 80060f4:	7002      	strb	r2, [r0, #0]
 80060f6:	7043      	strb	r3, [r0, #1]
 80060f8:	dd29      	ble.n	800614e <__exponent+0x68>
 80060fa:	f10d 0307 	add.w	r3, sp, #7
 80060fe:	461d      	mov	r5, r3
 8006100:	270a      	movs	r7, #10
 8006102:	461a      	mov	r2, r3
 8006104:	fbb1 f6f7 	udiv	r6, r1, r7
 8006108:	fb07 1416 	mls	r4, r7, r6, r1
 800610c:	3430      	adds	r4, #48	@ 0x30
 800610e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006112:	460c      	mov	r4, r1
 8006114:	2c63      	cmp	r4, #99	@ 0x63
 8006116:	f103 33ff 	add.w	r3, r3, #4294967295
 800611a:	4631      	mov	r1, r6
 800611c:	dcf1      	bgt.n	8006102 <__exponent+0x1c>
 800611e:	3130      	adds	r1, #48	@ 0x30
 8006120:	1e94      	subs	r4, r2, #2
 8006122:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006126:	1c41      	adds	r1, r0, #1
 8006128:	4623      	mov	r3, r4
 800612a:	42ab      	cmp	r3, r5
 800612c:	d30a      	bcc.n	8006144 <__exponent+0x5e>
 800612e:	f10d 0309 	add.w	r3, sp, #9
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	42ac      	cmp	r4, r5
 8006136:	bf88      	it	hi
 8006138:	2300      	movhi	r3, #0
 800613a:	3302      	adds	r3, #2
 800613c:	4403      	add	r3, r0
 800613e:	1a18      	subs	r0, r3, r0
 8006140:	b003      	add	sp, #12
 8006142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006144:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006148:	f801 6f01 	strb.w	r6, [r1, #1]!
 800614c:	e7ed      	b.n	800612a <__exponent+0x44>
 800614e:	2330      	movs	r3, #48	@ 0x30
 8006150:	3130      	adds	r1, #48	@ 0x30
 8006152:	7083      	strb	r3, [r0, #2]
 8006154:	70c1      	strb	r1, [r0, #3]
 8006156:	1d03      	adds	r3, r0, #4
 8006158:	e7f1      	b.n	800613e <__exponent+0x58>
	...

0800615c <_printf_float>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	b08d      	sub	sp, #52	@ 0x34
 8006162:	460c      	mov	r4, r1
 8006164:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006168:	4616      	mov	r6, r2
 800616a:	461f      	mov	r7, r3
 800616c:	4605      	mov	r5, r0
 800616e:	f000 fcbb 	bl	8006ae8 <_localeconv_r>
 8006172:	6803      	ldr	r3, [r0, #0]
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	4618      	mov	r0, r3
 8006178:	f7fa f882 	bl	8000280 <strlen>
 800617c:	2300      	movs	r3, #0
 800617e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006180:	f8d8 3000 	ldr.w	r3, [r8]
 8006184:	9005      	str	r0, [sp, #20]
 8006186:	3307      	adds	r3, #7
 8006188:	f023 0307 	bic.w	r3, r3, #7
 800618c:	f103 0208 	add.w	r2, r3, #8
 8006190:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006194:	f8d4 b000 	ldr.w	fp, [r4]
 8006198:	f8c8 2000 	str.w	r2, [r8]
 800619c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061a4:	9307      	str	r3, [sp, #28]
 80061a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80061aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006424 <_printf_float+0x2c8>)
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	f7fa fcc0 	bl	8000b3c <__aeabi_dcmpun>
 80061bc:	bb70      	cbnz	r0, 800621c <_printf_float+0xc0>
 80061be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c2:	4b98      	ldr	r3, [pc, #608]	@ (8006424 <_printf_float+0x2c8>)
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	f7fa fc9a 	bl	8000b00 <__aeabi_dcmple>
 80061cc:	bb30      	cbnz	r0, 800621c <_printf_float+0xc0>
 80061ce:	2200      	movs	r2, #0
 80061d0:	2300      	movs	r3, #0
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa fc89 	bl	8000aec <__aeabi_dcmplt>
 80061da:	b110      	cbz	r0, 80061e2 <_printf_float+0x86>
 80061dc:	232d      	movs	r3, #45	@ 0x2d
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e2:	4a91      	ldr	r2, [pc, #580]	@ (8006428 <_printf_float+0x2cc>)
 80061e4:	4b91      	ldr	r3, [pc, #580]	@ (800642c <_printf_float+0x2d0>)
 80061e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061ea:	bf94      	ite	ls
 80061ec:	4690      	movls	r8, r2
 80061ee:	4698      	movhi	r8, r3
 80061f0:	2303      	movs	r3, #3
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	f02b 0304 	bic.w	r3, fp, #4
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	f04f 0900 	mov.w	r9, #0
 80061fe:	9700      	str	r7, [sp, #0]
 8006200:	4633      	mov	r3, r6
 8006202:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006204:	4621      	mov	r1, r4
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f9d2 	bl	80065b0 <_printf_common>
 800620c:	3001      	adds	r0, #1
 800620e:	f040 808d 	bne.w	800632c <_printf_float+0x1d0>
 8006212:	f04f 30ff 	mov.w	r0, #4294967295
 8006216:	b00d      	add	sp, #52	@ 0x34
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	f7fa fc8a 	bl	8000b3c <__aeabi_dcmpun>
 8006228:	b140      	cbz	r0, 800623c <_printf_float+0xe0>
 800622a:	464b      	mov	r3, r9
 800622c:	2b00      	cmp	r3, #0
 800622e:	bfbc      	itt	lt
 8006230:	232d      	movlt	r3, #45	@ 0x2d
 8006232:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006236:	4a7e      	ldr	r2, [pc, #504]	@ (8006430 <_printf_float+0x2d4>)
 8006238:	4b7e      	ldr	r3, [pc, #504]	@ (8006434 <_printf_float+0x2d8>)
 800623a:	e7d4      	b.n	80061e6 <_printf_float+0x8a>
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006242:	9206      	str	r2, [sp, #24]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	d13b      	bne.n	80062c0 <_printf_float+0x164>
 8006248:	2306      	movs	r3, #6
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006250:	2300      	movs	r3, #0
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	ab0a      	add	r3, sp, #40	@ 0x28
 8006258:	e9cd a301 	strd	sl, r3, [sp, #4]
 800625c:	ab09      	add	r3, sp, #36	@ 0x24
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	ec49 8b10 	vmov	d0, r8, r9
 8006266:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800626a:	4628      	mov	r0, r5
 800626c:	f7ff fed6 	bl	800601c <__cvt>
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006274:	2b47      	cmp	r3, #71	@ 0x47
 8006276:	4680      	mov	r8, r0
 8006278:	d129      	bne.n	80062ce <_printf_float+0x172>
 800627a:	1cc8      	adds	r0, r1, #3
 800627c:	db02      	blt.n	8006284 <_printf_float+0x128>
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	4299      	cmp	r1, r3
 8006282:	dd41      	ble.n	8006308 <_printf_float+0x1ac>
 8006284:	f1aa 0a02 	sub.w	sl, sl, #2
 8006288:	fa5f fa8a 	uxtb.w	sl, sl
 800628c:	3901      	subs	r1, #1
 800628e:	4652      	mov	r2, sl
 8006290:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006294:	9109      	str	r1, [sp, #36]	@ 0x24
 8006296:	f7ff ff26 	bl	80060e6 <__exponent>
 800629a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800629c:	1813      	adds	r3, r2, r0
 800629e:	2a01      	cmp	r2, #1
 80062a0:	4681      	mov	r9, r0
 80062a2:	6123      	str	r3, [r4, #16]
 80062a4:	dc02      	bgt.n	80062ac <_printf_float+0x150>
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	07d2      	lsls	r2, r2, #31
 80062aa:	d501      	bpl.n	80062b0 <_printf_float+0x154>
 80062ac:	3301      	adds	r3, #1
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0a2      	beq.n	80061fe <_printf_float+0xa2>
 80062b8:	232d      	movs	r3, #45	@ 0x2d
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062be:	e79e      	b.n	80061fe <_printf_float+0xa2>
 80062c0:	9a06      	ldr	r2, [sp, #24]
 80062c2:	2a47      	cmp	r2, #71	@ 0x47
 80062c4:	d1c2      	bne.n	800624c <_printf_float+0xf0>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1c0      	bne.n	800624c <_printf_float+0xf0>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e7bd      	b.n	800624a <_printf_float+0xee>
 80062ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062d2:	d9db      	bls.n	800628c <_printf_float+0x130>
 80062d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062d8:	d118      	bne.n	800630c <_printf_float+0x1b0>
 80062da:	2900      	cmp	r1, #0
 80062dc:	6863      	ldr	r3, [r4, #4]
 80062de:	dd0b      	ble.n	80062f8 <_printf_float+0x19c>
 80062e0:	6121      	str	r1, [r4, #16]
 80062e2:	b913      	cbnz	r3, 80062ea <_printf_float+0x18e>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	07d0      	lsls	r0, r2, #31
 80062e8:	d502      	bpl.n	80062f0 <_printf_float+0x194>
 80062ea:	3301      	adds	r3, #1
 80062ec:	440b      	add	r3, r1
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	e7db      	b.n	80062b0 <_printf_float+0x154>
 80062f8:	b913      	cbnz	r3, 8006300 <_printf_float+0x1a4>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	07d2      	lsls	r2, r2, #31
 80062fe:	d501      	bpl.n	8006304 <_printf_float+0x1a8>
 8006300:	3302      	adds	r3, #2
 8006302:	e7f4      	b.n	80062ee <_printf_float+0x192>
 8006304:	2301      	movs	r3, #1
 8006306:	e7f2      	b.n	80062ee <_printf_float+0x192>
 8006308:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800630c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800630e:	4299      	cmp	r1, r3
 8006310:	db05      	blt.n	800631e <_printf_float+0x1c2>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6121      	str	r1, [r4, #16]
 8006316:	07d8      	lsls	r0, r3, #31
 8006318:	d5ea      	bpl.n	80062f0 <_printf_float+0x194>
 800631a:	1c4b      	adds	r3, r1, #1
 800631c:	e7e7      	b.n	80062ee <_printf_float+0x192>
 800631e:	2900      	cmp	r1, #0
 8006320:	bfd4      	ite	le
 8006322:	f1c1 0202 	rsble	r2, r1, #2
 8006326:	2201      	movgt	r2, #1
 8006328:	4413      	add	r3, r2
 800632a:	e7e0      	b.n	80062ee <_printf_float+0x192>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	055a      	lsls	r2, r3, #21
 8006330:	d407      	bmi.n	8006342 <_printf_float+0x1e6>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	4642      	mov	r2, r8
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	d12b      	bne.n	8006398 <_printf_float+0x23c>
 8006340:	e767      	b.n	8006212 <_printf_float+0xb6>
 8006342:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006346:	f240 80dd 	bls.w	8006504 <_printf_float+0x3a8>
 800634a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800634e:	2200      	movs	r2, #0
 8006350:	2300      	movs	r3, #0
 8006352:	f7fa fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006356:	2800      	cmp	r0, #0
 8006358:	d033      	beq.n	80063c2 <_printf_float+0x266>
 800635a:	4a37      	ldr	r2, [pc, #220]	@ (8006438 <_printf_float+0x2dc>)
 800635c:	2301      	movs	r3, #1
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	47b8      	blx	r7
 8006364:	3001      	adds	r0, #1
 8006366:	f43f af54 	beq.w	8006212 <_printf_float+0xb6>
 800636a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800636e:	4543      	cmp	r3, r8
 8006370:	db02      	blt.n	8006378 <_printf_float+0x21c>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	07d8      	lsls	r0, r3, #31
 8006376:	d50f      	bpl.n	8006398 <_printf_float+0x23c>
 8006378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	f43f af45 	beq.w	8006212 <_printf_float+0xb6>
 8006388:	f04f 0900 	mov.w	r9, #0
 800638c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006390:	f104 0a1a 	add.w	sl, r4, #26
 8006394:	45c8      	cmp	r8, r9
 8006396:	dc09      	bgt.n	80063ac <_printf_float+0x250>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	079b      	lsls	r3, r3, #30
 800639c:	f100 8103 	bmi.w	80065a6 <_printf_float+0x44a>
 80063a0:	68e0      	ldr	r0, [r4, #12]
 80063a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063a4:	4298      	cmp	r0, r3
 80063a6:	bfb8      	it	lt
 80063a8:	4618      	movlt	r0, r3
 80063aa:	e734      	b.n	8006216 <_printf_float+0xba>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4652      	mov	r2, sl
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f af2b 	beq.w	8006212 <_printf_float+0xb6>
 80063bc:	f109 0901 	add.w	r9, r9, #1
 80063c0:	e7e8      	b.n	8006394 <_printf_float+0x238>
 80063c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dc39      	bgt.n	800643c <_printf_float+0x2e0>
 80063c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <_printf_float+0x2dc>)
 80063ca:	2301      	movs	r3, #1
 80063cc:	4631      	mov	r1, r6
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	f43f af1d 	beq.w	8006212 <_printf_float+0xb6>
 80063d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063dc:	ea59 0303 	orrs.w	r3, r9, r3
 80063e0:	d102      	bne.n	80063e8 <_printf_float+0x28c>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d5d7      	bpl.n	8006398 <_printf_float+0x23c>
 80063e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f af0d 	beq.w	8006212 <_printf_float+0xb6>
 80063f8:	f04f 0a00 	mov.w	sl, #0
 80063fc:	f104 0b1a 	add.w	fp, r4, #26
 8006400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006402:	425b      	negs	r3, r3
 8006404:	4553      	cmp	r3, sl
 8006406:	dc01      	bgt.n	800640c <_printf_float+0x2b0>
 8006408:	464b      	mov	r3, r9
 800640a:	e793      	b.n	8006334 <_printf_float+0x1d8>
 800640c:	2301      	movs	r3, #1
 800640e:	465a      	mov	r2, fp
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f aefb 	beq.w	8006212 <_printf_float+0xb6>
 800641c:	f10a 0a01 	add.w	sl, sl, #1
 8006420:	e7ee      	b.n	8006400 <_printf_float+0x2a4>
 8006422:	bf00      	nop
 8006424:	7fefffff 	.word	0x7fefffff
 8006428:	08008ab4 	.word	0x08008ab4
 800642c:	08008ab8 	.word	0x08008ab8
 8006430:	08008abc 	.word	0x08008abc
 8006434:	08008ac0 	.word	0x08008ac0
 8006438:	08008ac4 	.word	0x08008ac4
 800643c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800643e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006442:	4553      	cmp	r3, sl
 8006444:	bfa8      	it	ge
 8006446:	4653      	movge	r3, sl
 8006448:	2b00      	cmp	r3, #0
 800644a:	4699      	mov	r9, r3
 800644c:	dc36      	bgt.n	80064bc <_printf_float+0x360>
 800644e:	f04f 0b00 	mov.w	fp, #0
 8006452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006456:	f104 021a 	add.w	r2, r4, #26
 800645a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800645c:	9306      	str	r3, [sp, #24]
 800645e:	eba3 0309 	sub.w	r3, r3, r9
 8006462:	455b      	cmp	r3, fp
 8006464:	dc31      	bgt.n	80064ca <_printf_float+0x36e>
 8006466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006468:	459a      	cmp	sl, r3
 800646a:	dc3a      	bgt.n	80064e2 <_printf_float+0x386>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07da      	lsls	r2, r3, #31
 8006470:	d437      	bmi.n	80064e2 <_printf_float+0x386>
 8006472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006474:	ebaa 0903 	sub.w	r9, sl, r3
 8006478:	9b06      	ldr	r3, [sp, #24]
 800647a:	ebaa 0303 	sub.w	r3, sl, r3
 800647e:	4599      	cmp	r9, r3
 8006480:	bfa8      	it	ge
 8006482:	4699      	movge	r9, r3
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	dc33      	bgt.n	80064f2 <_printf_float+0x396>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006492:	f104 0b1a 	add.w	fp, r4, #26
 8006496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006498:	ebaa 0303 	sub.w	r3, sl, r3
 800649c:	eba3 0309 	sub.w	r3, r3, r9
 80064a0:	4543      	cmp	r3, r8
 80064a2:	f77f af79 	ble.w	8006398 <_printf_float+0x23c>
 80064a6:	2301      	movs	r3, #1
 80064a8:	465a      	mov	r2, fp
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f aeae 	beq.w	8006212 <_printf_float+0xb6>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	e7ec      	b.n	8006496 <_printf_float+0x33a>
 80064bc:	4642      	mov	r2, r8
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1c2      	bne.n	800644e <_printf_float+0x2f2>
 80064c8:	e6a3      	b.n	8006212 <_printf_float+0xb6>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	9206      	str	r2, [sp, #24]
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f ae9c 	beq.w	8006212 <_printf_float+0xb6>
 80064da:	9a06      	ldr	r2, [sp, #24]
 80064dc:	f10b 0b01 	add.w	fp, fp, #1
 80064e0:	e7bb      	b.n	800645a <_printf_float+0x2fe>
 80064e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	d1c0      	bne.n	8006472 <_printf_float+0x316>
 80064f0:	e68f      	b.n	8006212 <_printf_float+0xb6>
 80064f2:	9a06      	ldr	r2, [sp, #24]
 80064f4:	464b      	mov	r3, r9
 80064f6:	4442      	add	r2, r8
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	d1c3      	bne.n	800648a <_printf_float+0x32e>
 8006502:	e686      	b.n	8006212 <_printf_float+0xb6>
 8006504:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006508:	f1ba 0f01 	cmp.w	sl, #1
 800650c:	dc01      	bgt.n	8006512 <_printf_float+0x3b6>
 800650e:	07db      	lsls	r3, r3, #31
 8006510:	d536      	bpl.n	8006580 <_printf_float+0x424>
 8006512:	2301      	movs	r3, #1
 8006514:	4642      	mov	r2, r8
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae78 	beq.w	8006212 <_printf_float+0xb6>
 8006522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	f43f ae70 	beq.w	8006212 <_printf_float+0xb6>
 8006532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006536:	2200      	movs	r2, #0
 8006538:	2300      	movs	r3, #0
 800653a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800653e:	f7fa facb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006542:	b9c0      	cbnz	r0, 8006576 <_printf_float+0x41a>
 8006544:	4653      	mov	r3, sl
 8006546:	f108 0201 	add.w	r2, r8, #1
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	d10c      	bne.n	800656e <_printf_float+0x412>
 8006554:	e65d      	b.n	8006212 <_printf_float+0xb6>
 8006556:	2301      	movs	r3, #1
 8006558:	465a      	mov	r2, fp
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f ae56 	beq.w	8006212 <_printf_float+0xb6>
 8006566:	f108 0801 	add.w	r8, r8, #1
 800656a:	45d0      	cmp	r8, sl
 800656c:	dbf3      	blt.n	8006556 <_printf_float+0x3fa>
 800656e:	464b      	mov	r3, r9
 8006570:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006574:	e6df      	b.n	8006336 <_printf_float+0x1da>
 8006576:	f04f 0800 	mov.w	r8, #0
 800657a:	f104 0b1a 	add.w	fp, r4, #26
 800657e:	e7f4      	b.n	800656a <_printf_float+0x40e>
 8006580:	2301      	movs	r3, #1
 8006582:	4642      	mov	r2, r8
 8006584:	e7e1      	b.n	800654a <_printf_float+0x3ee>
 8006586:	2301      	movs	r3, #1
 8006588:	464a      	mov	r2, r9
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f ae3e 	beq.w	8006212 <_printf_float+0xb6>
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	4543      	cmp	r3, r8
 80065a2:	dcf0      	bgt.n	8006586 <_printf_float+0x42a>
 80065a4:	e6fc      	b.n	80063a0 <_printf_float+0x244>
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	f104 0919 	add.w	r9, r4, #25
 80065ae:	e7f4      	b.n	800659a <_printf_float+0x43e>

080065b0 <_printf_common>:
 80065b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	4616      	mov	r6, r2
 80065b6:	4698      	mov	r8, r3
 80065b8:	688a      	ldr	r2, [r1, #8]
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	bfb8      	it	lt
 80065c4:	4613      	movlt	r3, r2
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065cc:	4607      	mov	r7, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	b10a      	cbz	r2, 80065d6 <_printf_common+0x26>
 80065d2:	3301      	adds	r3, #1
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	0699      	lsls	r1, r3, #26
 80065da:	bf42      	ittt	mi
 80065dc:	6833      	ldrmi	r3, [r6, #0]
 80065de:	3302      	addmi	r3, #2
 80065e0:	6033      	strmi	r3, [r6, #0]
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	f015 0506 	ands.w	r5, r5, #6
 80065e8:	d106      	bne.n	80065f8 <_printf_common+0x48>
 80065ea:	f104 0a19 	add.w	sl, r4, #25
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	6832      	ldr	r2, [r6, #0]
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dc26      	bgt.n	8006646 <_printf_common+0x96>
 80065f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	3b00      	subs	r3, #0
 8006600:	bf18      	it	ne
 8006602:	2301      	movne	r3, #1
 8006604:	0692      	lsls	r2, r2, #26
 8006606:	d42b      	bmi.n	8006660 <_printf_common+0xb0>
 8006608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800660c:	4641      	mov	r1, r8
 800660e:	4638      	mov	r0, r7
 8006610:	47c8      	blx	r9
 8006612:	3001      	adds	r0, #1
 8006614:	d01e      	beq.n	8006654 <_printf_common+0xa4>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	f003 0306 	and.w	r3, r3, #6
 800661e:	2b04      	cmp	r3, #4
 8006620:	bf02      	ittt	eq
 8006622:	68e5      	ldreq	r5, [r4, #12]
 8006624:	6833      	ldreq	r3, [r6, #0]
 8006626:	1aed      	subeq	r5, r5, r3
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	bf0c      	ite	eq
 800662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006630:	2500      	movne	r5, #0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfc4      	itt	gt
 8006636:	1a9b      	subgt	r3, r3, r2
 8006638:	18ed      	addgt	r5, r5, r3
 800663a:	2600      	movs	r6, #0
 800663c:	341a      	adds	r4, #26
 800663e:	42b5      	cmp	r5, r6
 8006640:	d11a      	bne.n	8006678 <_printf_common+0xc8>
 8006642:	2000      	movs	r0, #0
 8006644:	e008      	b.n	8006658 <_printf_common+0xa8>
 8006646:	2301      	movs	r3, #1
 8006648:	4652      	mov	r2, sl
 800664a:	4641      	mov	r1, r8
 800664c:	4638      	mov	r0, r7
 800664e:	47c8      	blx	r9
 8006650:	3001      	adds	r0, #1
 8006652:	d103      	bne.n	800665c <_printf_common+0xac>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	3501      	adds	r5, #1
 800665e:	e7c6      	b.n	80065ee <_printf_common+0x3e>
 8006660:	18e1      	adds	r1, r4, r3
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	2030      	movs	r0, #48	@ 0x30
 8006666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800666a:	4422      	add	r2, r4
 800666c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006674:	3302      	adds	r3, #2
 8006676:	e7c7      	b.n	8006608 <_printf_common+0x58>
 8006678:	2301      	movs	r3, #1
 800667a:	4622      	mov	r2, r4
 800667c:	4641      	mov	r1, r8
 800667e:	4638      	mov	r0, r7
 8006680:	47c8      	blx	r9
 8006682:	3001      	adds	r0, #1
 8006684:	d0e6      	beq.n	8006654 <_printf_common+0xa4>
 8006686:	3601      	adds	r6, #1
 8006688:	e7d9      	b.n	800663e <_printf_common+0x8e>
	...

0800668c <_printf_i>:
 800668c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	7e0f      	ldrb	r7, [r1, #24]
 8006692:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006694:	2f78      	cmp	r7, #120	@ 0x78
 8006696:	4691      	mov	r9, r2
 8006698:	4680      	mov	r8, r0
 800669a:	460c      	mov	r4, r1
 800669c:	469a      	mov	sl, r3
 800669e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066a2:	d807      	bhi.n	80066b4 <_printf_i+0x28>
 80066a4:	2f62      	cmp	r7, #98	@ 0x62
 80066a6:	d80a      	bhi.n	80066be <_printf_i+0x32>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	f000 80d2 	beq.w	8006852 <_printf_i+0x1c6>
 80066ae:	2f58      	cmp	r7, #88	@ 0x58
 80066b0:	f000 80b9 	beq.w	8006826 <_printf_i+0x19a>
 80066b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066bc:	e03a      	b.n	8006734 <_printf_i+0xa8>
 80066be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066c2:	2b15      	cmp	r3, #21
 80066c4:	d8f6      	bhi.n	80066b4 <_printf_i+0x28>
 80066c6:	a101      	add	r1, pc, #4	@ (adr r1, 80066cc <_printf_i+0x40>)
 80066c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066cc:	08006725 	.word	0x08006725
 80066d0:	08006739 	.word	0x08006739
 80066d4:	080066b5 	.word	0x080066b5
 80066d8:	080066b5 	.word	0x080066b5
 80066dc:	080066b5 	.word	0x080066b5
 80066e0:	080066b5 	.word	0x080066b5
 80066e4:	08006739 	.word	0x08006739
 80066e8:	080066b5 	.word	0x080066b5
 80066ec:	080066b5 	.word	0x080066b5
 80066f0:	080066b5 	.word	0x080066b5
 80066f4:	080066b5 	.word	0x080066b5
 80066f8:	08006839 	.word	0x08006839
 80066fc:	08006763 	.word	0x08006763
 8006700:	080067f3 	.word	0x080067f3
 8006704:	080066b5 	.word	0x080066b5
 8006708:	080066b5 	.word	0x080066b5
 800670c:	0800685b 	.word	0x0800685b
 8006710:	080066b5 	.word	0x080066b5
 8006714:	08006763 	.word	0x08006763
 8006718:	080066b5 	.word	0x080066b5
 800671c:	080066b5 	.word	0x080066b5
 8006720:	080067fb 	.word	0x080067fb
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6032      	str	r2, [r6, #0]
 800672c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006734:	2301      	movs	r3, #1
 8006736:	e09d      	b.n	8006874 <_printf_i+0x1e8>
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	6820      	ldr	r0, [r4, #0]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	6031      	str	r1, [r6, #0]
 8006740:	0606      	lsls	r6, r0, #24
 8006742:	d501      	bpl.n	8006748 <_printf_i+0xbc>
 8006744:	681d      	ldr	r5, [r3, #0]
 8006746:	e003      	b.n	8006750 <_printf_i+0xc4>
 8006748:	0645      	lsls	r5, r0, #25
 800674a:	d5fb      	bpl.n	8006744 <_printf_i+0xb8>
 800674c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006750:	2d00      	cmp	r5, #0
 8006752:	da03      	bge.n	800675c <_printf_i+0xd0>
 8006754:	232d      	movs	r3, #45	@ 0x2d
 8006756:	426d      	negs	r5, r5
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800675c:	4859      	ldr	r0, [pc, #356]	@ (80068c4 <_printf_i+0x238>)
 800675e:	230a      	movs	r3, #10
 8006760:	e011      	b.n	8006786 <_printf_i+0xfa>
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	6833      	ldr	r3, [r6, #0]
 8006766:	0608      	lsls	r0, r1, #24
 8006768:	f853 5b04 	ldr.w	r5, [r3], #4
 800676c:	d402      	bmi.n	8006774 <_printf_i+0xe8>
 800676e:	0649      	lsls	r1, r1, #25
 8006770:	bf48      	it	mi
 8006772:	b2ad      	uxthmi	r5, r5
 8006774:	2f6f      	cmp	r7, #111	@ 0x6f
 8006776:	4853      	ldr	r0, [pc, #332]	@ (80068c4 <_printf_i+0x238>)
 8006778:	6033      	str	r3, [r6, #0]
 800677a:	bf14      	ite	ne
 800677c:	230a      	movne	r3, #10
 800677e:	2308      	moveq	r3, #8
 8006780:	2100      	movs	r1, #0
 8006782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006786:	6866      	ldr	r6, [r4, #4]
 8006788:	60a6      	str	r6, [r4, #8]
 800678a:	2e00      	cmp	r6, #0
 800678c:	bfa2      	ittt	ge
 800678e:	6821      	ldrge	r1, [r4, #0]
 8006790:	f021 0104 	bicge.w	r1, r1, #4
 8006794:	6021      	strge	r1, [r4, #0]
 8006796:	b90d      	cbnz	r5, 800679c <_printf_i+0x110>
 8006798:	2e00      	cmp	r6, #0
 800679a:	d04b      	beq.n	8006834 <_printf_i+0x1a8>
 800679c:	4616      	mov	r6, r2
 800679e:	fbb5 f1f3 	udiv	r1, r5, r3
 80067a2:	fb03 5711 	mls	r7, r3, r1, r5
 80067a6:	5dc7      	ldrb	r7, [r0, r7]
 80067a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067ac:	462f      	mov	r7, r5
 80067ae:	42bb      	cmp	r3, r7
 80067b0:	460d      	mov	r5, r1
 80067b2:	d9f4      	bls.n	800679e <_printf_i+0x112>
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d10b      	bne.n	80067d0 <_printf_i+0x144>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	07df      	lsls	r7, r3, #31
 80067bc:	d508      	bpl.n	80067d0 <_printf_i+0x144>
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	6861      	ldr	r1, [r4, #4]
 80067c2:	4299      	cmp	r1, r3
 80067c4:	bfde      	ittt	le
 80067c6:	2330      	movle	r3, #48	@ 0x30
 80067c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067d0:	1b92      	subs	r2, r2, r6
 80067d2:	6122      	str	r2, [r4, #16]
 80067d4:	f8cd a000 	str.w	sl, [sp]
 80067d8:	464b      	mov	r3, r9
 80067da:	aa03      	add	r2, sp, #12
 80067dc:	4621      	mov	r1, r4
 80067de:	4640      	mov	r0, r8
 80067e0:	f7ff fee6 	bl	80065b0 <_printf_common>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d14a      	bne.n	800687e <_printf_i+0x1f2>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	b004      	add	sp, #16
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	4833      	ldr	r0, [pc, #204]	@ (80068c8 <_printf_i+0x23c>)
 80067fc:	2778      	movs	r7, #120	@ 0x78
 80067fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	6831      	ldr	r1, [r6, #0]
 8006806:	061f      	lsls	r7, r3, #24
 8006808:	f851 5b04 	ldr.w	r5, [r1], #4
 800680c:	d402      	bmi.n	8006814 <_printf_i+0x188>
 800680e:	065f      	lsls	r7, r3, #25
 8006810:	bf48      	it	mi
 8006812:	b2ad      	uxthmi	r5, r5
 8006814:	6031      	str	r1, [r6, #0]
 8006816:	07d9      	lsls	r1, r3, #31
 8006818:	bf44      	itt	mi
 800681a:	f043 0320 	orrmi.w	r3, r3, #32
 800681e:	6023      	strmi	r3, [r4, #0]
 8006820:	b11d      	cbz	r5, 800682a <_printf_i+0x19e>
 8006822:	2310      	movs	r3, #16
 8006824:	e7ac      	b.n	8006780 <_printf_i+0xf4>
 8006826:	4827      	ldr	r0, [pc, #156]	@ (80068c4 <_printf_i+0x238>)
 8006828:	e7e9      	b.n	80067fe <_printf_i+0x172>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f023 0320 	bic.w	r3, r3, #32
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	e7f6      	b.n	8006822 <_printf_i+0x196>
 8006834:	4616      	mov	r6, r2
 8006836:	e7bd      	b.n	80067b4 <_printf_i+0x128>
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	6961      	ldr	r1, [r4, #20]
 800683e:	1d18      	adds	r0, r3, #4
 8006840:	6030      	str	r0, [r6, #0]
 8006842:	062e      	lsls	r6, r5, #24
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	d501      	bpl.n	800684c <_printf_i+0x1c0>
 8006848:	6019      	str	r1, [r3, #0]
 800684a:	e002      	b.n	8006852 <_printf_i+0x1c6>
 800684c:	0668      	lsls	r0, r5, #25
 800684e:	d5fb      	bpl.n	8006848 <_printf_i+0x1bc>
 8006850:	8019      	strh	r1, [r3, #0]
 8006852:	2300      	movs	r3, #0
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	4616      	mov	r6, r2
 8006858:	e7bc      	b.n	80067d4 <_printf_i+0x148>
 800685a:	6833      	ldr	r3, [r6, #0]
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	6032      	str	r2, [r6, #0]
 8006860:	681e      	ldr	r6, [r3, #0]
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	2100      	movs	r1, #0
 8006866:	4630      	mov	r0, r6
 8006868:	f7f9 fcba 	bl	80001e0 <memchr>
 800686c:	b108      	cbz	r0, 8006872 <_printf_i+0x1e6>
 800686e:	1b80      	subs	r0, r0, r6
 8006870:	6060      	str	r0, [r4, #4]
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	2300      	movs	r3, #0
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800687c:	e7aa      	b.n	80067d4 <_printf_i+0x148>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	4632      	mov	r2, r6
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d0ad      	beq.n	80067e8 <_printf_i+0x15c>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	079b      	lsls	r3, r3, #30
 8006890:	d413      	bmi.n	80068ba <_printf_i+0x22e>
 8006892:	68e0      	ldr	r0, [r4, #12]
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	4298      	cmp	r0, r3
 8006898:	bfb8      	it	lt
 800689a:	4618      	movlt	r0, r3
 800689c:	e7a6      	b.n	80067ec <_printf_i+0x160>
 800689e:	2301      	movs	r3, #1
 80068a0:	4632      	mov	r2, r6
 80068a2:	4649      	mov	r1, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	47d0      	blx	sl
 80068a8:	3001      	adds	r0, #1
 80068aa:	d09d      	beq.n	80067e8 <_printf_i+0x15c>
 80068ac:	3501      	adds	r5, #1
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	9903      	ldr	r1, [sp, #12]
 80068b2:	1a5b      	subs	r3, r3, r1
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dcf2      	bgt.n	800689e <_printf_i+0x212>
 80068b8:	e7eb      	b.n	8006892 <_printf_i+0x206>
 80068ba:	2500      	movs	r5, #0
 80068bc:	f104 0619 	add.w	r6, r4, #25
 80068c0:	e7f5      	b.n	80068ae <_printf_i+0x222>
 80068c2:	bf00      	nop
 80068c4:	08008ac6 	.word	0x08008ac6
 80068c8:	08008ad7 	.word	0x08008ad7

080068cc <std>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	e9c0 3300 	strd	r3, r3, [r0]
 80068d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068da:	6083      	str	r3, [r0, #8]
 80068dc:	8181      	strh	r1, [r0, #12]
 80068de:	6643      	str	r3, [r0, #100]	@ 0x64
 80068e0:	81c2      	strh	r2, [r0, #14]
 80068e2:	6183      	str	r3, [r0, #24]
 80068e4:	4619      	mov	r1, r3
 80068e6:	2208      	movs	r2, #8
 80068e8:	305c      	adds	r0, #92	@ 0x5c
 80068ea:	f000 f8f4 	bl	8006ad6 <memset>
 80068ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <std+0x58>)
 80068f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <std+0x5c>)
 80068f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <std+0x60>)
 80068f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <std+0x64>)
 80068fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <std+0x68>)
 8006900:	6224      	str	r4, [r4, #32]
 8006902:	429c      	cmp	r4, r3
 8006904:	d006      	beq.n	8006914 <std+0x48>
 8006906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800690a:	4294      	cmp	r4, r2
 800690c:	d002      	beq.n	8006914 <std+0x48>
 800690e:	33d0      	adds	r3, #208	@ 0xd0
 8006910:	429c      	cmp	r4, r3
 8006912:	d105      	bne.n	8006920 <std+0x54>
 8006914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691c:	f000 b958 	b.w	8006bd0 <__retarget_lock_init_recursive>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	bf00      	nop
 8006924:	08006a51 	.word	0x08006a51
 8006928:	08006a73 	.word	0x08006a73
 800692c:	08006aab 	.word	0x08006aab
 8006930:	08006acf 	.word	0x08006acf
 8006934:	20002948 	.word	0x20002948

08006938 <stdio_exit_handler>:
 8006938:	4a02      	ldr	r2, [pc, #8]	@ (8006944 <stdio_exit_handler+0xc>)
 800693a:	4903      	ldr	r1, [pc, #12]	@ (8006948 <stdio_exit_handler+0x10>)
 800693c:	4803      	ldr	r0, [pc, #12]	@ (800694c <stdio_exit_handler+0x14>)
 800693e:	f000 b869 	b.w	8006a14 <_fwalk_sglue>
 8006942:	bf00      	nop
 8006944:	20000014 	.word	0x20000014
 8006948:	0800829d 	.word	0x0800829d
 800694c:	20000024 	.word	0x20000024

08006950 <cleanup_stdio>:
 8006950:	6841      	ldr	r1, [r0, #4]
 8006952:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <cleanup_stdio+0x34>)
 8006954:	4299      	cmp	r1, r3
 8006956:	b510      	push	{r4, lr}
 8006958:	4604      	mov	r4, r0
 800695a:	d001      	beq.n	8006960 <cleanup_stdio+0x10>
 800695c:	f001 fc9e 	bl	800829c <_fflush_r>
 8006960:	68a1      	ldr	r1, [r4, #8]
 8006962:	4b09      	ldr	r3, [pc, #36]	@ (8006988 <cleanup_stdio+0x38>)
 8006964:	4299      	cmp	r1, r3
 8006966:	d002      	beq.n	800696e <cleanup_stdio+0x1e>
 8006968:	4620      	mov	r0, r4
 800696a:	f001 fc97 	bl	800829c <_fflush_r>
 800696e:	68e1      	ldr	r1, [r4, #12]
 8006970:	4b06      	ldr	r3, [pc, #24]	@ (800698c <cleanup_stdio+0x3c>)
 8006972:	4299      	cmp	r1, r3
 8006974:	d004      	beq.n	8006980 <cleanup_stdio+0x30>
 8006976:	4620      	mov	r0, r4
 8006978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697c:	f001 bc8e 	b.w	800829c <_fflush_r>
 8006980:	bd10      	pop	{r4, pc}
 8006982:	bf00      	nop
 8006984:	20002948 	.word	0x20002948
 8006988:	200029b0 	.word	0x200029b0
 800698c:	20002a18 	.word	0x20002a18

08006990 <global_stdio_init.part.0>:
 8006990:	b510      	push	{r4, lr}
 8006992:	4b0b      	ldr	r3, [pc, #44]	@ (80069c0 <global_stdio_init.part.0+0x30>)
 8006994:	4c0b      	ldr	r4, [pc, #44]	@ (80069c4 <global_stdio_init.part.0+0x34>)
 8006996:	4a0c      	ldr	r2, [pc, #48]	@ (80069c8 <global_stdio_init.part.0+0x38>)
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	4620      	mov	r0, r4
 800699c:	2200      	movs	r2, #0
 800699e:	2104      	movs	r1, #4
 80069a0:	f7ff ff94 	bl	80068cc <std>
 80069a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069a8:	2201      	movs	r2, #1
 80069aa:	2109      	movs	r1, #9
 80069ac:	f7ff ff8e 	bl	80068cc <std>
 80069b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069b4:	2202      	movs	r2, #2
 80069b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ba:	2112      	movs	r1, #18
 80069bc:	f7ff bf86 	b.w	80068cc <std>
 80069c0:	20002a80 	.word	0x20002a80
 80069c4:	20002948 	.word	0x20002948
 80069c8:	08006939 	.word	0x08006939

080069cc <__sfp_lock_acquire>:
 80069cc:	4801      	ldr	r0, [pc, #4]	@ (80069d4 <__sfp_lock_acquire+0x8>)
 80069ce:	f000 b900 	b.w	8006bd2 <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20002a89 	.word	0x20002a89

080069d8 <__sfp_lock_release>:
 80069d8:	4801      	ldr	r0, [pc, #4]	@ (80069e0 <__sfp_lock_release+0x8>)
 80069da:	f000 b8fb 	b.w	8006bd4 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20002a89 	.word	0x20002a89

080069e4 <__sinit>:
 80069e4:	b510      	push	{r4, lr}
 80069e6:	4604      	mov	r4, r0
 80069e8:	f7ff fff0 	bl	80069cc <__sfp_lock_acquire>
 80069ec:	6a23      	ldr	r3, [r4, #32]
 80069ee:	b11b      	cbz	r3, 80069f8 <__sinit+0x14>
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f4:	f7ff bff0 	b.w	80069d8 <__sfp_lock_release>
 80069f8:	4b04      	ldr	r3, [pc, #16]	@ (8006a0c <__sinit+0x28>)
 80069fa:	6223      	str	r3, [r4, #32]
 80069fc:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <__sinit+0x2c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f5      	bne.n	80069f0 <__sinit+0xc>
 8006a04:	f7ff ffc4 	bl	8006990 <global_stdio_init.part.0>
 8006a08:	e7f2      	b.n	80069f0 <__sinit+0xc>
 8006a0a:	bf00      	nop
 8006a0c:	08006951 	.word	0x08006951
 8006a10:	20002a80 	.word	0x20002a80

08006a14 <_fwalk_sglue>:
 8006a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a18:	4607      	mov	r7, r0
 8006a1a:	4688      	mov	r8, r1
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a24:	f1b9 0901 	subs.w	r9, r9, #1
 8006a28:	d505      	bpl.n	8006a36 <_fwalk_sglue+0x22>
 8006a2a:	6824      	ldr	r4, [r4, #0]
 8006a2c:	2c00      	cmp	r4, #0
 8006a2e:	d1f7      	bne.n	8006a20 <_fwalk_sglue+0xc>
 8006a30:	4630      	mov	r0, r6
 8006a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d907      	bls.n	8006a4c <_fwalk_sglue+0x38>
 8006a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a40:	3301      	adds	r3, #1
 8006a42:	d003      	beq.n	8006a4c <_fwalk_sglue+0x38>
 8006a44:	4629      	mov	r1, r5
 8006a46:	4638      	mov	r0, r7
 8006a48:	47c0      	blx	r8
 8006a4a:	4306      	orrs	r6, r0
 8006a4c:	3568      	adds	r5, #104	@ 0x68
 8006a4e:	e7e9      	b.n	8006a24 <_fwalk_sglue+0x10>

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 f86c 	bl	8006b34 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	05db      	lsls	r3, r3, #23
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 f840 	bl	8006b10 <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f000 b857 	b.w	8006b58 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 f82d 	bl	8006b10 <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 b80d 	b.w	8006af0 <_close_r>

08006ad6 <memset>:
 8006ad6:	4402      	add	r2, r0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d100      	bne.n	8006ae0 <memset+0xa>
 8006ade:	4770      	bx	lr
 8006ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae4:	e7f9      	b.n	8006ada <memset+0x4>
	...

08006ae8 <_localeconv_r>:
 8006ae8:	4800      	ldr	r0, [pc, #0]	@ (8006aec <_localeconv_r+0x4>)
 8006aea:	4770      	bx	lr
 8006aec:	20000160 	.word	0x20000160

08006af0 <_close_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d06      	ldr	r5, [pc, #24]	@ (8006b0c <_close_r+0x1c>)
 8006af4:	2300      	movs	r3, #0
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	f7fb fbc6 	bl	800228c <_close>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_close_r+0x1a>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_close_r+0x1a>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20002a84 	.word	0x20002a84

08006b10 <_lseek_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_lseek_r+0x20>)
 8006b14:	4604      	mov	r4, r0
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	602a      	str	r2, [r5, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7fb fbdb 	bl	80022da <_lseek>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_lseek_r+0x1e>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_lseek_r+0x1e>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20002a84 	.word	0x20002a84

08006b34 <_read_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d07      	ldr	r5, [pc, #28]	@ (8006b54 <_read_r+0x20>)
 8006b38:	4604      	mov	r4, r0
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	602a      	str	r2, [r5, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7fb fb69 	bl	800221a <_read>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_read_r+0x1e>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_read_r+0x1e>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20002a84 	.word	0x20002a84

08006b58 <_write_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	@ (8006b78 <_write_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fb fb74 	bl	8002254 <_write>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_write_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_write_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20002a84 	.word	0x20002a84

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	@ (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000020 	.word	0x20000020

08006b88 <__libc_init_array>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc0 <__libc_init_array+0x38>)
 8006b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bc4 <__libc_init_array+0x3c>)
 8006b8e:	1b64      	subs	r4, r4, r5
 8006b90:	10a4      	asrs	r4, r4, #2
 8006b92:	2600      	movs	r6, #0
 8006b94:	42a6      	cmp	r6, r4
 8006b96:	d109      	bne.n	8006bac <__libc_init_array+0x24>
 8006b98:	4d0b      	ldr	r5, [pc, #44]	@ (8006bc8 <__libc_init_array+0x40>)
 8006b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8006bcc <__libc_init_array+0x44>)
 8006b9c:	f001 febe 	bl	800891c <_init>
 8006ba0:	1b64      	subs	r4, r4, r5
 8006ba2:	10a4      	asrs	r4, r4, #2
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	42a6      	cmp	r6, r4
 8006ba8:	d105      	bne.n	8006bb6 <__libc_init_array+0x2e>
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb0:	4798      	blx	r3
 8006bb2:	3601      	adds	r6, #1
 8006bb4:	e7ee      	b.n	8006b94 <__libc_init_array+0xc>
 8006bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bba:	4798      	blx	r3
 8006bbc:	3601      	adds	r6, #1
 8006bbe:	e7f2      	b.n	8006ba6 <__libc_init_array+0x1e>
 8006bc0:	08008e30 	.word	0x08008e30
 8006bc4:	08008e30 	.word	0x08008e30
 8006bc8:	08008e30 	.word	0x08008e30
 8006bcc:	08008e34 	.word	0x08008e34

08006bd0 <__retarget_lock_init_recursive>:
 8006bd0:	4770      	bx	lr

08006bd2 <__retarget_lock_acquire_recursive>:
 8006bd2:	4770      	bx	lr

08006bd4 <__retarget_lock_release_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <memcpy>:
 8006bd6:	440a      	add	r2, r1
 8006bd8:	4291      	cmp	r1, r2
 8006bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bde:	d100      	bne.n	8006be2 <memcpy+0xc>
 8006be0:	4770      	bx	lr
 8006be2:	b510      	push	{r4, lr}
 8006be4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bec:	4291      	cmp	r1, r2
 8006bee:	d1f9      	bne.n	8006be4 <memcpy+0xe>
 8006bf0:	bd10      	pop	{r4, pc}

08006bf2 <quorem>:
 8006bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf6:	6903      	ldr	r3, [r0, #16]
 8006bf8:	690c      	ldr	r4, [r1, #16]
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	db7e      	blt.n	8006cfe <quorem+0x10c>
 8006c00:	3c01      	subs	r4, #1
 8006c02:	f101 0814 	add.w	r8, r1, #20
 8006c06:	00a3      	lsls	r3, r4, #2
 8006c08:	f100 0514 	add.w	r5, r0, #20
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c28:	d32e      	bcc.n	8006c88 <quorem+0x96>
 8006c2a:	f04f 0a00 	mov.w	sl, #0
 8006c2e:	46c4      	mov	ip, r8
 8006c30:	46ae      	mov	lr, r5
 8006c32:	46d3      	mov	fp, sl
 8006c34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c38:	b298      	uxth	r0, r3
 8006c3a:	fb06 a000 	mla	r0, r6, r0, sl
 8006c3e:	0c02      	lsrs	r2, r0, #16
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	fb06 2303 	mla	r3, r6, r3, r2
 8006c46:	f8de 2000 	ldr.w	r2, [lr]
 8006c4a:	b280      	uxth	r0, r0
 8006c4c:	b292      	uxth	r2, r2
 8006c4e:	1a12      	subs	r2, r2, r0
 8006c50:	445a      	add	r2, fp
 8006c52:	f8de 0000 	ldr.w	r0, [lr]
 8006c56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c64:	b292      	uxth	r2, r2
 8006c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c6a:	45e1      	cmp	r9, ip
 8006c6c:	f84e 2b04 	str.w	r2, [lr], #4
 8006c70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c74:	d2de      	bcs.n	8006c34 <quorem+0x42>
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	58eb      	ldr	r3, [r5, r3]
 8006c7a:	b92b      	cbnz	r3, 8006c88 <quorem+0x96>
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	3b04      	subs	r3, #4
 8006c80:	429d      	cmp	r5, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	d32f      	bcc.n	8006ce6 <quorem+0xf4>
 8006c86:	613c      	str	r4, [r7, #16]
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f001 f97b 	bl	8007f84 <__mcmp>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	db25      	blt.n	8006cde <quorem+0xec>
 8006c92:	4629      	mov	r1, r5
 8006c94:	2000      	movs	r0, #0
 8006c96:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c9a:	f8d1 c000 	ldr.w	ip, [r1]
 8006c9e:	fa1f fe82 	uxth.w	lr, r2
 8006ca2:	fa1f f38c 	uxth.w	r3, ip
 8006ca6:	eba3 030e 	sub.w	r3, r3, lr
 8006caa:	4403      	add	r3, r0
 8006cac:	0c12      	lsrs	r2, r2, #16
 8006cae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cbc:	45c1      	cmp	r9, r8
 8006cbe:	f841 3b04 	str.w	r3, [r1], #4
 8006cc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cc6:	d2e6      	bcs.n	8006c96 <quorem+0xa4>
 8006cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd0:	b922      	cbnz	r2, 8006cdc <quorem+0xea>
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	d30b      	bcc.n	8006cf2 <quorem+0x100>
 8006cda:	613c      	str	r4, [r7, #16]
 8006cdc:	3601      	adds	r6, #1
 8006cde:	4630      	mov	r0, r6
 8006ce0:	b003      	add	sp, #12
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d1cb      	bne.n	8006c86 <quorem+0x94>
 8006cee:	3c01      	subs	r4, #1
 8006cf0:	e7c6      	b.n	8006c80 <quorem+0x8e>
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	3b04      	subs	r3, #4
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d1ef      	bne.n	8006cda <quorem+0xe8>
 8006cfa:	3c01      	subs	r4, #1
 8006cfc:	e7ea      	b.n	8006cd4 <quorem+0xe2>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	e7ee      	b.n	8006ce0 <quorem+0xee>
 8006d02:	0000      	movs	r0, r0
 8006d04:	0000      	movs	r0, r0
	...

08006d08 <_dtoa_r>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	69c7      	ldr	r7, [r0, #28]
 8006d0e:	b099      	sub	sp, #100	@ 0x64
 8006d10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d14:	ec55 4b10 	vmov	r4, r5, d0
 8006d18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d1c:	4683      	mov	fp, r0
 8006d1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d22:	b97f      	cbnz	r7, 8006d44 <_dtoa_r+0x3c>
 8006d24:	2010      	movs	r0, #16
 8006d26:	f000 fdfd 	bl	8007924 <malloc>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d30:	b920      	cbnz	r0, 8006d3c <_dtoa_r+0x34>
 8006d32:	4ba7      	ldr	r3, [pc, #668]	@ (8006fd0 <_dtoa_r+0x2c8>)
 8006d34:	21ef      	movs	r1, #239	@ 0xef
 8006d36:	48a7      	ldr	r0, [pc, #668]	@ (8006fd4 <_dtoa_r+0x2cc>)
 8006d38:	f001 fae8 	bl	800830c <__assert_func>
 8006d3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d40:	6007      	str	r7, [r0, #0]
 8006d42:	60c7      	str	r7, [r0, #12]
 8006d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d48:	6819      	ldr	r1, [r3, #0]
 8006d4a:	b159      	cbz	r1, 8006d64 <_dtoa_r+0x5c>
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	604a      	str	r2, [r1, #4]
 8006d50:	2301      	movs	r3, #1
 8006d52:	4093      	lsls	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
 8006d56:	4658      	mov	r0, fp
 8006d58:	f000 feda 	bl	8007b10 <_Bfree>
 8006d5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	1e2b      	subs	r3, r5, #0
 8006d66:	bfb9      	ittee	lt
 8006d68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d6c:	9303      	strlt	r3, [sp, #12]
 8006d6e:	2300      	movge	r3, #0
 8006d70:	6033      	strge	r3, [r6, #0]
 8006d72:	9f03      	ldr	r7, [sp, #12]
 8006d74:	4b98      	ldr	r3, [pc, #608]	@ (8006fd8 <_dtoa_r+0x2d0>)
 8006d76:	bfbc      	itt	lt
 8006d78:	2201      	movlt	r2, #1
 8006d7a:	6032      	strlt	r2, [r6, #0]
 8006d7c:	43bb      	bics	r3, r7
 8006d7e:	d112      	bne.n	8006da6 <_dtoa_r+0x9e>
 8006d80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d8c:	4323      	orrs	r3, r4
 8006d8e:	f000 854d 	beq.w	800782c <_dtoa_r+0xb24>
 8006d92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fec <_dtoa_r+0x2e4>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 854f 	beq.w	800783c <_dtoa_r+0xb34>
 8006d9e:	f10a 0303 	add.w	r3, sl, #3
 8006da2:	f000 bd49 	b.w	8007838 <_dtoa_r+0xb30>
 8006da6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	ec51 0b17 	vmov	r0, r1, d7
 8006db0:	2300      	movs	r3, #0
 8006db2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006db6:	f7f9 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dba:	4680      	mov	r8, r0
 8006dbc:	b158      	cbz	r0, 8006dd6 <_dtoa_r+0xce>
 8006dbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dc6:	b113      	cbz	r3, 8006dce <_dtoa_r+0xc6>
 8006dc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dca:	4b84      	ldr	r3, [pc, #528]	@ (8006fdc <_dtoa_r+0x2d4>)
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ff0 <_dtoa_r+0x2e8>
 8006dd2:	f000 bd33 	b.w	800783c <_dtoa_r+0xb34>
 8006dd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dda:	aa16      	add	r2, sp, #88	@ 0x58
 8006ddc:	a917      	add	r1, sp, #92	@ 0x5c
 8006dde:	4658      	mov	r0, fp
 8006de0:	f001 f980 	bl	80080e4 <__d2b>
 8006de4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006de8:	4681      	mov	r9, r0
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	d077      	beq.n	8006ede <_dtoa_r+0x1d6>
 8006dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006df0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e08:	4619      	mov	r1, r3
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4b74      	ldr	r3, [pc, #464]	@ (8006fe0 <_dtoa_r+0x2d8>)
 8006e0e:	f7f9 fa43 	bl	8000298 <__aeabi_dsub>
 8006e12:	a369      	add	r3, pc, #420	@ (adr r3, 8006fb8 <_dtoa_r+0x2b0>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fbf6 	bl	8000608 <__aeabi_dmul>
 8006e1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006fc0 <_dtoa_r+0x2b8>)
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f7f9 fa3b 	bl	800029c <__adddf3>
 8006e26:	4604      	mov	r4, r0
 8006e28:	4630      	mov	r0, r6
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	f7f9 fb82 	bl	8000534 <__aeabi_i2d>
 8006e30:	a365      	add	r3, pc, #404	@ (adr r3, 8006fc8 <_dtoa_r+0x2c0>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fbe7 	bl	8000608 <__aeabi_dmul>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 fa2b 	bl	800029c <__adddf3>
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	f7f9 fe8d 	bl	8000b68 <__aeabi_d2iz>
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4607      	mov	r7, r0
 8006e52:	2300      	movs	r3, #0
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fe48 	bl	8000aec <__aeabi_dcmplt>
 8006e5c:	b140      	cbz	r0, 8006e70 <_dtoa_r+0x168>
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7f9 fb68 	bl	8000534 <__aeabi_i2d>
 8006e64:	4622      	mov	r2, r4
 8006e66:	462b      	mov	r3, r5
 8006e68:	f7f9 fe36 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e6c:	b900      	cbnz	r0, 8006e70 <_dtoa_r+0x168>
 8006e6e:	3f01      	subs	r7, #1
 8006e70:	2f16      	cmp	r7, #22
 8006e72:	d851      	bhi.n	8006f18 <_dtoa_r+0x210>
 8006e74:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe4 <_dtoa_r+0x2dc>)
 8006e76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e82:	f7f9 fe33 	bl	8000aec <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d048      	beq.n	8006f1c <_dtoa_r+0x214>
 8006e8a:	3f01      	subs	r7, #1
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e92:	1b9b      	subs	r3, r3, r6
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	bf44      	itt	mi
 8006e98:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e9c:	2300      	movmi	r3, #0
 8006e9e:	9208      	str	r2, [sp, #32]
 8006ea0:	bf54      	ite	pl
 8006ea2:	f04f 0800 	movpl.w	r8, #0
 8006ea6:	9308      	strmi	r3, [sp, #32]
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	db39      	blt.n	8006f20 <_dtoa_r+0x218>
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006eb0:	443b      	add	r3, r7
 8006eb2:	9308      	str	r3, [sp, #32]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d864      	bhi.n	8006f88 <_dtoa_r+0x280>
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	bfc4      	itt	gt
 8006ec2:	3b04      	subgt	r3, #4
 8006ec4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec8:	f1a3 0302 	sub.w	r3, r3, #2
 8006ecc:	bfcc      	ite	gt
 8006ece:	2400      	movgt	r4, #0
 8006ed0:	2401      	movle	r4, #1
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d863      	bhi.n	8006f9e <_dtoa_r+0x296>
 8006ed6:	e8df f003 	tbb	[pc, r3]
 8006eda:	372a      	.short	0x372a
 8006edc:	5535      	.short	0x5535
 8006ede:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ee2:	441e      	add	r6, r3
 8006ee4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	bfc1      	itttt	gt
 8006eec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ef0:	409f      	lslgt	r7, r3
 8006ef2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ef6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006efa:	bfd6      	itet	le
 8006efc:	f1c3 0320 	rsble	r3, r3, #32
 8006f00:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f04:	fa04 f003 	lslle.w	r0, r4, r3
 8006f08:	f7f9 fb04 	bl	8000514 <__aeabi_ui2d>
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f12:	3e01      	subs	r6, #1
 8006f14:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f16:	e777      	b.n	8006e08 <_dtoa_r+0x100>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e7b8      	b.n	8006e8e <_dtoa_r+0x186>
 8006f1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f1e:	e7b7      	b.n	8006e90 <_dtoa_r+0x188>
 8006f20:	427b      	negs	r3, r7
 8006f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f24:	2300      	movs	r3, #0
 8006f26:	eba8 0807 	sub.w	r8, r8, r7
 8006f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f2c:	e7c4      	b.n	8006eb8 <_dtoa_r+0x1b0>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dc35      	bgt.n	8006fa4 <_dtoa_r+0x29c>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	9307      	str	r3, [sp, #28]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f42:	e00b      	b.n	8006f5c <_dtoa_r+0x254>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e7f3      	b.n	8006f30 <_dtoa_r+0x228>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	bfb8      	it	lt
 8006f5a:	2301      	movlt	r3, #1
 8006f5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f60:	2100      	movs	r1, #0
 8006f62:	2204      	movs	r2, #4
 8006f64:	f102 0514 	add.w	r5, r2, #20
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	d91f      	bls.n	8006fac <_dtoa_r+0x2a4>
 8006f6c:	6041      	str	r1, [r0, #4]
 8006f6e:	4658      	mov	r0, fp
 8006f70:	f000 fd8e 	bl	8007a90 <_Balloc>
 8006f74:	4682      	mov	sl, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d13c      	bne.n	8006ff4 <_dtoa_r+0x2ec>
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe8 <_dtoa_r+0x2e0>)
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f82:	e6d8      	b.n	8006d36 <_dtoa_r+0x2e>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e7e0      	b.n	8006f4a <_dtoa_r+0x242>
 8006f88:	2401      	movs	r4, #1
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	9307      	str	r3, [sp, #28]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2312      	movs	r3, #18
 8006f9c:	e7d0      	b.n	8006f40 <_dtoa_r+0x238>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fa2:	e7f5      	b.n	8006f90 <_dtoa_r+0x288>
 8006fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	9307      	str	r3, [sp, #28]
 8006faa:	e7d7      	b.n	8006f5c <_dtoa_r+0x254>
 8006fac:	3101      	adds	r1, #1
 8006fae:	0052      	lsls	r2, r2, #1
 8006fb0:	e7d8      	b.n	8006f64 <_dtoa_r+0x25c>
 8006fb2:	bf00      	nop
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	636f4361 	.word	0x636f4361
 8006fbc:	3fd287a7 	.word	0x3fd287a7
 8006fc0:	8b60c8b3 	.word	0x8b60c8b3
 8006fc4:	3fc68a28 	.word	0x3fc68a28
 8006fc8:	509f79fb 	.word	0x509f79fb
 8006fcc:	3fd34413 	.word	0x3fd34413
 8006fd0:	08008af5 	.word	0x08008af5
 8006fd4:	08008b0c 	.word	0x08008b0c
 8006fd8:	7ff00000 	.word	0x7ff00000
 8006fdc:	08008ac5 	.word	0x08008ac5
 8006fe0:	3ff80000 	.word	0x3ff80000
 8006fe4:	08008c08 	.word	0x08008c08
 8006fe8:	08008b64 	.word	0x08008b64
 8006fec:	08008af1 	.word	0x08008af1
 8006ff0:	08008ac4 	.word	0x08008ac4
 8006ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ff8:	6018      	str	r0, [r3, #0]
 8006ffa:	9b07      	ldr	r3, [sp, #28]
 8006ffc:	2b0e      	cmp	r3, #14
 8006ffe:	f200 80a4 	bhi.w	800714a <_dtoa_r+0x442>
 8007002:	2c00      	cmp	r4, #0
 8007004:	f000 80a1 	beq.w	800714a <_dtoa_r+0x442>
 8007008:	2f00      	cmp	r7, #0
 800700a:	dd33      	ble.n	8007074 <_dtoa_r+0x36c>
 800700c:	4bad      	ldr	r3, [pc, #692]	@ (80072c4 <_dtoa_r+0x5bc>)
 800700e:	f007 020f 	and.w	r2, r7, #15
 8007012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007016:	ed93 7b00 	vldr	d7, [r3]
 800701a:	05f8      	lsls	r0, r7, #23
 800701c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007020:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007024:	d516      	bpl.n	8007054 <_dtoa_r+0x34c>
 8007026:	4ba8      	ldr	r3, [pc, #672]	@ (80072c8 <_dtoa_r+0x5c0>)
 8007028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800702c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007030:	f7f9 fc14 	bl	800085c <__aeabi_ddiv>
 8007034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007038:	f004 040f 	and.w	r4, r4, #15
 800703c:	2603      	movs	r6, #3
 800703e:	4da2      	ldr	r5, [pc, #648]	@ (80072c8 <_dtoa_r+0x5c0>)
 8007040:	b954      	cbnz	r4, 8007058 <_dtoa_r+0x350>
 8007042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704a:	f7f9 fc07 	bl	800085c <__aeabi_ddiv>
 800704e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007052:	e028      	b.n	80070a6 <_dtoa_r+0x39e>
 8007054:	2602      	movs	r6, #2
 8007056:	e7f2      	b.n	800703e <_dtoa_r+0x336>
 8007058:	07e1      	lsls	r1, r4, #31
 800705a:	d508      	bpl.n	800706e <_dtoa_r+0x366>
 800705c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007060:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007064:	f7f9 fad0 	bl	8000608 <__aeabi_dmul>
 8007068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800706c:	3601      	adds	r6, #1
 800706e:	1064      	asrs	r4, r4, #1
 8007070:	3508      	adds	r5, #8
 8007072:	e7e5      	b.n	8007040 <_dtoa_r+0x338>
 8007074:	f000 80d2 	beq.w	800721c <_dtoa_r+0x514>
 8007078:	427c      	negs	r4, r7
 800707a:	4b92      	ldr	r3, [pc, #584]	@ (80072c4 <_dtoa_r+0x5bc>)
 800707c:	4d92      	ldr	r5, [pc, #584]	@ (80072c8 <_dtoa_r+0x5c0>)
 800707e:	f004 020f 	and.w	r2, r4, #15
 8007082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800708e:	f7f9 fabb 	bl	8000608 <__aeabi_dmul>
 8007092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007096:	1124      	asrs	r4, r4, #4
 8007098:	2300      	movs	r3, #0
 800709a:	2602      	movs	r6, #2
 800709c:	2c00      	cmp	r4, #0
 800709e:	f040 80b2 	bne.w	8007206 <_dtoa_r+0x4fe>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1d3      	bne.n	800704e <_dtoa_r+0x346>
 80070a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80b7 	beq.w	8007220 <_dtoa_r+0x518>
 80070b2:	4b86      	ldr	r3, [pc, #536]	@ (80072cc <_dtoa_r+0x5c4>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fd17 	bl	8000aec <__aeabi_dcmplt>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f000 80ae 	beq.w	8007220 <_dtoa_r+0x518>
 80070c4:	9b07      	ldr	r3, [sp, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80aa 	beq.w	8007220 <_dtoa_r+0x518>
 80070cc:	9b00      	ldr	r3, [sp, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd37      	ble.n	8007142 <_dtoa_r+0x43a>
 80070d2:	1e7b      	subs	r3, r7, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	4620      	mov	r0, r4
 80070d8:	4b7d      	ldr	r3, [pc, #500]	@ (80072d0 <_dtoa_r+0x5c8>)
 80070da:	2200      	movs	r2, #0
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 fa93 	bl	8000608 <__aeabi_dmul>
 80070e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070e6:	9c00      	ldr	r4, [sp, #0]
 80070e8:	3601      	adds	r6, #1
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7f9 fa22 	bl	8000534 <__aeabi_i2d>
 80070f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070f4:	f7f9 fa88 	bl	8000608 <__aeabi_dmul>
 80070f8:	4b76      	ldr	r3, [pc, #472]	@ (80072d4 <_dtoa_r+0x5cc>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	f7f9 f8ce 	bl	800029c <__adddf3>
 8007100:	4605      	mov	r5, r0
 8007102:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007106:	2c00      	cmp	r4, #0
 8007108:	f040 808d 	bne.w	8007226 <_dtoa_r+0x51e>
 800710c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007110:	4b71      	ldr	r3, [pc, #452]	@ (80072d8 <_dtoa_r+0x5d0>)
 8007112:	2200      	movs	r2, #0
 8007114:	f7f9 f8c0 	bl	8000298 <__aeabi_dsub>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007120:	462a      	mov	r2, r5
 8007122:	4633      	mov	r3, r6
 8007124:	f7f9 fd00 	bl	8000b28 <__aeabi_dcmpgt>
 8007128:	2800      	cmp	r0, #0
 800712a:	f040 828b 	bne.w	8007644 <_dtoa_r+0x93c>
 800712e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007132:	462a      	mov	r2, r5
 8007134:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007138:	f7f9 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f040 8128 	bne.w	8007392 <_dtoa_r+0x68a>
 8007142:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007146:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800714a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800714c:	2b00      	cmp	r3, #0
 800714e:	f2c0 815a 	blt.w	8007406 <_dtoa_r+0x6fe>
 8007152:	2f0e      	cmp	r7, #14
 8007154:	f300 8157 	bgt.w	8007406 <_dtoa_r+0x6fe>
 8007158:	4b5a      	ldr	r3, [pc, #360]	@ (80072c4 <_dtoa_r+0x5bc>)
 800715a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800715e:	ed93 7b00 	vldr	d7, [r3]
 8007162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	ed8d 7b00 	vstr	d7, [sp]
 800716a:	da03      	bge.n	8007174 <_dtoa_r+0x46c>
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f340 8101 	ble.w	8007376 <_dtoa_r+0x66e>
 8007174:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007178:	4656      	mov	r6, sl
 800717a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fb6b 	bl	800085c <__aeabi_ddiv>
 8007186:	f7f9 fcef 	bl	8000b68 <__aeabi_d2iz>
 800718a:	4680      	mov	r8, r0
 800718c:	f7f9 f9d2 	bl	8000534 <__aeabi_i2d>
 8007190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007194:	f7f9 fa38 	bl	8000608 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4620      	mov	r0, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071a4:	f7f9 f878 	bl	8000298 <__aeabi_dsub>
 80071a8:	f806 4b01 	strb.w	r4, [r6], #1
 80071ac:	9d07      	ldr	r5, [sp, #28]
 80071ae:	eba6 040a 	sub.w	r4, r6, sl
 80071b2:	42a5      	cmp	r5, r4
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	f040 8117 	bne.w	80073ea <_dtoa_r+0x6e2>
 80071bc:	f7f9 f86e 	bl	800029c <__adddf3>
 80071c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c4:	4604      	mov	r4, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	f7f9 fcae 	bl	8000b28 <__aeabi_dcmpgt>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	f040 80f9 	bne.w	80073c4 <_dtoa_r+0x6bc>
 80071d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80071de:	b118      	cbz	r0, 80071e8 <_dtoa_r+0x4e0>
 80071e0:	f018 0f01 	tst.w	r8, #1
 80071e4:	f040 80ee 	bne.w	80073c4 <_dtoa_r+0x6bc>
 80071e8:	4649      	mov	r1, r9
 80071ea:	4658      	mov	r0, fp
 80071ec:	f000 fc90 	bl	8007b10 <_Bfree>
 80071f0:	2300      	movs	r3, #0
 80071f2:	7033      	strb	r3, [r6, #0]
 80071f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071f6:	3701      	adds	r7, #1
 80071f8:	601f      	str	r7, [r3, #0]
 80071fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 831d 	beq.w	800783c <_dtoa_r+0xb34>
 8007202:	601e      	str	r6, [r3, #0]
 8007204:	e31a      	b.n	800783c <_dtoa_r+0xb34>
 8007206:	07e2      	lsls	r2, r4, #31
 8007208:	d505      	bpl.n	8007216 <_dtoa_r+0x50e>
 800720a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800720e:	f7f9 f9fb 	bl	8000608 <__aeabi_dmul>
 8007212:	3601      	adds	r6, #1
 8007214:	2301      	movs	r3, #1
 8007216:	1064      	asrs	r4, r4, #1
 8007218:	3508      	adds	r5, #8
 800721a:	e73f      	b.n	800709c <_dtoa_r+0x394>
 800721c:	2602      	movs	r6, #2
 800721e:	e742      	b.n	80070a6 <_dtoa_r+0x39e>
 8007220:	9c07      	ldr	r4, [sp, #28]
 8007222:	9704      	str	r7, [sp, #16]
 8007224:	e761      	b.n	80070ea <_dtoa_r+0x3e2>
 8007226:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <_dtoa_r+0x5bc>)
 8007228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800722a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800722e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007232:	4454      	add	r4, sl
 8007234:	2900      	cmp	r1, #0
 8007236:	d053      	beq.n	80072e0 <_dtoa_r+0x5d8>
 8007238:	4928      	ldr	r1, [pc, #160]	@ (80072dc <_dtoa_r+0x5d4>)
 800723a:	2000      	movs	r0, #0
 800723c:	f7f9 fb0e 	bl	800085c <__aeabi_ddiv>
 8007240:	4633      	mov	r3, r6
 8007242:	462a      	mov	r2, r5
 8007244:	f7f9 f828 	bl	8000298 <__aeabi_dsub>
 8007248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800724c:	4656      	mov	r6, sl
 800724e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007252:	f7f9 fc89 	bl	8000b68 <__aeabi_d2iz>
 8007256:	4605      	mov	r5, r0
 8007258:	f7f9 f96c 	bl	8000534 <__aeabi_i2d>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007264:	f7f9 f818 	bl	8000298 <__aeabi_dsub>
 8007268:	3530      	adds	r5, #48	@ 0x30
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007272:	f806 5b01 	strb.w	r5, [r6], #1
 8007276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800727a:	f7f9 fc37 	bl	8000aec <__aeabi_dcmplt>
 800727e:	2800      	cmp	r0, #0
 8007280:	d171      	bne.n	8007366 <_dtoa_r+0x65e>
 8007282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007286:	4911      	ldr	r1, [pc, #68]	@ (80072cc <_dtoa_r+0x5c4>)
 8007288:	2000      	movs	r0, #0
 800728a:	f7f9 f805 	bl	8000298 <__aeabi_dsub>
 800728e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007292:	f7f9 fc2b 	bl	8000aec <__aeabi_dcmplt>
 8007296:	2800      	cmp	r0, #0
 8007298:	f040 8095 	bne.w	80073c6 <_dtoa_r+0x6be>
 800729c:	42a6      	cmp	r6, r4
 800729e:	f43f af50 	beq.w	8007142 <_dtoa_r+0x43a>
 80072a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072a6:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <_dtoa_r+0x5c8>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	f7f9 f9ad 	bl	8000608 <__aeabi_dmul>
 80072ae:	4b08      	ldr	r3, [pc, #32]	@ (80072d0 <_dtoa_r+0x5c8>)
 80072b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072b4:	2200      	movs	r2, #0
 80072b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ba:	f7f9 f9a5 	bl	8000608 <__aeabi_dmul>
 80072be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c2:	e7c4      	b.n	800724e <_dtoa_r+0x546>
 80072c4:	08008c08 	.word	0x08008c08
 80072c8:	08008be0 	.word	0x08008be0
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	40240000 	.word	0x40240000
 80072d4:	401c0000 	.word	0x401c0000
 80072d8:	40140000 	.word	0x40140000
 80072dc:	3fe00000 	.word	0x3fe00000
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	f7f9 f990 	bl	8000608 <__aeabi_dmul>
 80072e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80072ee:	4656      	mov	r6, sl
 80072f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f4:	f7f9 fc38 	bl	8000b68 <__aeabi_d2iz>
 80072f8:	4605      	mov	r5, r0
 80072fa:	f7f9 f91b 	bl	8000534 <__aeabi_i2d>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007306:	f7f8 ffc7 	bl	8000298 <__aeabi_dsub>
 800730a:	3530      	adds	r5, #48	@ 0x30
 800730c:	f806 5b01 	strb.w	r5, [r6], #1
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	42a6      	cmp	r6, r4
 8007316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	d124      	bne.n	800736a <_dtoa_r+0x662>
 8007320:	4bac      	ldr	r3, [pc, #688]	@ (80075d4 <_dtoa_r+0x8cc>)
 8007322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007326:	f7f8 ffb9 	bl	800029c <__adddf3>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007332:	f7f9 fbf9 	bl	8000b28 <__aeabi_dcmpgt>
 8007336:	2800      	cmp	r0, #0
 8007338:	d145      	bne.n	80073c6 <_dtoa_r+0x6be>
 800733a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800733e:	49a5      	ldr	r1, [pc, #660]	@ (80075d4 <_dtoa_r+0x8cc>)
 8007340:	2000      	movs	r0, #0
 8007342:	f7f8 ffa9 	bl	8000298 <__aeabi_dsub>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734e:	f7f9 fbcd 	bl	8000aec <__aeabi_dcmplt>
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f aef5 	beq.w	8007142 <_dtoa_r+0x43a>
 8007358:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800735a:	1e73      	subs	r3, r6, #1
 800735c:	9315      	str	r3, [sp, #84]	@ 0x54
 800735e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007362:	2b30      	cmp	r3, #48	@ 0x30
 8007364:	d0f8      	beq.n	8007358 <_dtoa_r+0x650>
 8007366:	9f04      	ldr	r7, [sp, #16]
 8007368:	e73e      	b.n	80071e8 <_dtoa_r+0x4e0>
 800736a:	4b9b      	ldr	r3, [pc, #620]	@ (80075d8 <_dtoa_r+0x8d0>)
 800736c:	f7f9 f94c 	bl	8000608 <__aeabi_dmul>
 8007370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007374:	e7bc      	b.n	80072f0 <_dtoa_r+0x5e8>
 8007376:	d10c      	bne.n	8007392 <_dtoa_r+0x68a>
 8007378:	4b98      	ldr	r3, [pc, #608]	@ (80075dc <_dtoa_r+0x8d4>)
 800737a:	2200      	movs	r2, #0
 800737c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007380:	f7f9 f942 	bl	8000608 <__aeabi_dmul>
 8007384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007388:	f7f9 fbc4 	bl	8000b14 <__aeabi_dcmpge>
 800738c:	2800      	cmp	r0, #0
 800738e:	f000 8157 	beq.w	8007640 <_dtoa_r+0x938>
 8007392:	2400      	movs	r4, #0
 8007394:	4625      	mov	r5, r4
 8007396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007398:	43db      	mvns	r3, r3
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	4656      	mov	r6, sl
 800739e:	2700      	movs	r7, #0
 80073a0:	4621      	mov	r1, r4
 80073a2:	4658      	mov	r0, fp
 80073a4:	f000 fbb4 	bl	8007b10 <_Bfree>
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	d0dc      	beq.n	8007366 <_dtoa_r+0x65e>
 80073ac:	b12f      	cbz	r7, 80073ba <_dtoa_r+0x6b2>
 80073ae:	42af      	cmp	r7, r5
 80073b0:	d003      	beq.n	80073ba <_dtoa_r+0x6b2>
 80073b2:	4639      	mov	r1, r7
 80073b4:	4658      	mov	r0, fp
 80073b6:	f000 fbab 	bl	8007b10 <_Bfree>
 80073ba:	4629      	mov	r1, r5
 80073bc:	4658      	mov	r0, fp
 80073be:	f000 fba7 	bl	8007b10 <_Bfree>
 80073c2:	e7d0      	b.n	8007366 <_dtoa_r+0x65e>
 80073c4:	9704      	str	r7, [sp, #16]
 80073c6:	4633      	mov	r3, r6
 80073c8:	461e      	mov	r6, r3
 80073ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ce:	2a39      	cmp	r2, #57	@ 0x39
 80073d0:	d107      	bne.n	80073e2 <_dtoa_r+0x6da>
 80073d2:	459a      	cmp	sl, r3
 80073d4:	d1f8      	bne.n	80073c8 <_dtoa_r+0x6c0>
 80073d6:	9a04      	ldr	r2, [sp, #16]
 80073d8:	3201      	adds	r2, #1
 80073da:	9204      	str	r2, [sp, #16]
 80073dc:	2230      	movs	r2, #48	@ 0x30
 80073de:	f88a 2000 	strb.w	r2, [sl]
 80073e2:	781a      	ldrb	r2, [r3, #0]
 80073e4:	3201      	adds	r2, #1
 80073e6:	701a      	strb	r2, [r3, #0]
 80073e8:	e7bd      	b.n	8007366 <_dtoa_r+0x65e>
 80073ea:	4b7b      	ldr	r3, [pc, #492]	@ (80075d8 <_dtoa_r+0x8d0>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	f7f9 f90b 	bl	8000608 <__aeabi_dmul>
 80073f2:	2200      	movs	r2, #0
 80073f4:	2300      	movs	r3, #0
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	f7f9 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aebb 	beq.w	800717a <_dtoa_r+0x472>
 8007404:	e6f0      	b.n	80071e8 <_dtoa_r+0x4e0>
 8007406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007408:	2a00      	cmp	r2, #0
 800740a:	f000 80db 	beq.w	80075c4 <_dtoa_r+0x8bc>
 800740e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007410:	2a01      	cmp	r2, #1
 8007412:	f300 80bf 	bgt.w	8007594 <_dtoa_r+0x88c>
 8007416:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007418:	2a00      	cmp	r2, #0
 800741a:	f000 80b7 	beq.w	800758c <_dtoa_r+0x884>
 800741e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007422:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007424:	4646      	mov	r6, r8
 8007426:	9a08      	ldr	r2, [sp, #32]
 8007428:	2101      	movs	r1, #1
 800742a:	441a      	add	r2, r3
 800742c:	4658      	mov	r0, fp
 800742e:	4498      	add	r8, r3
 8007430:	9208      	str	r2, [sp, #32]
 8007432:	f000 fc21 	bl	8007c78 <__i2b>
 8007436:	4605      	mov	r5, r0
 8007438:	b15e      	cbz	r6, 8007452 <_dtoa_r+0x74a>
 800743a:	9b08      	ldr	r3, [sp, #32]
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd08      	ble.n	8007452 <_dtoa_r+0x74a>
 8007440:	42b3      	cmp	r3, r6
 8007442:	9a08      	ldr	r2, [sp, #32]
 8007444:	bfa8      	it	ge
 8007446:	4633      	movge	r3, r6
 8007448:	eba8 0803 	sub.w	r8, r8, r3
 800744c:	1af6      	subs	r6, r6, r3
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	9308      	str	r3, [sp, #32]
 8007452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007454:	b1f3      	cbz	r3, 8007494 <_dtoa_r+0x78c>
 8007456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80b7 	beq.w	80075cc <_dtoa_r+0x8c4>
 800745e:	b18c      	cbz	r4, 8007484 <_dtoa_r+0x77c>
 8007460:	4629      	mov	r1, r5
 8007462:	4622      	mov	r2, r4
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fcc7 	bl	8007df8 <__pow5mult>
 800746a:	464a      	mov	r2, r9
 800746c:	4601      	mov	r1, r0
 800746e:	4605      	mov	r5, r0
 8007470:	4658      	mov	r0, fp
 8007472:	f000 fc17 	bl	8007ca4 <__multiply>
 8007476:	4649      	mov	r1, r9
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fb48 	bl	8007b10 <_Bfree>
 8007480:	9b04      	ldr	r3, [sp, #16]
 8007482:	4699      	mov	r9, r3
 8007484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007486:	1b1a      	subs	r2, r3, r4
 8007488:	d004      	beq.n	8007494 <_dtoa_r+0x78c>
 800748a:	4649      	mov	r1, r9
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fcb3 	bl	8007df8 <__pow5mult>
 8007492:	4681      	mov	r9, r0
 8007494:	2101      	movs	r1, #1
 8007496:	4658      	mov	r0, fp
 8007498:	f000 fbee 	bl	8007c78 <__i2b>
 800749c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749e:	4604      	mov	r4, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 81cf 	beq.w	8007844 <_dtoa_r+0xb3c>
 80074a6:	461a      	mov	r2, r3
 80074a8:	4601      	mov	r1, r0
 80074aa:	4658      	mov	r0, fp
 80074ac:	f000 fca4 	bl	8007df8 <__pow5mult>
 80074b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	4604      	mov	r4, r0
 80074b6:	f300 8095 	bgt.w	80075e4 <_dtoa_r+0x8dc>
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 8087 	bne.w	80075d0 <_dtoa_r+0x8c8>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 8089 	bne.w	80075e0 <_dtoa_r+0x8d8>
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074d4:	0d1b      	lsrs	r3, r3, #20
 80074d6:	051b      	lsls	r3, r3, #20
 80074d8:	b12b      	cbz	r3, 80074e6 <_dtoa_r+0x7de>
 80074da:	9b08      	ldr	r3, [sp, #32]
 80074dc:	3301      	adds	r3, #1
 80074de:	9308      	str	r3, [sp, #32]
 80074e0:	f108 0801 	add.w	r8, r8, #1
 80074e4:	2301      	movs	r3, #1
 80074e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 81b0 	beq.w	8007850 <_dtoa_r+0xb48>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074f6:	6918      	ldr	r0, [r3, #16]
 80074f8:	f000 fb72 	bl	8007be0 <__hi0bits>
 80074fc:	f1c0 0020 	rsb	r0, r0, #32
 8007500:	9b08      	ldr	r3, [sp, #32]
 8007502:	4418      	add	r0, r3
 8007504:	f010 001f 	ands.w	r0, r0, #31
 8007508:	d077      	beq.n	80075fa <_dtoa_r+0x8f2>
 800750a:	f1c0 0320 	rsb	r3, r0, #32
 800750e:	2b04      	cmp	r3, #4
 8007510:	dd6b      	ble.n	80075ea <_dtoa_r+0x8e2>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	f1c0 001c 	rsb	r0, r0, #28
 8007518:	4403      	add	r3, r0
 800751a:	4480      	add	r8, r0
 800751c:	4406      	add	r6, r0
 800751e:	9308      	str	r3, [sp, #32]
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	dd05      	ble.n	8007532 <_dtoa_r+0x82a>
 8007526:	4649      	mov	r1, r9
 8007528:	4642      	mov	r2, r8
 800752a:	4658      	mov	r0, fp
 800752c:	f000 fcbe 	bl	8007eac <__lshift>
 8007530:	4681      	mov	r9, r0
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dd05      	ble.n	8007544 <_dtoa_r+0x83c>
 8007538:	4621      	mov	r1, r4
 800753a:	461a      	mov	r2, r3
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fcb5 	bl	8007eac <__lshift>
 8007542:	4604      	mov	r4, r0
 8007544:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007546:	2b00      	cmp	r3, #0
 8007548:	d059      	beq.n	80075fe <_dtoa_r+0x8f6>
 800754a:	4621      	mov	r1, r4
 800754c:	4648      	mov	r0, r9
 800754e:	f000 fd19 	bl	8007f84 <__mcmp>
 8007552:	2800      	cmp	r0, #0
 8007554:	da53      	bge.n	80075fe <_dtoa_r+0x8f6>
 8007556:	1e7b      	subs	r3, r7, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	4649      	mov	r1, r9
 800755c:	2300      	movs	r3, #0
 800755e:	220a      	movs	r2, #10
 8007560:	4658      	mov	r0, fp
 8007562:	f000 faf7 	bl	8007b54 <__multadd>
 8007566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007568:	4681      	mov	r9, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8172 	beq.w	8007854 <_dtoa_r+0xb4c>
 8007570:	2300      	movs	r3, #0
 8007572:	4629      	mov	r1, r5
 8007574:	220a      	movs	r2, #10
 8007576:	4658      	mov	r0, fp
 8007578:	f000 faec 	bl	8007b54 <__multadd>
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	4605      	mov	r5, r0
 8007582:	dc67      	bgt.n	8007654 <_dtoa_r+0x94c>
 8007584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007586:	2b02      	cmp	r3, #2
 8007588:	dc41      	bgt.n	800760e <_dtoa_r+0x906>
 800758a:	e063      	b.n	8007654 <_dtoa_r+0x94c>
 800758c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800758e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007592:	e746      	b.n	8007422 <_dtoa_r+0x71a>
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	1e5c      	subs	r4, r3, #1
 8007598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800759a:	42a3      	cmp	r3, r4
 800759c:	bfbf      	itttt	lt
 800759e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80075a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80075a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80075a4:	1ae3      	sublt	r3, r4, r3
 80075a6:	bfb4      	ite	lt
 80075a8:	18d2      	addlt	r2, r2, r3
 80075aa:	1b1c      	subge	r4, r3, r4
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	bfbc      	itt	lt
 80075b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075b2:	2400      	movlt	r4, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfb5      	itete	lt
 80075b8:	eba8 0603 	sublt.w	r6, r8, r3
 80075bc:	9b07      	ldrge	r3, [sp, #28]
 80075be:	2300      	movlt	r3, #0
 80075c0:	4646      	movge	r6, r8
 80075c2:	e730      	b.n	8007426 <_dtoa_r+0x71e>
 80075c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075c8:	4646      	mov	r6, r8
 80075ca:	e735      	b.n	8007438 <_dtoa_r+0x730>
 80075cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ce:	e75c      	b.n	800748a <_dtoa_r+0x782>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e788      	b.n	80074e6 <_dtoa_r+0x7de>
 80075d4:	3fe00000 	.word	0x3fe00000
 80075d8:	40240000 	.word	0x40240000
 80075dc:	40140000 	.word	0x40140000
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	e780      	b.n	80074e6 <_dtoa_r+0x7de>
 80075e4:	2300      	movs	r3, #0
 80075e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e8:	e782      	b.n	80074f0 <_dtoa_r+0x7e8>
 80075ea:	d099      	beq.n	8007520 <_dtoa_r+0x818>
 80075ec:	9a08      	ldr	r2, [sp, #32]
 80075ee:	331c      	adds	r3, #28
 80075f0:	441a      	add	r2, r3
 80075f2:	4498      	add	r8, r3
 80075f4:	441e      	add	r6, r3
 80075f6:	9208      	str	r2, [sp, #32]
 80075f8:	e792      	b.n	8007520 <_dtoa_r+0x818>
 80075fa:	4603      	mov	r3, r0
 80075fc:	e7f6      	b.n	80075ec <_dtoa_r+0x8e4>
 80075fe:	9b07      	ldr	r3, [sp, #28]
 8007600:	9704      	str	r7, [sp, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc20      	bgt.n	8007648 <_dtoa_r+0x940>
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	2b02      	cmp	r3, #2
 800760c:	dd1e      	ble.n	800764c <_dtoa_r+0x944>
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f aec0 	bne.w	8007396 <_dtoa_r+0x68e>
 8007616:	4621      	mov	r1, r4
 8007618:	2205      	movs	r2, #5
 800761a:	4658      	mov	r0, fp
 800761c:	f000 fa9a 	bl	8007b54 <__multadd>
 8007620:	4601      	mov	r1, r0
 8007622:	4604      	mov	r4, r0
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fcad 	bl	8007f84 <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	f77f aeb3 	ble.w	8007396 <_dtoa_r+0x68e>
 8007630:	4656      	mov	r6, sl
 8007632:	2331      	movs	r3, #49	@ 0x31
 8007634:	f806 3b01 	strb.w	r3, [r6], #1
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	3301      	adds	r3, #1
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	e6ae      	b.n	800739e <_dtoa_r+0x696>
 8007640:	9c07      	ldr	r4, [sp, #28]
 8007642:	9704      	str	r7, [sp, #16]
 8007644:	4625      	mov	r5, r4
 8007646:	e7f3      	b.n	8007630 <_dtoa_r+0x928>
 8007648:	9b07      	ldr	r3, [sp, #28]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8104 	beq.w	800785c <_dtoa_r+0xb54>
 8007654:	2e00      	cmp	r6, #0
 8007656:	dd05      	ble.n	8007664 <_dtoa_r+0x95c>
 8007658:	4629      	mov	r1, r5
 800765a:	4632      	mov	r2, r6
 800765c:	4658      	mov	r0, fp
 800765e:	f000 fc25 	bl	8007eac <__lshift>
 8007662:	4605      	mov	r5, r0
 8007664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d05a      	beq.n	8007720 <_dtoa_r+0xa18>
 800766a:	6869      	ldr	r1, [r5, #4]
 800766c:	4658      	mov	r0, fp
 800766e:	f000 fa0f 	bl	8007a90 <_Balloc>
 8007672:	4606      	mov	r6, r0
 8007674:	b928      	cbnz	r0, 8007682 <_dtoa_r+0x97a>
 8007676:	4b84      	ldr	r3, [pc, #528]	@ (8007888 <_dtoa_r+0xb80>)
 8007678:	4602      	mov	r2, r0
 800767a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800767e:	f7ff bb5a 	b.w	8006d36 <_dtoa_r+0x2e>
 8007682:	692a      	ldr	r2, [r5, #16]
 8007684:	3202      	adds	r2, #2
 8007686:	0092      	lsls	r2, r2, #2
 8007688:	f105 010c 	add.w	r1, r5, #12
 800768c:	300c      	adds	r0, #12
 800768e:	f7ff faa2 	bl	8006bd6 <memcpy>
 8007692:	2201      	movs	r2, #1
 8007694:	4631      	mov	r1, r6
 8007696:	4658      	mov	r0, fp
 8007698:	f000 fc08 	bl	8007eac <__lshift>
 800769c:	f10a 0301 	add.w	r3, sl, #1
 80076a0:	9307      	str	r3, [sp, #28]
 80076a2:	9b00      	ldr	r3, [sp, #0]
 80076a4:	4453      	add	r3, sl
 80076a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	462f      	mov	r7, r5
 80076b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b2:	4605      	mov	r5, r0
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	4621      	mov	r1, r4
 80076b8:	3b01      	subs	r3, #1
 80076ba:	4648      	mov	r0, r9
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	f7ff fa98 	bl	8006bf2 <quorem>
 80076c2:	4639      	mov	r1, r7
 80076c4:	9002      	str	r0, [sp, #8]
 80076c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076ca:	4648      	mov	r0, r9
 80076cc:	f000 fc5a 	bl	8007f84 <__mcmp>
 80076d0:	462a      	mov	r2, r5
 80076d2:	9008      	str	r0, [sp, #32]
 80076d4:	4621      	mov	r1, r4
 80076d6:	4658      	mov	r0, fp
 80076d8:	f000 fc70 	bl	8007fbc <__mdiff>
 80076dc:	68c2      	ldr	r2, [r0, #12]
 80076de:	4606      	mov	r6, r0
 80076e0:	bb02      	cbnz	r2, 8007724 <_dtoa_r+0xa1c>
 80076e2:	4601      	mov	r1, r0
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 fc4d 	bl	8007f84 <__mcmp>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4631      	mov	r1, r6
 80076ee:	4658      	mov	r0, fp
 80076f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076f2:	f000 fa0d 	bl	8007b10 <_Bfree>
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076fa:	9e07      	ldr	r6, [sp, #28]
 80076fc:	ea43 0102 	orr.w	r1, r3, r2
 8007700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007702:	4319      	orrs	r1, r3
 8007704:	d110      	bne.n	8007728 <_dtoa_r+0xa20>
 8007706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800770a:	d029      	beq.n	8007760 <_dtoa_r+0xa58>
 800770c:	9b08      	ldr	r3, [sp, #32]
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd02      	ble.n	8007718 <_dtoa_r+0xa10>
 8007712:	9b02      	ldr	r3, [sp, #8]
 8007714:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	f883 8000 	strb.w	r8, [r3]
 800771e:	e63f      	b.n	80073a0 <_dtoa_r+0x698>
 8007720:	4628      	mov	r0, r5
 8007722:	e7bb      	b.n	800769c <_dtoa_r+0x994>
 8007724:	2201      	movs	r2, #1
 8007726:	e7e1      	b.n	80076ec <_dtoa_r+0x9e4>
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	2b00      	cmp	r3, #0
 800772c:	db04      	blt.n	8007738 <_dtoa_r+0xa30>
 800772e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007730:	430b      	orrs	r3, r1
 8007732:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007734:	430b      	orrs	r3, r1
 8007736:	d120      	bne.n	800777a <_dtoa_r+0xa72>
 8007738:	2a00      	cmp	r2, #0
 800773a:	dded      	ble.n	8007718 <_dtoa_r+0xa10>
 800773c:	4649      	mov	r1, r9
 800773e:	2201      	movs	r2, #1
 8007740:	4658      	mov	r0, fp
 8007742:	f000 fbb3 	bl	8007eac <__lshift>
 8007746:	4621      	mov	r1, r4
 8007748:	4681      	mov	r9, r0
 800774a:	f000 fc1b 	bl	8007f84 <__mcmp>
 800774e:	2800      	cmp	r0, #0
 8007750:	dc03      	bgt.n	800775a <_dtoa_r+0xa52>
 8007752:	d1e1      	bne.n	8007718 <_dtoa_r+0xa10>
 8007754:	f018 0f01 	tst.w	r8, #1
 8007758:	d0de      	beq.n	8007718 <_dtoa_r+0xa10>
 800775a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800775e:	d1d8      	bne.n	8007712 <_dtoa_r+0xa0a>
 8007760:	9a00      	ldr	r2, [sp, #0]
 8007762:	2339      	movs	r3, #57	@ 0x39
 8007764:	7013      	strb	r3, [r2, #0]
 8007766:	4633      	mov	r3, r6
 8007768:	461e      	mov	r6, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007770:	2a39      	cmp	r2, #57	@ 0x39
 8007772:	d052      	beq.n	800781a <_dtoa_r+0xb12>
 8007774:	3201      	adds	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e612      	b.n	80073a0 <_dtoa_r+0x698>
 800777a:	2a00      	cmp	r2, #0
 800777c:	dd07      	ble.n	800778e <_dtoa_r+0xa86>
 800777e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007782:	d0ed      	beq.n	8007760 <_dtoa_r+0xa58>
 8007784:	9a00      	ldr	r2, [sp, #0]
 8007786:	f108 0301 	add.w	r3, r8, #1
 800778a:	7013      	strb	r3, [r2, #0]
 800778c:	e608      	b.n	80073a0 <_dtoa_r+0x698>
 800778e:	9b07      	ldr	r3, [sp, #28]
 8007790:	9a07      	ldr	r2, [sp, #28]
 8007792:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007798:	4293      	cmp	r3, r2
 800779a:	d028      	beq.n	80077ee <_dtoa_r+0xae6>
 800779c:	4649      	mov	r1, r9
 800779e:	2300      	movs	r3, #0
 80077a0:	220a      	movs	r2, #10
 80077a2:	4658      	mov	r0, fp
 80077a4:	f000 f9d6 	bl	8007b54 <__multadd>
 80077a8:	42af      	cmp	r7, r5
 80077aa:	4681      	mov	r9, r0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	f04f 020a 	mov.w	r2, #10
 80077b4:	4639      	mov	r1, r7
 80077b6:	4658      	mov	r0, fp
 80077b8:	d107      	bne.n	80077ca <_dtoa_r+0xac2>
 80077ba:	f000 f9cb 	bl	8007b54 <__multadd>
 80077be:	4607      	mov	r7, r0
 80077c0:	4605      	mov	r5, r0
 80077c2:	9b07      	ldr	r3, [sp, #28]
 80077c4:	3301      	adds	r3, #1
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	e774      	b.n	80076b4 <_dtoa_r+0x9ac>
 80077ca:	f000 f9c3 	bl	8007b54 <__multadd>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4607      	mov	r7, r0
 80077d2:	2300      	movs	r3, #0
 80077d4:	220a      	movs	r2, #10
 80077d6:	4658      	mov	r0, fp
 80077d8:	f000 f9bc 	bl	8007b54 <__multadd>
 80077dc:	4605      	mov	r5, r0
 80077de:	e7f0      	b.n	80077c2 <_dtoa_r+0xaba>
 80077e0:	9b00      	ldr	r3, [sp, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfcc      	ite	gt
 80077e6:	461e      	movgt	r6, r3
 80077e8:	2601      	movle	r6, #1
 80077ea:	4456      	add	r6, sl
 80077ec:	2700      	movs	r7, #0
 80077ee:	4649      	mov	r1, r9
 80077f0:	2201      	movs	r2, #1
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fb5a 	bl	8007eac <__lshift>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4681      	mov	r9, r0
 80077fc:	f000 fbc2 	bl	8007f84 <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	dcb0      	bgt.n	8007766 <_dtoa_r+0xa5e>
 8007804:	d102      	bne.n	800780c <_dtoa_r+0xb04>
 8007806:	f018 0f01 	tst.w	r8, #1
 800780a:	d1ac      	bne.n	8007766 <_dtoa_r+0xa5e>
 800780c:	4633      	mov	r3, r6
 800780e:	461e      	mov	r6, r3
 8007810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007814:	2a30      	cmp	r2, #48	@ 0x30
 8007816:	d0fa      	beq.n	800780e <_dtoa_r+0xb06>
 8007818:	e5c2      	b.n	80073a0 <_dtoa_r+0x698>
 800781a:	459a      	cmp	sl, r3
 800781c:	d1a4      	bne.n	8007768 <_dtoa_r+0xa60>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	2331      	movs	r3, #49	@ 0x31
 8007826:	f88a 3000 	strb.w	r3, [sl]
 800782a:	e5b9      	b.n	80073a0 <_dtoa_r+0x698>
 800782c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800782e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800788c <_dtoa_r+0xb84>
 8007832:	b11b      	cbz	r3, 800783c <_dtoa_r+0xb34>
 8007834:	f10a 0308 	add.w	r3, sl, #8
 8007838:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4650      	mov	r0, sl
 800783e:	b019      	add	sp, #100	@ 0x64
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007846:	2b01      	cmp	r3, #1
 8007848:	f77f ae37 	ble.w	80074ba <_dtoa_r+0x7b2>
 800784c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800784e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007850:	2001      	movs	r0, #1
 8007852:	e655      	b.n	8007500 <_dtoa_r+0x7f8>
 8007854:	9b00      	ldr	r3, [sp, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f77f aed6 	ble.w	8007608 <_dtoa_r+0x900>
 800785c:	4656      	mov	r6, sl
 800785e:	4621      	mov	r1, r4
 8007860:	4648      	mov	r0, r9
 8007862:	f7ff f9c6 	bl	8006bf2 <quorem>
 8007866:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800786a:	f806 8b01 	strb.w	r8, [r6], #1
 800786e:	9b00      	ldr	r3, [sp, #0]
 8007870:	eba6 020a 	sub.w	r2, r6, sl
 8007874:	4293      	cmp	r3, r2
 8007876:	ddb3      	ble.n	80077e0 <_dtoa_r+0xad8>
 8007878:	4649      	mov	r1, r9
 800787a:	2300      	movs	r3, #0
 800787c:	220a      	movs	r2, #10
 800787e:	4658      	mov	r0, fp
 8007880:	f000 f968 	bl	8007b54 <__multadd>
 8007884:	4681      	mov	r9, r0
 8007886:	e7ea      	b.n	800785e <_dtoa_r+0xb56>
 8007888:	08008b64 	.word	0x08008b64
 800788c:	08008ae8 	.word	0x08008ae8

08007890 <_free_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	d041      	beq.n	800791c <_free_r+0x8c>
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f0c      	subs	r4, r1, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	18e4      	addlt	r4, r4, r3
 80078a4:	f000 f8e8 	bl	8007a78 <__malloc_lock>
 80078a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <_free_r+0x90>)
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	b933      	cbnz	r3, 80078bc <_free_r+0x2c>
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	6014      	str	r4, [r2, #0]
 80078b2:	4628      	mov	r0, r5
 80078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b8:	f000 b8e4 	b.w	8007a84 <__malloc_unlock>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d908      	bls.n	80078d2 <_free_r+0x42>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf01      	itttt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	e7ed      	b.n	80078ae <_free_r+0x1e>
 80078d2:	461a      	mov	r2, r3
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b10b      	cbz	r3, 80078dc <_free_r+0x4c>
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d9fa      	bls.n	80078d2 <_free_r+0x42>
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	1850      	adds	r0, r2, r1
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d10b      	bne.n	80078fc <_free_r+0x6c>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	4401      	add	r1, r0
 80078e8:	1850      	adds	r0, r2, r1
 80078ea:	4283      	cmp	r3, r0
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	d1e0      	bne.n	80078b2 <_free_r+0x22>
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	6053      	str	r3, [r2, #4]
 80078f6:	4408      	add	r0, r1
 80078f8:	6010      	str	r0, [r2, #0]
 80078fa:	e7da      	b.n	80078b2 <_free_r+0x22>
 80078fc:	d902      	bls.n	8007904 <_free_r+0x74>
 80078fe:	230c      	movs	r3, #12
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	e7d6      	b.n	80078b2 <_free_r+0x22>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	1821      	adds	r1, r4, r0
 8007908:	428b      	cmp	r3, r1
 800790a:	bf04      	itt	eq
 800790c:	6819      	ldreq	r1, [r3, #0]
 800790e:	685b      	ldreq	r3, [r3, #4]
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	bf04      	itt	eq
 8007914:	1809      	addeq	r1, r1, r0
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	6054      	str	r4, [r2, #4]
 800791a:	e7ca      	b.n	80078b2 <_free_r+0x22>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	20002a90 	.word	0x20002a90

08007924 <malloc>:
 8007924:	4b02      	ldr	r3, [pc, #8]	@ (8007930 <malloc+0xc>)
 8007926:	4601      	mov	r1, r0
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	f000 b825 	b.w	8007978 <_malloc_r>
 800792e:	bf00      	nop
 8007930:	20000020 	.word	0x20000020

08007934 <sbrk_aligned>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4e0f      	ldr	r6, [pc, #60]	@ (8007974 <sbrk_aligned+0x40>)
 8007938:	460c      	mov	r4, r1
 800793a:	6831      	ldr	r1, [r6, #0]
 800793c:	4605      	mov	r5, r0
 800793e:	b911      	cbnz	r1, 8007946 <sbrk_aligned+0x12>
 8007940:	f000 fcd4 	bl	80082ec <_sbrk_r>
 8007944:	6030      	str	r0, [r6, #0]
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	f000 fccf 	bl	80082ec <_sbrk_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d103      	bne.n	800795a <sbrk_aligned+0x26>
 8007952:	f04f 34ff 	mov.w	r4, #4294967295
 8007956:	4620      	mov	r0, r4
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	1cc4      	adds	r4, r0, #3
 800795c:	f024 0403 	bic.w	r4, r4, #3
 8007960:	42a0      	cmp	r0, r4
 8007962:	d0f8      	beq.n	8007956 <sbrk_aligned+0x22>
 8007964:	1a21      	subs	r1, r4, r0
 8007966:	4628      	mov	r0, r5
 8007968:	f000 fcc0 	bl	80082ec <_sbrk_r>
 800796c:	3001      	adds	r0, #1
 800796e:	d1f2      	bne.n	8007956 <sbrk_aligned+0x22>
 8007970:	e7ef      	b.n	8007952 <sbrk_aligned+0x1e>
 8007972:	bf00      	nop
 8007974:	20002a8c 	.word	0x20002a8c

08007978 <_malloc_r>:
 8007978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800797c:	1ccd      	adds	r5, r1, #3
 800797e:	f025 0503 	bic.w	r5, r5, #3
 8007982:	3508      	adds	r5, #8
 8007984:	2d0c      	cmp	r5, #12
 8007986:	bf38      	it	cc
 8007988:	250c      	movcc	r5, #12
 800798a:	2d00      	cmp	r5, #0
 800798c:	4606      	mov	r6, r0
 800798e:	db01      	blt.n	8007994 <_malloc_r+0x1c>
 8007990:	42a9      	cmp	r1, r5
 8007992:	d904      	bls.n	800799e <_malloc_r+0x26>
 8007994:	230c      	movs	r3, #12
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	2000      	movs	r0, #0
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a74 <_malloc_r+0xfc>
 80079a2:	f000 f869 	bl	8007a78 <__malloc_lock>
 80079a6:	f8d8 3000 	ldr.w	r3, [r8]
 80079aa:	461c      	mov	r4, r3
 80079ac:	bb44      	cbnz	r4, 8007a00 <_malloc_r+0x88>
 80079ae:	4629      	mov	r1, r5
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff ffbf 	bl	8007934 <sbrk_aligned>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	4604      	mov	r4, r0
 80079ba:	d158      	bne.n	8007a6e <_malloc_r+0xf6>
 80079bc:	f8d8 4000 	ldr.w	r4, [r8]
 80079c0:	4627      	mov	r7, r4
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	d143      	bne.n	8007a4e <_malloc_r+0xd6>
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	d04b      	beq.n	8007a62 <_malloc_r+0xea>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	4639      	mov	r1, r7
 80079ce:	4630      	mov	r0, r6
 80079d0:	eb04 0903 	add.w	r9, r4, r3
 80079d4:	f000 fc8a 	bl	80082ec <_sbrk_r>
 80079d8:	4581      	cmp	r9, r0
 80079da:	d142      	bne.n	8007a62 <_malloc_r+0xea>
 80079dc:	6821      	ldr	r1, [r4, #0]
 80079de:	1a6d      	subs	r5, r5, r1
 80079e0:	4629      	mov	r1, r5
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ffa6 	bl	8007934 <sbrk_aligned>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d03a      	beq.n	8007a62 <_malloc_r+0xea>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	442b      	add	r3, r5
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	f8d8 3000 	ldr.w	r3, [r8]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	bb62      	cbnz	r2, 8007a54 <_malloc_r+0xdc>
 80079fa:	f8c8 7000 	str.w	r7, [r8]
 80079fe:	e00f      	b.n	8007a20 <_malloc_r+0xa8>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	1b52      	subs	r2, r2, r5
 8007a04:	d420      	bmi.n	8007a48 <_malloc_r+0xd0>
 8007a06:	2a0b      	cmp	r2, #11
 8007a08:	d917      	bls.n	8007a3a <_malloc_r+0xc2>
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	6025      	str	r5, [r4, #0]
 8007a10:	bf18      	it	ne
 8007a12:	6059      	strne	r1, [r3, #4]
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	bf08      	it	eq
 8007a18:	f8c8 1000 	streq.w	r1, [r8]
 8007a1c:	5162      	str	r2, [r4, r5]
 8007a1e:	604b      	str	r3, [r1, #4]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f82f 	bl	8007a84 <__malloc_unlock>
 8007a26:	f104 000b 	add.w	r0, r4, #11
 8007a2a:	1d23      	adds	r3, r4, #4
 8007a2c:	f020 0007 	bic.w	r0, r0, #7
 8007a30:	1ac2      	subs	r2, r0, r3
 8007a32:	bf1c      	itt	ne
 8007a34:	1a1b      	subne	r3, r3, r0
 8007a36:	50a3      	strne	r3, [r4, r2]
 8007a38:	e7af      	b.n	800799a <_malloc_r+0x22>
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	bf0c      	ite	eq
 8007a40:	f8c8 2000 	streq.w	r2, [r8]
 8007a44:	605a      	strne	r2, [r3, #4]
 8007a46:	e7eb      	b.n	8007a20 <_malloc_r+0xa8>
 8007a48:	4623      	mov	r3, r4
 8007a4a:	6864      	ldr	r4, [r4, #4]
 8007a4c:	e7ae      	b.n	80079ac <_malloc_r+0x34>
 8007a4e:	463c      	mov	r4, r7
 8007a50:	687f      	ldr	r7, [r7, #4]
 8007a52:	e7b6      	b.n	80079c2 <_malloc_r+0x4a>
 8007a54:	461a      	mov	r2, r3
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d1fb      	bne.n	8007a54 <_malloc_r+0xdc>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	6053      	str	r3, [r2, #4]
 8007a60:	e7de      	b.n	8007a20 <_malloc_r+0xa8>
 8007a62:	230c      	movs	r3, #12
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 f80c 	bl	8007a84 <__malloc_unlock>
 8007a6c:	e794      	b.n	8007998 <_malloc_r+0x20>
 8007a6e:	6005      	str	r5, [r0, #0]
 8007a70:	e7d6      	b.n	8007a20 <_malloc_r+0xa8>
 8007a72:	bf00      	nop
 8007a74:	20002a90 	.word	0x20002a90

08007a78 <__malloc_lock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	@ (8007a80 <__malloc_lock+0x8>)
 8007a7a:	f7ff b8aa 	b.w	8006bd2 <__retarget_lock_acquire_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20002a88 	.word	0x20002a88

08007a84 <__malloc_unlock>:
 8007a84:	4801      	ldr	r0, [pc, #4]	@ (8007a8c <__malloc_unlock+0x8>)
 8007a86:	f7ff b8a5 	b.w	8006bd4 <__retarget_lock_release_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20002a88 	.word	0x20002a88

08007a90 <_Balloc>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	69c6      	ldr	r6, [r0, #28]
 8007a94:	4604      	mov	r4, r0
 8007a96:	460d      	mov	r5, r1
 8007a98:	b976      	cbnz	r6, 8007ab8 <_Balloc+0x28>
 8007a9a:	2010      	movs	r0, #16
 8007a9c:	f7ff ff42 	bl	8007924 <malloc>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	61e0      	str	r0, [r4, #28]
 8007aa4:	b920      	cbnz	r0, 8007ab0 <_Balloc+0x20>
 8007aa6:	4b18      	ldr	r3, [pc, #96]	@ (8007b08 <_Balloc+0x78>)
 8007aa8:	4818      	ldr	r0, [pc, #96]	@ (8007b0c <_Balloc+0x7c>)
 8007aaa:	216b      	movs	r1, #107	@ 0x6b
 8007aac:	f000 fc2e 	bl	800830c <__assert_func>
 8007ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ab4:	6006      	str	r6, [r0, #0]
 8007ab6:	60c6      	str	r6, [r0, #12]
 8007ab8:	69e6      	ldr	r6, [r4, #28]
 8007aba:	68f3      	ldr	r3, [r6, #12]
 8007abc:	b183      	cbz	r3, 8007ae0 <_Balloc+0x50>
 8007abe:	69e3      	ldr	r3, [r4, #28]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ac6:	b9b8      	cbnz	r0, 8007af8 <_Balloc+0x68>
 8007ac8:	2101      	movs	r1, #1
 8007aca:	fa01 f605 	lsl.w	r6, r1, r5
 8007ace:	1d72      	adds	r2, r6, #5
 8007ad0:	0092      	lsls	r2, r2, #2
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fc38 	bl	8008348 <_calloc_r>
 8007ad8:	b160      	cbz	r0, 8007af4 <_Balloc+0x64>
 8007ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ade:	e00e      	b.n	8007afe <_Balloc+0x6e>
 8007ae0:	2221      	movs	r2, #33	@ 0x21
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fc2f 	bl	8008348 <_calloc_r>
 8007aea:	69e3      	ldr	r3, [r4, #28]
 8007aec:	60f0      	str	r0, [r6, #12]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e4      	bne.n	8007abe <_Balloc+0x2e>
 8007af4:	2000      	movs	r0, #0
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	6802      	ldr	r2, [r0, #0]
 8007afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007afe:	2300      	movs	r3, #0
 8007b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b04:	e7f7      	b.n	8007af6 <_Balloc+0x66>
 8007b06:	bf00      	nop
 8007b08:	08008af5 	.word	0x08008af5
 8007b0c:	08008b75 	.word	0x08008b75

08007b10 <_Bfree>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	69c6      	ldr	r6, [r0, #28]
 8007b14:	4605      	mov	r5, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	b976      	cbnz	r6, 8007b38 <_Bfree+0x28>
 8007b1a:	2010      	movs	r0, #16
 8007b1c:	f7ff ff02 	bl	8007924 <malloc>
 8007b20:	4602      	mov	r2, r0
 8007b22:	61e8      	str	r0, [r5, #28]
 8007b24:	b920      	cbnz	r0, 8007b30 <_Bfree+0x20>
 8007b26:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <_Bfree+0x3c>)
 8007b28:	4809      	ldr	r0, [pc, #36]	@ (8007b50 <_Bfree+0x40>)
 8007b2a:	218f      	movs	r1, #143	@ 0x8f
 8007b2c:	f000 fbee 	bl	800830c <__assert_func>
 8007b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b34:	6006      	str	r6, [r0, #0]
 8007b36:	60c6      	str	r6, [r0, #12]
 8007b38:	b13c      	cbz	r4, 8007b4a <_Bfree+0x3a>
 8007b3a:	69eb      	ldr	r3, [r5, #28]
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b44:	6021      	str	r1, [r4, #0]
 8007b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	08008af5 	.word	0x08008af5
 8007b50:	08008b75 	.word	0x08008b75

08007b54 <__multadd>:
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	690d      	ldr	r5, [r1, #16]
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	461e      	mov	r6, r3
 8007b60:	f101 0c14 	add.w	ip, r1, #20
 8007b64:	2000      	movs	r0, #0
 8007b66:	f8dc 3000 	ldr.w	r3, [ip]
 8007b6a:	b299      	uxth	r1, r3
 8007b6c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b70:	0c1e      	lsrs	r6, r3, #16
 8007b72:	0c0b      	lsrs	r3, r1, #16
 8007b74:	fb02 3306 	mla	r3, r2, r6, r3
 8007b78:	b289      	uxth	r1, r1
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b80:	4285      	cmp	r5, r0
 8007b82:	f84c 1b04 	str.w	r1, [ip], #4
 8007b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b8a:	dcec      	bgt.n	8007b66 <__multadd+0x12>
 8007b8c:	b30e      	cbz	r6, 8007bd2 <__multadd+0x7e>
 8007b8e:	68a3      	ldr	r3, [r4, #8]
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dc19      	bgt.n	8007bc8 <__multadd+0x74>
 8007b94:	6861      	ldr	r1, [r4, #4]
 8007b96:	4638      	mov	r0, r7
 8007b98:	3101      	adds	r1, #1
 8007b9a:	f7ff ff79 	bl	8007a90 <_Balloc>
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <__multadd+0x5a>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <__multadd+0x84>)
 8007ba6:	480d      	ldr	r0, [pc, #52]	@ (8007bdc <__multadd+0x88>)
 8007ba8:	21ba      	movs	r1, #186	@ 0xba
 8007baa:	f000 fbaf 	bl	800830c <__assert_func>
 8007bae:	6922      	ldr	r2, [r4, #16]
 8007bb0:	3202      	adds	r2, #2
 8007bb2:	f104 010c 	add.w	r1, r4, #12
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	300c      	adds	r0, #12
 8007bba:	f7ff f80c 	bl	8006bd6 <memcpy>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ffa5 	bl	8007b10 <_Bfree>
 8007bc6:	4644      	mov	r4, r8
 8007bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bcc:	3501      	adds	r5, #1
 8007bce:	615e      	str	r6, [r3, #20]
 8007bd0:	6125      	str	r5, [r4, #16]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd8:	08008b64 	.word	0x08008b64
 8007bdc:	08008b75 	.word	0x08008b75

08007be0 <__hi0bits>:
 8007be0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007be4:	4603      	mov	r3, r0
 8007be6:	bf36      	itet	cc
 8007be8:	0403      	lslcc	r3, r0, #16
 8007bea:	2000      	movcs	r0, #0
 8007bec:	2010      	movcc	r0, #16
 8007bee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bf2:	bf3c      	itt	cc
 8007bf4:	021b      	lslcc	r3, r3, #8
 8007bf6:	3008      	addcc	r0, #8
 8007bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bfc:	bf3c      	itt	cc
 8007bfe:	011b      	lslcc	r3, r3, #4
 8007c00:	3004      	addcc	r0, #4
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c06:	bf3c      	itt	cc
 8007c08:	009b      	lslcc	r3, r3, #2
 8007c0a:	3002      	addcc	r0, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	db05      	blt.n	8007c1c <__hi0bits+0x3c>
 8007c10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c14:	f100 0001 	add.w	r0, r0, #1
 8007c18:	bf08      	it	eq
 8007c1a:	2020      	moveq	r0, #32
 8007c1c:	4770      	bx	lr

08007c1e <__lo0bits>:
 8007c1e:	6803      	ldr	r3, [r0, #0]
 8007c20:	4602      	mov	r2, r0
 8007c22:	f013 0007 	ands.w	r0, r3, #7
 8007c26:	d00b      	beq.n	8007c40 <__lo0bits+0x22>
 8007c28:	07d9      	lsls	r1, r3, #31
 8007c2a:	d421      	bmi.n	8007c70 <__lo0bits+0x52>
 8007c2c:	0798      	lsls	r0, r3, #30
 8007c2e:	bf49      	itett	mi
 8007c30:	085b      	lsrmi	r3, r3, #1
 8007c32:	089b      	lsrpl	r3, r3, #2
 8007c34:	2001      	movmi	r0, #1
 8007c36:	6013      	strmi	r3, [r2, #0]
 8007c38:	bf5c      	itt	pl
 8007c3a:	6013      	strpl	r3, [r2, #0]
 8007c3c:	2002      	movpl	r0, #2
 8007c3e:	4770      	bx	lr
 8007c40:	b299      	uxth	r1, r3
 8007c42:	b909      	cbnz	r1, 8007c48 <__lo0bits+0x2a>
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	2010      	movs	r0, #16
 8007c48:	b2d9      	uxtb	r1, r3
 8007c4a:	b909      	cbnz	r1, 8007c50 <__lo0bits+0x32>
 8007c4c:	3008      	adds	r0, #8
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	0719      	lsls	r1, r3, #28
 8007c52:	bf04      	itt	eq
 8007c54:	091b      	lsreq	r3, r3, #4
 8007c56:	3004      	addeq	r0, #4
 8007c58:	0799      	lsls	r1, r3, #30
 8007c5a:	bf04      	itt	eq
 8007c5c:	089b      	lsreq	r3, r3, #2
 8007c5e:	3002      	addeq	r0, #2
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d403      	bmi.n	8007c6c <__lo0bits+0x4e>
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	f100 0001 	add.w	r0, r0, #1
 8007c6a:	d003      	beq.n	8007c74 <__lo0bits+0x56>
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	4770      	bx	lr
 8007c70:	2000      	movs	r0, #0
 8007c72:	4770      	bx	lr
 8007c74:	2020      	movs	r0, #32
 8007c76:	4770      	bx	lr

08007c78 <__i2b>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	f7ff ff07 	bl	8007a90 <_Balloc>
 8007c82:	4602      	mov	r2, r0
 8007c84:	b928      	cbnz	r0, 8007c92 <__i2b+0x1a>
 8007c86:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <__i2b+0x24>)
 8007c88:	4805      	ldr	r0, [pc, #20]	@ (8007ca0 <__i2b+0x28>)
 8007c8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007c8e:	f000 fb3d 	bl	800830c <__assert_func>
 8007c92:	2301      	movs	r3, #1
 8007c94:	6144      	str	r4, [r0, #20]
 8007c96:	6103      	str	r3, [r0, #16]
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08008b64 	.word	0x08008b64
 8007ca0:	08008b75 	.word	0x08008b75

08007ca4 <__multiply>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	4614      	mov	r4, r2
 8007caa:	690a      	ldr	r2, [r1, #16]
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	bfa8      	it	ge
 8007cb2:	4623      	movge	r3, r4
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	bfa4      	itt	ge
 8007cb8:	460c      	movge	r4, r1
 8007cba:	461f      	movge	r7, r3
 8007cbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	6861      	ldr	r1, [r4, #4]
 8007cc8:	eb0a 0609 	add.w	r6, sl, r9
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	b085      	sub	sp, #20
 8007cd0:	bfb8      	it	lt
 8007cd2:	3101      	addlt	r1, #1
 8007cd4:	f7ff fedc 	bl	8007a90 <_Balloc>
 8007cd8:	b930      	cbnz	r0, 8007ce8 <__multiply+0x44>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b44      	ldr	r3, [pc, #272]	@ (8007df0 <__multiply+0x14c>)
 8007cde:	4845      	ldr	r0, [pc, #276]	@ (8007df4 <__multiply+0x150>)
 8007ce0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ce4:	f000 fb12 	bl	800830c <__assert_func>
 8007ce8:	f100 0514 	add.w	r5, r0, #20
 8007cec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4543      	cmp	r3, r8
 8007cf6:	d321      	bcc.n	8007d3c <__multiply+0x98>
 8007cf8:	f107 0114 	add.w	r1, r7, #20
 8007cfc:	f104 0214 	add.w	r2, r4, #20
 8007d00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d08:	9302      	str	r3, [sp, #8]
 8007d0a:	1b13      	subs	r3, r2, r4
 8007d0c:	3b15      	subs	r3, #21
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	3304      	adds	r3, #4
 8007d14:	f104 0715 	add.w	r7, r4, #21
 8007d18:	42ba      	cmp	r2, r7
 8007d1a:	bf38      	it	cc
 8007d1c:	2304      	movcc	r3, #4
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	9103      	str	r1, [sp, #12]
 8007d24:	428b      	cmp	r3, r1
 8007d26:	d80c      	bhi.n	8007d42 <__multiply+0x9e>
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	dd03      	ble.n	8007d34 <__multiply+0x90>
 8007d2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05b      	beq.n	8007dec <__multiply+0x148>
 8007d34:	6106      	str	r6, [r0, #16]
 8007d36:	b005      	add	sp, #20
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	f843 2b04 	str.w	r2, [r3], #4
 8007d40:	e7d8      	b.n	8007cf4 <__multiply+0x50>
 8007d42:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d46:	f1ba 0f00 	cmp.w	sl, #0
 8007d4a:	d024      	beq.n	8007d96 <__multiply+0xf2>
 8007d4c:	f104 0e14 	add.w	lr, r4, #20
 8007d50:	46a9      	mov	r9, r5
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007d5e:	fa1f fb87 	uxth.w	fp, r7
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d6c:	f8d9 7000 	ldr.w	r7, [r9]
 8007d70:	4463      	add	r3, ip
 8007d72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d76:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d84:	4572      	cmp	r2, lr
 8007d86:	f849 3b04 	str.w	r3, [r9], #4
 8007d8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d8e:	d8e2      	bhi.n	8007d56 <__multiply+0xb2>
 8007d90:	9b01      	ldr	r3, [sp, #4]
 8007d92:	f845 c003 	str.w	ip, [r5, r3]
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d9c:	3104      	adds	r1, #4
 8007d9e:	f1b9 0f00 	cmp.w	r9, #0
 8007da2:	d021      	beq.n	8007de8 <__multiply+0x144>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	f104 0c14 	add.w	ip, r4, #20
 8007daa:	46ae      	mov	lr, r5
 8007dac:	f04f 0a00 	mov.w	sl, #0
 8007db0:	f8bc b000 	ldrh.w	fp, [ip]
 8007db4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007db8:	fb09 770b 	mla	r7, r9, fp, r7
 8007dbc:	4457      	add	r7, sl
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dc4:	f84e 3b04 	str.w	r3, [lr], #4
 8007dc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dd0:	f8be 3000 	ldrh.w	r3, [lr]
 8007dd4:	fb09 330a 	mla	r3, r9, sl, r3
 8007dd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ddc:	4562      	cmp	r2, ip
 8007dde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007de2:	d8e5      	bhi.n	8007db0 <__multiply+0x10c>
 8007de4:	9f01      	ldr	r7, [sp, #4]
 8007de6:	51eb      	str	r3, [r5, r7]
 8007de8:	3504      	adds	r5, #4
 8007dea:	e799      	b.n	8007d20 <__multiply+0x7c>
 8007dec:	3e01      	subs	r6, #1
 8007dee:	e79b      	b.n	8007d28 <__multiply+0x84>
 8007df0:	08008b64 	.word	0x08008b64
 8007df4:	08008b75 	.word	0x08008b75

08007df8 <__pow5mult>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	f012 0203 	ands.w	r2, r2, #3
 8007e02:	4607      	mov	r7, r0
 8007e04:	460e      	mov	r6, r1
 8007e06:	d007      	beq.n	8007e18 <__pow5mult+0x20>
 8007e08:	4c25      	ldr	r4, [pc, #148]	@ (8007ea0 <__pow5mult+0xa8>)
 8007e0a:	3a01      	subs	r2, #1
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e12:	f7ff fe9f 	bl	8007b54 <__multadd>
 8007e16:	4606      	mov	r6, r0
 8007e18:	10ad      	asrs	r5, r5, #2
 8007e1a:	d03d      	beq.n	8007e98 <__pow5mult+0xa0>
 8007e1c:	69fc      	ldr	r4, [r7, #28]
 8007e1e:	b97c      	cbnz	r4, 8007e40 <__pow5mult+0x48>
 8007e20:	2010      	movs	r0, #16
 8007e22:	f7ff fd7f 	bl	8007924 <malloc>
 8007e26:	4602      	mov	r2, r0
 8007e28:	61f8      	str	r0, [r7, #28]
 8007e2a:	b928      	cbnz	r0, 8007e38 <__pow5mult+0x40>
 8007e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea4 <__pow5mult+0xac>)
 8007e2e:	481e      	ldr	r0, [pc, #120]	@ (8007ea8 <__pow5mult+0xb0>)
 8007e30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e34:	f000 fa6a 	bl	800830c <__assert_func>
 8007e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e3c:	6004      	str	r4, [r0, #0]
 8007e3e:	60c4      	str	r4, [r0, #12]
 8007e40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e48:	b94c      	cbnz	r4, 8007e5e <__pow5mult+0x66>
 8007e4a:	f240 2171 	movw	r1, #625	@ 0x271
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f7ff ff12 	bl	8007c78 <__i2b>
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	f04f 0900 	mov.w	r9, #0
 8007e62:	07eb      	lsls	r3, r5, #31
 8007e64:	d50a      	bpl.n	8007e7c <__pow5mult+0x84>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	f7ff ff1a 	bl	8007ca4 <__multiply>
 8007e70:	4631      	mov	r1, r6
 8007e72:	4680      	mov	r8, r0
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff fe4b 	bl	8007b10 <_Bfree>
 8007e7a:	4646      	mov	r6, r8
 8007e7c:	106d      	asrs	r5, r5, #1
 8007e7e:	d00b      	beq.n	8007e98 <__pow5mult+0xa0>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	b938      	cbnz	r0, 8007e94 <__pow5mult+0x9c>
 8007e84:	4622      	mov	r2, r4
 8007e86:	4621      	mov	r1, r4
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ff0b 	bl	8007ca4 <__multiply>
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	f8c0 9000 	str.w	r9, [r0]
 8007e94:	4604      	mov	r4, r0
 8007e96:	e7e4      	b.n	8007e62 <__pow5mult+0x6a>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08008bd0 	.word	0x08008bd0
 8007ea4:	08008af5 	.word	0x08008af5
 8007ea8:	08008b75 	.word	0x08008b75

08007eac <__lshift>:
 8007eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	6849      	ldr	r1, [r1, #4]
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4691      	mov	r9, r2
 8007ec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec4:	f108 0601 	add.w	r6, r8, #1
 8007ec8:	42b3      	cmp	r3, r6
 8007eca:	db0b      	blt.n	8007ee4 <__lshift+0x38>
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff fddf 	bl	8007a90 <_Balloc>
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	b948      	cbnz	r0, 8007eea <__lshift+0x3e>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <__lshift+0xd0>)
 8007eda:	4829      	ldr	r0, [pc, #164]	@ (8007f80 <__lshift+0xd4>)
 8007edc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ee0:	f000 fa14 	bl	800830c <__assert_func>
 8007ee4:	3101      	adds	r1, #1
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	e7ee      	b.n	8007ec8 <__lshift+0x1c>
 8007eea:	2300      	movs	r3, #0
 8007eec:	f100 0114 	add.w	r1, r0, #20
 8007ef0:	f100 0210 	add.w	r2, r0, #16
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	4553      	cmp	r3, sl
 8007ef8:	db33      	blt.n	8007f62 <__lshift+0xb6>
 8007efa:	6920      	ldr	r0, [r4, #16]
 8007efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f00:	f104 0314 	add.w	r3, r4, #20
 8007f04:	f019 091f 	ands.w	r9, r9, #31
 8007f08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f10:	d02b      	beq.n	8007f6a <__lshift+0xbe>
 8007f12:	f1c9 0e20 	rsb	lr, r9, #32
 8007f16:	468a      	mov	sl, r1
 8007f18:	2200      	movs	r2, #0
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f20:	4310      	orrs	r0, r2
 8007f22:	f84a 0b04 	str.w	r0, [sl], #4
 8007f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f2a:	459c      	cmp	ip, r3
 8007f2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f30:	d8f3      	bhi.n	8007f1a <__lshift+0x6e>
 8007f32:	ebac 0304 	sub.w	r3, ip, r4
 8007f36:	3b15      	subs	r3, #21
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	f104 0015 	add.w	r0, r4, #21
 8007f42:	4584      	cmp	ip, r0
 8007f44:	bf38      	it	cc
 8007f46:	2304      	movcc	r3, #4
 8007f48:	50ca      	str	r2, [r1, r3]
 8007f4a:	b10a      	cbz	r2, 8007f50 <__lshift+0xa4>
 8007f4c:	f108 0602 	add.w	r6, r8, #2
 8007f50:	3e01      	subs	r6, #1
 8007f52:	4638      	mov	r0, r7
 8007f54:	612e      	str	r6, [r5, #16]
 8007f56:	4621      	mov	r1, r4
 8007f58:	f7ff fdda 	bl	8007b10 <_Bfree>
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f66:	3301      	adds	r3, #1
 8007f68:	e7c5      	b.n	8007ef6 <__lshift+0x4a>
 8007f6a:	3904      	subs	r1, #4
 8007f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f74:	459c      	cmp	ip, r3
 8007f76:	d8f9      	bhi.n	8007f6c <__lshift+0xc0>
 8007f78:	e7ea      	b.n	8007f50 <__lshift+0xa4>
 8007f7a:	bf00      	nop
 8007f7c:	08008b64 	.word	0x08008b64
 8007f80:	08008b75 	.word	0x08008b75

08007f84 <__mcmp>:
 8007f84:	690a      	ldr	r2, [r1, #16]
 8007f86:	4603      	mov	r3, r0
 8007f88:	6900      	ldr	r0, [r0, #16]
 8007f8a:	1a80      	subs	r0, r0, r2
 8007f8c:	b530      	push	{r4, r5, lr}
 8007f8e:	d10e      	bne.n	8007fae <__mcmp+0x2a>
 8007f90:	3314      	adds	r3, #20
 8007f92:	3114      	adds	r1, #20
 8007f94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fa4:	4295      	cmp	r5, r2
 8007fa6:	d003      	beq.n	8007fb0 <__mcmp+0x2c>
 8007fa8:	d205      	bcs.n	8007fb6 <__mcmp+0x32>
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d3f3      	bcc.n	8007f9c <__mcmp+0x18>
 8007fb4:	e7fb      	b.n	8007fae <__mcmp+0x2a>
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7f9      	b.n	8007fae <__mcmp+0x2a>
	...

08007fbc <__mdiff>:
 8007fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	4689      	mov	r9, r1
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	4614      	mov	r4, r2
 8007fca:	f7ff ffdb 	bl	8007f84 <__mcmp>
 8007fce:	1e05      	subs	r5, r0, #0
 8007fd0:	d112      	bne.n	8007ff8 <__mdiff+0x3c>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff fd5b 	bl	8007a90 <_Balloc>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	b928      	cbnz	r0, 8007fea <__mdiff+0x2e>
 8007fde:	4b3f      	ldr	r3, [pc, #252]	@ (80080dc <__mdiff+0x120>)
 8007fe0:	f240 2137 	movw	r1, #567	@ 0x237
 8007fe4:	483e      	ldr	r0, [pc, #248]	@ (80080e0 <__mdiff+0x124>)
 8007fe6:	f000 f991 	bl	800830c <__assert_func>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	b003      	add	sp, #12
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	bfbc      	itt	lt
 8007ffa:	464b      	movlt	r3, r9
 8007ffc:	46a1      	movlt	r9, r4
 8007ffe:	4630      	mov	r0, r6
 8008000:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008004:	bfba      	itte	lt
 8008006:	461c      	movlt	r4, r3
 8008008:	2501      	movlt	r5, #1
 800800a:	2500      	movge	r5, #0
 800800c:	f7ff fd40 	bl	8007a90 <_Balloc>
 8008010:	4602      	mov	r2, r0
 8008012:	b918      	cbnz	r0, 800801c <__mdiff+0x60>
 8008014:	4b31      	ldr	r3, [pc, #196]	@ (80080dc <__mdiff+0x120>)
 8008016:	f240 2145 	movw	r1, #581	@ 0x245
 800801a:	e7e3      	b.n	8007fe4 <__mdiff+0x28>
 800801c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008020:	6926      	ldr	r6, [r4, #16]
 8008022:	60c5      	str	r5, [r0, #12]
 8008024:	f109 0310 	add.w	r3, r9, #16
 8008028:	f109 0514 	add.w	r5, r9, #20
 800802c:	f104 0e14 	add.w	lr, r4, #20
 8008030:	f100 0b14 	add.w	fp, r0, #20
 8008034:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008038:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	46d9      	mov	r9, fp
 8008040:	f04f 0c00 	mov.w	ip, #0
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	f85e 0b04 	ldr.w	r0, [lr], #4
 800804a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	fa1f f38a 	uxth.w	r3, sl
 8008054:	4619      	mov	r1, r3
 8008056:	b283      	uxth	r3, r0
 8008058:	1acb      	subs	r3, r1, r3
 800805a:	0c00      	lsrs	r0, r0, #16
 800805c:	4463      	add	r3, ip
 800805e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008062:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008066:	b29b      	uxth	r3, r3
 8008068:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800806c:	4576      	cmp	r6, lr
 800806e:	f849 3b04 	str.w	r3, [r9], #4
 8008072:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008076:	d8e5      	bhi.n	8008044 <__mdiff+0x88>
 8008078:	1b33      	subs	r3, r6, r4
 800807a:	3b15      	subs	r3, #21
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	3415      	adds	r4, #21
 8008082:	3304      	adds	r3, #4
 8008084:	42a6      	cmp	r6, r4
 8008086:	bf38      	it	cc
 8008088:	2304      	movcc	r3, #4
 800808a:	441d      	add	r5, r3
 800808c:	445b      	add	r3, fp
 800808e:	461e      	mov	r6, r3
 8008090:	462c      	mov	r4, r5
 8008092:	4544      	cmp	r4, r8
 8008094:	d30e      	bcc.n	80080b4 <__mdiff+0xf8>
 8008096:	f108 0103 	add.w	r1, r8, #3
 800809a:	1b49      	subs	r1, r1, r5
 800809c:	f021 0103 	bic.w	r1, r1, #3
 80080a0:	3d03      	subs	r5, #3
 80080a2:	45a8      	cmp	r8, r5
 80080a4:	bf38      	it	cc
 80080a6:	2100      	movcc	r1, #0
 80080a8:	440b      	add	r3, r1
 80080aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ae:	b191      	cbz	r1, 80080d6 <__mdiff+0x11a>
 80080b0:	6117      	str	r7, [r2, #16]
 80080b2:	e79d      	b.n	8007ff0 <__mdiff+0x34>
 80080b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80080b8:	46e6      	mov	lr, ip
 80080ba:	0c08      	lsrs	r0, r1, #16
 80080bc:	fa1c fc81 	uxtah	ip, ip, r1
 80080c0:	4471      	add	r1, lr
 80080c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080c6:	b289      	uxth	r1, r1
 80080c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080cc:	f846 1b04 	str.w	r1, [r6], #4
 80080d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080d4:	e7dd      	b.n	8008092 <__mdiff+0xd6>
 80080d6:	3f01      	subs	r7, #1
 80080d8:	e7e7      	b.n	80080aa <__mdiff+0xee>
 80080da:	bf00      	nop
 80080dc:	08008b64 	.word	0x08008b64
 80080e0:	08008b75 	.word	0x08008b75

080080e4 <__d2b>:
 80080e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	460f      	mov	r7, r1
 80080ea:	2101      	movs	r1, #1
 80080ec:	ec59 8b10 	vmov	r8, r9, d0
 80080f0:	4616      	mov	r6, r2
 80080f2:	f7ff fccd 	bl	8007a90 <_Balloc>
 80080f6:	4604      	mov	r4, r0
 80080f8:	b930      	cbnz	r0, 8008108 <__d2b+0x24>
 80080fa:	4602      	mov	r2, r0
 80080fc:	4b23      	ldr	r3, [pc, #140]	@ (800818c <__d2b+0xa8>)
 80080fe:	4824      	ldr	r0, [pc, #144]	@ (8008190 <__d2b+0xac>)
 8008100:	f240 310f 	movw	r1, #783	@ 0x30f
 8008104:	f000 f902 	bl	800830c <__assert_func>
 8008108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800810c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008110:	b10d      	cbz	r5, 8008116 <__d2b+0x32>
 8008112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	f1b8 0300 	subs.w	r3, r8, #0
 800811c:	d023      	beq.n	8008166 <__d2b+0x82>
 800811e:	4668      	mov	r0, sp
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	f7ff fd7c 	bl	8007c1e <__lo0bits>
 8008126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800812a:	b1d0      	cbz	r0, 8008162 <__d2b+0x7e>
 800812c:	f1c0 0320 	rsb	r3, r0, #32
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	430b      	orrs	r3, r1
 8008136:	40c2      	lsrs	r2, r0
 8008138:	6163      	str	r3, [r4, #20]
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	61a3      	str	r3, [r4, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf0c      	ite	eq
 8008144:	2201      	moveq	r2, #1
 8008146:	2202      	movne	r2, #2
 8008148:	6122      	str	r2, [r4, #16]
 800814a:	b1a5      	cbz	r5, 8008176 <__d2b+0x92>
 800814c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008150:	4405      	add	r5, r0
 8008152:	603d      	str	r5, [r7, #0]
 8008154:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008158:	6030      	str	r0, [r6, #0]
 800815a:	4620      	mov	r0, r4
 800815c:	b003      	add	sp, #12
 800815e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008162:	6161      	str	r1, [r4, #20]
 8008164:	e7ea      	b.n	800813c <__d2b+0x58>
 8008166:	a801      	add	r0, sp, #4
 8008168:	f7ff fd59 	bl	8007c1e <__lo0bits>
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	3020      	adds	r0, #32
 8008172:	2201      	movs	r2, #1
 8008174:	e7e8      	b.n	8008148 <__d2b+0x64>
 8008176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800817a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800817e:	6038      	str	r0, [r7, #0]
 8008180:	6918      	ldr	r0, [r3, #16]
 8008182:	f7ff fd2d 	bl	8007be0 <__hi0bits>
 8008186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800818a:	e7e5      	b.n	8008158 <__d2b+0x74>
 800818c:	08008b64 	.word	0x08008b64
 8008190:	08008b75 	.word	0x08008b75

08008194 <__sflush_r>:
 8008194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819c:	0716      	lsls	r6, r2, #28
 800819e:	4605      	mov	r5, r0
 80081a0:	460c      	mov	r4, r1
 80081a2:	d454      	bmi.n	800824e <__sflush_r+0xba>
 80081a4:	684b      	ldr	r3, [r1, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dc02      	bgt.n	80081b0 <__sflush_r+0x1c>
 80081aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd48      	ble.n	8008242 <__sflush_r+0xae>
 80081b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	d045      	beq.n	8008242 <__sflush_r+0xae>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081bc:	682f      	ldr	r7, [r5, #0]
 80081be:	6a21      	ldr	r1, [r4, #32]
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	d030      	beq.n	8008226 <__sflush_r+0x92>
 80081c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	0759      	lsls	r1, r3, #29
 80081ca:	d505      	bpl.n	80081d8 <__sflush_r+0x44>
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081d2:	b10b      	cbz	r3, 80081d8 <__sflush_r+0x44>
 80081d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081d6:	1ad2      	subs	r2, r2, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081dc:	6a21      	ldr	r1, [r4, #32]
 80081de:	4628      	mov	r0, r5
 80081e0:	47b0      	blx	r6
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	d106      	bne.n	80081f6 <__sflush_r+0x62>
 80081e8:	6829      	ldr	r1, [r5, #0]
 80081ea:	291d      	cmp	r1, #29
 80081ec:	d82b      	bhi.n	8008246 <__sflush_r+0xb2>
 80081ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008298 <__sflush_r+0x104>)
 80081f0:	410a      	asrs	r2, r1
 80081f2:	07d6      	lsls	r6, r2, #31
 80081f4:	d427      	bmi.n	8008246 <__sflush_r+0xb2>
 80081f6:	2200      	movs	r2, #0
 80081f8:	6062      	str	r2, [r4, #4]
 80081fa:	04d9      	lsls	r1, r3, #19
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	d504      	bpl.n	800820c <__sflush_r+0x78>
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	d101      	bne.n	800820a <__sflush_r+0x76>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b903      	cbnz	r3, 800820c <__sflush_r+0x78>
 800820a:	6560      	str	r0, [r4, #84]	@ 0x54
 800820c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	b1b9      	cbz	r1, 8008242 <__sflush_r+0xae>
 8008212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008216:	4299      	cmp	r1, r3
 8008218:	d002      	beq.n	8008220 <__sflush_r+0x8c>
 800821a:	4628      	mov	r0, r5
 800821c:	f7ff fb38 	bl	8007890 <_free_r>
 8008220:	2300      	movs	r3, #0
 8008222:	6363      	str	r3, [r4, #52]	@ 0x34
 8008224:	e00d      	b.n	8008242 <__sflush_r+0xae>
 8008226:	2301      	movs	r3, #1
 8008228:	4628      	mov	r0, r5
 800822a:	47b0      	blx	r6
 800822c:	4602      	mov	r2, r0
 800822e:	1c50      	adds	r0, r2, #1
 8008230:	d1c9      	bne.n	80081c6 <__sflush_r+0x32>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0c6      	beq.n	80081c6 <__sflush_r+0x32>
 8008238:	2b1d      	cmp	r3, #29
 800823a:	d001      	beq.n	8008240 <__sflush_r+0xac>
 800823c:	2b16      	cmp	r3, #22
 800823e:	d11e      	bne.n	800827e <__sflush_r+0xea>
 8008240:	602f      	str	r7, [r5, #0]
 8008242:	2000      	movs	r0, #0
 8008244:	e022      	b.n	800828c <__sflush_r+0xf8>
 8008246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824a:	b21b      	sxth	r3, r3
 800824c:	e01b      	b.n	8008286 <__sflush_r+0xf2>
 800824e:	690f      	ldr	r7, [r1, #16]
 8008250:	2f00      	cmp	r7, #0
 8008252:	d0f6      	beq.n	8008242 <__sflush_r+0xae>
 8008254:	0793      	lsls	r3, r2, #30
 8008256:	680e      	ldr	r6, [r1, #0]
 8008258:	bf08      	it	eq
 800825a:	694b      	ldreq	r3, [r1, #20]
 800825c:	600f      	str	r7, [r1, #0]
 800825e:	bf18      	it	ne
 8008260:	2300      	movne	r3, #0
 8008262:	eba6 0807 	sub.w	r8, r6, r7
 8008266:	608b      	str	r3, [r1, #8]
 8008268:	f1b8 0f00 	cmp.w	r8, #0
 800826c:	dde9      	ble.n	8008242 <__sflush_r+0xae>
 800826e:	6a21      	ldr	r1, [r4, #32]
 8008270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008272:	4643      	mov	r3, r8
 8008274:	463a      	mov	r2, r7
 8008276:	4628      	mov	r0, r5
 8008278:	47b0      	blx	r6
 800827a:	2800      	cmp	r0, #0
 800827c:	dc08      	bgt.n	8008290 <__sflush_r+0xfc>
 800827e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008290:	4407      	add	r7, r0
 8008292:	eba8 0800 	sub.w	r8, r8, r0
 8008296:	e7e7      	b.n	8008268 <__sflush_r+0xd4>
 8008298:	dfbffffe 	.word	0xdfbffffe

0800829c <_fflush_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b913      	cbnz	r3, 80082ac <_fflush_r+0x10>
 80082a6:	2500      	movs	r5, #0
 80082a8:	4628      	mov	r0, r5
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	b118      	cbz	r0, 80082b6 <_fflush_r+0x1a>
 80082ae:	6a03      	ldr	r3, [r0, #32]
 80082b0:	b90b      	cbnz	r3, 80082b6 <_fflush_r+0x1a>
 80082b2:	f7fe fb97 	bl	80069e4 <__sinit>
 80082b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f3      	beq.n	80082a6 <_fflush_r+0xa>
 80082be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082c0:	07d0      	lsls	r0, r2, #31
 80082c2:	d404      	bmi.n	80082ce <_fflush_r+0x32>
 80082c4:	0599      	lsls	r1, r3, #22
 80082c6:	d402      	bmi.n	80082ce <_fflush_r+0x32>
 80082c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ca:	f7fe fc82 	bl	8006bd2 <__retarget_lock_acquire_recursive>
 80082ce:	4628      	mov	r0, r5
 80082d0:	4621      	mov	r1, r4
 80082d2:	f7ff ff5f 	bl	8008194 <__sflush_r>
 80082d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082d8:	07da      	lsls	r2, r3, #31
 80082da:	4605      	mov	r5, r0
 80082dc:	d4e4      	bmi.n	80082a8 <_fflush_r+0xc>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	059b      	lsls	r3, r3, #22
 80082e2:	d4e1      	bmi.n	80082a8 <_fflush_r+0xc>
 80082e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082e6:	f7fe fc75 	bl	8006bd4 <__retarget_lock_release_recursive>
 80082ea:	e7dd      	b.n	80082a8 <_fflush_r+0xc>

080082ec <_sbrk_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d06      	ldr	r5, [pc, #24]	@ (8008308 <_sbrk_r+0x1c>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7f9 fffc 	bl	80022f4 <_sbrk>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_sbrk_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_sbrk_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20002a84 	.word	0x20002a84

0800830c <__assert_func>:
 800830c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800830e:	4614      	mov	r4, r2
 8008310:	461a      	mov	r2, r3
 8008312:	4b09      	ldr	r3, [pc, #36]	@ (8008338 <__assert_func+0x2c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4605      	mov	r5, r0
 8008318:	68d8      	ldr	r0, [r3, #12]
 800831a:	b954      	cbnz	r4, 8008332 <__assert_func+0x26>
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <__assert_func+0x30>)
 800831e:	461c      	mov	r4, r3
 8008320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008324:	9100      	str	r1, [sp, #0]
 8008326:	462b      	mov	r3, r5
 8008328:	4905      	ldr	r1, [pc, #20]	@ (8008340 <__assert_func+0x34>)
 800832a:	f000 f841 	bl	80083b0 <fiprintf>
 800832e:	f000 f851 	bl	80083d4 <abort>
 8008332:	4b04      	ldr	r3, [pc, #16]	@ (8008344 <__assert_func+0x38>)
 8008334:	e7f4      	b.n	8008320 <__assert_func+0x14>
 8008336:	bf00      	nop
 8008338:	20000020 	.word	0x20000020
 800833c:	08008d15 	.word	0x08008d15
 8008340:	08008ce7 	.word	0x08008ce7
 8008344:	08008cda 	.word	0x08008cda

08008348 <_calloc_r>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	fba1 5402 	umull	r5, r4, r1, r2
 800834e:	b93c      	cbnz	r4, 8008360 <_calloc_r+0x18>
 8008350:	4629      	mov	r1, r5
 8008352:	f7ff fb11 	bl	8007978 <_malloc_r>
 8008356:	4606      	mov	r6, r0
 8008358:	b928      	cbnz	r0, 8008366 <_calloc_r+0x1e>
 800835a:	2600      	movs	r6, #0
 800835c:	4630      	mov	r0, r6
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	220c      	movs	r2, #12
 8008362:	6002      	str	r2, [r0, #0]
 8008364:	e7f9      	b.n	800835a <_calloc_r+0x12>
 8008366:	462a      	mov	r2, r5
 8008368:	4621      	mov	r1, r4
 800836a:	f7fe fbb4 	bl	8006ad6 <memset>
 800836e:	e7f5      	b.n	800835c <_calloc_r+0x14>

08008370 <__ascii_mbtowc>:
 8008370:	b082      	sub	sp, #8
 8008372:	b901      	cbnz	r1, 8008376 <__ascii_mbtowc+0x6>
 8008374:	a901      	add	r1, sp, #4
 8008376:	b142      	cbz	r2, 800838a <__ascii_mbtowc+0x1a>
 8008378:	b14b      	cbz	r3, 800838e <__ascii_mbtowc+0x1e>
 800837a:	7813      	ldrb	r3, [r2, #0]
 800837c:	600b      	str	r3, [r1, #0]
 800837e:	7812      	ldrb	r2, [r2, #0]
 8008380:	1e10      	subs	r0, r2, #0
 8008382:	bf18      	it	ne
 8008384:	2001      	movne	r0, #1
 8008386:	b002      	add	sp, #8
 8008388:	4770      	bx	lr
 800838a:	4610      	mov	r0, r2
 800838c:	e7fb      	b.n	8008386 <__ascii_mbtowc+0x16>
 800838e:	f06f 0001 	mvn.w	r0, #1
 8008392:	e7f8      	b.n	8008386 <__ascii_mbtowc+0x16>

08008394 <__ascii_wctomb>:
 8008394:	4603      	mov	r3, r0
 8008396:	4608      	mov	r0, r1
 8008398:	b141      	cbz	r1, 80083ac <__ascii_wctomb+0x18>
 800839a:	2aff      	cmp	r2, #255	@ 0xff
 800839c:	d904      	bls.n	80083a8 <__ascii_wctomb+0x14>
 800839e:	228a      	movs	r2, #138	@ 0x8a
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	f04f 30ff 	mov.w	r0, #4294967295
 80083a6:	4770      	bx	lr
 80083a8:	700a      	strb	r2, [r1, #0]
 80083aa:	2001      	movs	r0, #1
 80083ac:	4770      	bx	lr
	...

080083b0 <fiprintf>:
 80083b0:	b40e      	push	{r1, r2, r3}
 80083b2:	b503      	push	{r0, r1, lr}
 80083b4:	4601      	mov	r1, r0
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	4805      	ldr	r0, [pc, #20]	@ (80083d0 <fiprintf+0x20>)
 80083ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80083be:	6800      	ldr	r0, [r0, #0]
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	f000 f837 	bl	8008434 <_vfiprintf_r>
 80083c6:	b002      	add	sp, #8
 80083c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083cc:	b003      	add	sp, #12
 80083ce:	4770      	bx	lr
 80083d0:	20000020 	.word	0x20000020

080083d4 <abort>:
 80083d4:	b508      	push	{r3, lr}
 80083d6:	2006      	movs	r0, #6
 80083d8:	f000 fa00 	bl	80087dc <raise>
 80083dc:	2001      	movs	r0, #1
 80083de:	f7f9 ff11 	bl	8002204 <_exit>

080083e2 <__sfputc_r>:
 80083e2:	6893      	ldr	r3, [r2, #8]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	b410      	push	{r4}
 80083ea:	6093      	str	r3, [r2, #8]
 80083ec:	da08      	bge.n	8008400 <__sfputc_r+0x1e>
 80083ee:	6994      	ldr	r4, [r2, #24]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	db01      	blt.n	80083f8 <__sfputc_r+0x16>
 80083f4:	290a      	cmp	r1, #10
 80083f6:	d103      	bne.n	8008400 <__sfputc_r+0x1e>
 80083f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fc:	f000 b932 	b.w	8008664 <__swbuf_r>
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	1c58      	adds	r0, r3, #1
 8008404:	6010      	str	r0, [r2, #0]
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	4608      	mov	r0, r1
 800840a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840e:	4770      	bx	lr

08008410 <__sfputs_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	4614      	mov	r4, r2
 8008418:	18d5      	adds	r5, r2, r3
 800841a:	42ac      	cmp	r4, r5
 800841c:	d101      	bne.n	8008422 <__sfputs_r+0x12>
 800841e:	2000      	movs	r0, #0
 8008420:	e007      	b.n	8008432 <__sfputs_r+0x22>
 8008422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008426:	463a      	mov	r2, r7
 8008428:	4630      	mov	r0, r6
 800842a:	f7ff ffda 	bl	80083e2 <__sfputc_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d1f3      	bne.n	800841a <__sfputs_r+0xa>
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460d      	mov	r5, r1
 800843a:	b09d      	sub	sp, #116	@ 0x74
 800843c:	4614      	mov	r4, r2
 800843e:	4698      	mov	r8, r3
 8008440:	4606      	mov	r6, r0
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6a03      	ldr	r3, [r0, #32]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f7fe facc 	bl	80069e4 <__sinit>
 800844c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845a:	f7fe fbba 	bl	8006bd2 <__retarget_lock_acquire_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	071b      	lsls	r3, r3, #28
 8008462:	d501      	bpl.n	8008468 <_vfiprintf_r+0x34>
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	b99b      	cbnz	r3, 8008490 <_vfiprintf_r+0x5c>
 8008468:	4629      	mov	r1, r5
 800846a:	4630      	mov	r0, r6
 800846c:	f000 f938 	bl	80086e0 <__swsetup_r>
 8008470:	b170      	cbz	r0, 8008490 <_vfiprintf_r+0x5c>
 8008472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008474:	07dc      	lsls	r4, r3, #31
 8008476:	d504      	bpl.n	8008482 <_vfiprintf_r+0x4e>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	b01d      	add	sp, #116	@ 0x74
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	0598      	lsls	r0, r3, #22
 8008486:	d4f7      	bmi.n	8008478 <_vfiprintf_r+0x44>
 8008488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800848a:	f7fe fba3 	bl	8006bd4 <__retarget_lock_release_recursive>
 800848e:	e7f3      	b.n	8008478 <_vfiprintf_r+0x44>
 8008490:	2300      	movs	r3, #0
 8008492:	9309      	str	r3, [sp, #36]	@ 0x24
 8008494:	2320      	movs	r3, #32
 8008496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800849a:	f8cd 800c 	str.w	r8, [sp, #12]
 800849e:	2330      	movs	r3, #48	@ 0x30
 80084a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008650 <_vfiprintf_r+0x21c>
 80084a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084a8:	f04f 0901 	mov.w	r9, #1
 80084ac:	4623      	mov	r3, r4
 80084ae:	469a      	mov	sl, r3
 80084b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b4:	b10a      	cbz	r2, 80084ba <_vfiprintf_r+0x86>
 80084b6:	2a25      	cmp	r2, #37	@ 0x25
 80084b8:	d1f9      	bne.n	80084ae <_vfiprintf_r+0x7a>
 80084ba:	ebba 0b04 	subs.w	fp, sl, r4
 80084be:	d00b      	beq.n	80084d8 <_vfiprintf_r+0xa4>
 80084c0:	465b      	mov	r3, fp
 80084c2:	4622      	mov	r2, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ffa2 	bl	8008410 <__sfputs_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f000 80a7 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 80084d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d4:	445a      	add	r2, fp
 80084d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 809f 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ec:	f10a 0a01 	add.w	sl, sl, #1
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80084fa:	4654      	mov	r4, sl
 80084fc:	2205      	movs	r2, #5
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4853      	ldr	r0, [pc, #332]	@ (8008650 <_vfiprintf_r+0x21c>)
 8008504:	f7f7 fe6c 	bl	80001e0 <memchr>
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	b9d8      	cbnz	r0, 8008544 <_vfiprintf_r+0x110>
 800850c:	06d1      	lsls	r1, r2, #27
 800850e:	bf44      	itt	mi
 8008510:	2320      	movmi	r3, #32
 8008512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008516:	0713      	lsls	r3, r2, #28
 8008518:	bf44      	itt	mi
 800851a:	232b      	movmi	r3, #43	@ 0x2b
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008520:	f89a 3000 	ldrb.w	r3, [sl]
 8008524:	2b2a      	cmp	r3, #42	@ 0x2a
 8008526:	d015      	beq.n	8008554 <_vfiprintf_r+0x120>
 8008528:	9a07      	ldr	r2, [sp, #28]
 800852a:	4654      	mov	r4, sl
 800852c:	2000      	movs	r0, #0
 800852e:	f04f 0c0a 	mov.w	ip, #10
 8008532:	4621      	mov	r1, r4
 8008534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008538:	3b30      	subs	r3, #48	@ 0x30
 800853a:	2b09      	cmp	r3, #9
 800853c:	d94b      	bls.n	80085d6 <_vfiprintf_r+0x1a2>
 800853e:	b1b0      	cbz	r0, 800856e <_vfiprintf_r+0x13a>
 8008540:	9207      	str	r2, [sp, #28]
 8008542:	e014      	b.n	800856e <_vfiprintf_r+0x13a>
 8008544:	eba0 0308 	sub.w	r3, r0, r8
 8008548:	fa09 f303 	lsl.w	r3, r9, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	9304      	str	r3, [sp, #16]
 8008550:	46a2      	mov	sl, r4
 8008552:	e7d2      	b.n	80084fa <_vfiprintf_r+0xc6>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9103      	str	r1, [sp, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfbb      	ittet	lt
 8008560:	425b      	neglt	r3, r3
 8008562:	f042 0202 	orrlt.w	r2, r2, #2
 8008566:	9307      	strge	r3, [sp, #28]
 8008568:	9307      	strlt	r3, [sp, #28]
 800856a:	bfb8      	it	lt
 800856c:	9204      	strlt	r2, [sp, #16]
 800856e:	7823      	ldrb	r3, [r4, #0]
 8008570:	2b2e      	cmp	r3, #46	@ 0x2e
 8008572:	d10a      	bne.n	800858a <_vfiprintf_r+0x156>
 8008574:	7863      	ldrb	r3, [r4, #1]
 8008576:	2b2a      	cmp	r3, #42	@ 0x2a
 8008578:	d132      	bne.n	80085e0 <_vfiprintf_r+0x1ac>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	1d1a      	adds	r2, r3, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	9203      	str	r2, [sp, #12]
 8008582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008586:	3402      	adds	r4, #2
 8008588:	9305      	str	r3, [sp, #20]
 800858a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008660 <_vfiprintf_r+0x22c>
 800858e:	7821      	ldrb	r1, [r4, #0]
 8008590:	2203      	movs	r2, #3
 8008592:	4650      	mov	r0, sl
 8008594:	f7f7 fe24 	bl	80001e0 <memchr>
 8008598:	b138      	cbz	r0, 80085aa <_vfiprintf_r+0x176>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	eba0 000a 	sub.w	r0, r0, sl
 80085a0:	2240      	movs	r2, #64	@ 0x40
 80085a2:	4082      	lsls	r2, r0
 80085a4:	4313      	orrs	r3, r2
 80085a6:	3401      	adds	r4, #1
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4829      	ldr	r0, [pc, #164]	@ (8008654 <_vfiprintf_r+0x220>)
 80085b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085b4:	2206      	movs	r2, #6
 80085b6:	f7f7 fe13 	bl	80001e0 <memchr>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d03f      	beq.n	800863e <_vfiprintf_r+0x20a>
 80085be:	4b26      	ldr	r3, [pc, #152]	@ (8008658 <_vfiprintf_r+0x224>)
 80085c0:	bb1b      	cbnz	r3, 800860a <_vfiprintf_r+0x1d6>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	3307      	adds	r3, #7
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	3308      	adds	r3, #8
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	443b      	add	r3, r7
 80085d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d4:	e76a      	b.n	80084ac <_vfiprintf_r+0x78>
 80085d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085da:	460c      	mov	r4, r1
 80085dc:	2001      	movs	r0, #1
 80085de:	e7a8      	b.n	8008532 <_vfiprintf_r+0xfe>
 80085e0:	2300      	movs	r3, #0
 80085e2:	3401      	adds	r4, #1
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	4619      	mov	r1, r3
 80085e8:	f04f 0c0a 	mov.w	ip, #10
 80085ec:	4620      	mov	r0, r4
 80085ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f2:	3a30      	subs	r2, #48	@ 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d903      	bls.n	8008600 <_vfiprintf_r+0x1cc>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c6      	beq.n	800858a <_vfiprintf_r+0x156>
 80085fc:	9105      	str	r1, [sp, #20]
 80085fe:	e7c4      	b.n	800858a <_vfiprintf_r+0x156>
 8008600:	fb0c 2101 	mla	r1, ip, r1, r2
 8008604:	4604      	mov	r4, r0
 8008606:	2301      	movs	r3, #1
 8008608:	e7f0      	b.n	80085ec <_vfiprintf_r+0x1b8>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4b12      	ldr	r3, [pc, #72]	@ (800865c <_vfiprintf_r+0x228>)
 8008612:	a904      	add	r1, sp, #16
 8008614:	4630      	mov	r0, r6
 8008616:	f7fd fda1 	bl	800615c <_printf_float>
 800861a:	4607      	mov	r7, r0
 800861c:	1c78      	adds	r0, r7, #1
 800861e:	d1d6      	bne.n	80085ce <_vfiprintf_r+0x19a>
 8008620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d405      	bmi.n	8008632 <_vfiprintf_r+0x1fe>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	059a      	lsls	r2, r3, #22
 800862a:	d402      	bmi.n	8008632 <_vfiprintf_r+0x1fe>
 800862c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800862e:	f7fe fad1 	bl	8006bd4 <__retarget_lock_release_recursive>
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	065b      	lsls	r3, r3, #25
 8008636:	f53f af1f 	bmi.w	8008478 <_vfiprintf_r+0x44>
 800863a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800863c:	e71e      	b.n	800847c <_vfiprintf_r+0x48>
 800863e:	ab03      	add	r3, sp, #12
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	462a      	mov	r2, r5
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <_vfiprintf_r+0x228>)
 8008646:	a904      	add	r1, sp, #16
 8008648:	4630      	mov	r0, r6
 800864a:	f7fe f81f 	bl	800668c <_printf_i>
 800864e:	e7e4      	b.n	800861a <_vfiprintf_r+0x1e6>
 8008650:	08008e17 	.word	0x08008e17
 8008654:	08008e21 	.word	0x08008e21
 8008658:	0800615d 	.word	0x0800615d
 800865c:	08008411 	.word	0x08008411
 8008660:	08008e1d 	.word	0x08008e1d

08008664 <__swbuf_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	460e      	mov	r6, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4605      	mov	r5, r0
 800866c:	b118      	cbz	r0, 8008676 <__swbuf_r+0x12>
 800866e:	6a03      	ldr	r3, [r0, #32]
 8008670:	b90b      	cbnz	r3, 8008676 <__swbuf_r+0x12>
 8008672:	f7fe f9b7 	bl	80069e4 <__sinit>
 8008676:	69a3      	ldr	r3, [r4, #24]
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	071a      	lsls	r2, r3, #28
 800867e:	d501      	bpl.n	8008684 <__swbuf_r+0x20>
 8008680:	6923      	ldr	r3, [r4, #16]
 8008682:	b943      	cbnz	r3, 8008696 <__swbuf_r+0x32>
 8008684:	4621      	mov	r1, r4
 8008686:	4628      	mov	r0, r5
 8008688:	f000 f82a 	bl	80086e0 <__swsetup_r>
 800868c:	b118      	cbz	r0, 8008696 <__swbuf_r+0x32>
 800868e:	f04f 37ff 	mov.w	r7, #4294967295
 8008692:	4638      	mov	r0, r7
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	1a98      	subs	r0, r3, r2
 800869c:	6963      	ldr	r3, [r4, #20]
 800869e:	b2f6      	uxtb	r6, r6
 80086a0:	4283      	cmp	r3, r0
 80086a2:	4637      	mov	r7, r6
 80086a4:	dc05      	bgt.n	80086b2 <__swbuf_r+0x4e>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7ff fdf7 	bl	800829c <_fflush_r>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1ed      	bne.n	800868e <__swbuf_r+0x2a>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	701e      	strb	r6, [r3, #0]
 80086c0:	6962      	ldr	r2, [r4, #20]
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d004      	beq.n	80086d2 <__swbuf_r+0x6e>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d5e1      	bpl.n	8008692 <__swbuf_r+0x2e>
 80086ce:	2e0a      	cmp	r6, #10
 80086d0:	d1df      	bne.n	8008692 <__swbuf_r+0x2e>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fde1 	bl	800829c <_fflush_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0d9      	beq.n	8008692 <__swbuf_r+0x2e>
 80086de:	e7d6      	b.n	800868e <__swbuf_r+0x2a>

080086e0 <__swsetup_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <__swsetup_r+0xa8>)
 80086e4:	4605      	mov	r5, r0
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	460c      	mov	r4, r1
 80086ea:	b118      	cbz	r0, 80086f4 <__swsetup_r+0x14>
 80086ec:	6a03      	ldr	r3, [r0, #32]
 80086ee:	b90b      	cbnz	r3, 80086f4 <__swsetup_r+0x14>
 80086f0:	f7fe f978 	bl	80069e4 <__sinit>
 80086f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f8:	0719      	lsls	r1, r3, #28
 80086fa:	d422      	bmi.n	8008742 <__swsetup_r+0x62>
 80086fc:	06da      	lsls	r2, r3, #27
 80086fe:	d407      	bmi.n	8008710 <__swsetup_r+0x30>
 8008700:	2209      	movs	r2, #9
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	e033      	b.n	8008778 <__swsetup_r+0x98>
 8008710:	0758      	lsls	r0, r3, #29
 8008712:	d512      	bpl.n	800873a <__swsetup_r+0x5a>
 8008714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008716:	b141      	cbz	r1, 800872a <__swsetup_r+0x4a>
 8008718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <__swsetup_r+0x46>
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff f8b5 	bl	8007890 <_free_r>
 8008726:	2300      	movs	r3, #0
 8008728:	6363      	str	r3, [r4, #52]	@ 0x34
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	2300      	movs	r3, #0
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0308 	orr.w	r3, r3, #8
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	b94b      	cbnz	r3, 800875a <__swsetup_r+0x7a>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800874c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008750:	d003      	beq.n	800875a <__swsetup_r+0x7a>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f883 	bl	8008860 <__smakebuf_r>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	f013 0201 	ands.w	r2, r3, #1
 8008762:	d00a      	beq.n	800877a <__swsetup_r+0x9a>
 8008764:	2200      	movs	r2, #0
 8008766:	60a2      	str	r2, [r4, #8]
 8008768:	6962      	ldr	r2, [r4, #20]
 800876a:	4252      	negs	r2, r2
 800876c:	61a2      	str	r2, [r4, #24]
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	b942      	cbnz	r2, 8008784 <__swsetup_r+0xa4>
 8008772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008776:	d1c5      	bne.n	8008704 <__swsetup_r+0x24>
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	0799      	lsls	r1, r3, #30
 800877c:	bf58      	it	pl
 800877e:	6962      	ldrpl	r2, [r4, #20]
 8008780:	60a2      	str	r2, [r4, #8]
 8008782:	e7f4      	b.n	800876e <__swsetup_r+0x8e>
 8008784:	2000      	movs	r0, #0
 8008786:	e7f7      	b.n	8008778 <__swsetup_r+0x98>
 8008788:	20000020 	.word	0x20000020

0800878c <_raise_r>:
 800878c:	291f      	cmp	r1, #31
 800878e:	b538      	push	{r3, r4, r5, lr}
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	d904      	bls.n	80087a0 <_raise_r+0x14>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087a2:	b112      	cbz	r2, 80087aa <_raise_r+0x1e>
 80087a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a8:	b94b      	cbnz	r3, 80087be <_raise_r+0x32>
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f830 	bl	8008810 <_getpid_r>
 80087b0:	4622      	mov	r2, r4
 80087b2:	4601      	mov	r1, r0
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ba:	f000 b817 	b.w	80087ec <_kill_r>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d00a      	beq.n	80087d8 <_raise_r+0x4c>
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	d103      	bne.n	80087ce <_raise_r+0x42>
 80087c6:	2316      	movs	r3, #22
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7e7      	b.n	800879e <_raise_r+0x12>
 80087ce:	2100      	movs	r1, #0
 80087d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80087d4:	4620      	mov	r0, r4
 80087d6:	4798      	blx	r3
 80087d8:	2000      	movs	r0, #0
 80087da:	e7e0      	b.n	800879e <_raise_r+0x12>

080087dc <raise>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	@ (80087e8 <raise+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f7ff bfd3 	b.w	800878c <_raise_r>
 80087e6:	bf00      	nop
 80087e8:	20000020 	.word	0x20000020

080087ec <_kill_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	@ (800880c <_kill_r+0x20>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7f9 fcf3 	bl	80021e4 <_kill>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_kill_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_kill_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	20002a84 	.word	0x20002a84

08008810 <_getpid_r>:
 8008810:	f7f9 bce0 	b.w	80021d4 <_getpid>

08008814 <__swhatbuf_r>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	460c      	mov	r4, r1
 8008818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881c:	2900      	cmp	r1, #0
 800881e:	b096      	sub	sp, #88	@ 0x58
 8008820:	4615      	mov	r5, r2
 8008822:	461e      	mov	r6, r3
 8008824:	da0d      	bge.n	8008842 <__swhatbuf_r+0x2e>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	bf14      	ite	ne
 8008832:	2340      	movne	r3, #64	@ 0x40
 8008834:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008838:	2000      	movs	r0, #0
 800883a:	6031      	str	r1, [r6, #0]
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	b016      	add	sp, #88	@ 0x58
 8008840:	bd70      	pop	{r4, r5, r6, pc}
 8008842:	466a      	mov	r2, sp
 8008844:	f000 f848 	bl	80088d8 <_fstat_r>
 8008848:	2800      	cmp	r0, #0
 800884a:	dbec      	blt.n	8008826 <__swhatbuf_r+0x12>
 800884c:	9901      	ldr	r1, [sp, #4]
 800884e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008852:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008856:	4259      	negs	r1, r3
 8008858:	4159      	adcs	r1, r3
 800885a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800885e:	e7eb      	b.n	8008838 <__swhatbuf_r+0x24>

08008860 <__smakebuf_r>:
 8008860:	898b      	ldrh	r3, [r1, #12]
 8008862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008864:	079d      	lsls	r5, r3, #30
 8008866:	4606      	mov	r6, r0
 8008868:	460c      	mov	r4, r1
 800886a:	d507      	bpl.n	800887c <__smakebuf_r+0x1c>
 800886c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	2301      	movs	r3, #1
 8008876:	6163      	str	r3, [r4, #20]
 8008878:	b003      	add	sp, #12
 800887a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887c:	ab01      	add	r3, sp, #4
 800887e:	466a      	mov	r2, sp
 8008880:	f7ff ffc8 	bl	8008814 <__swhatbuf_r>
 8008884:	9f00      	ldr	r7, [sp, #0]
 8008886:	4605      	mov	r5, r0
 8008888:	4639      	mov	r1, r7
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff f874 	bl	8007978 <_malloc_r>
 8008890:	b948      	cbnz	r0, 80088a6 <__smakebuf_r+0x46>
 8008892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008896:	059a      	lsls	r2, r3, #22
 8008898:	d4ee      	bmi.n	8008878 <__smakebuf_r+0x18>
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	f043 0302 	orr.w	r3, r3, #2
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	e7e2      	b.n	800886c <__smakebuf_r+0xc>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	6020      	str	r0, [r4, #0]
 80088aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088b6:	b15b      	cbz	r3, 80088d0 <__smakebuf_r+0x70>
 80088b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f81d 	bl	80088fc <_isatty_r>
 80088c2:	b128      	cbz	r0, 80088d0 <__smakebuf_r+0x70>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	431d      	orrs	r5, r3
 80088d4:	81a5      	strh	r5, [r4, #12]
 80088d6:	e7cf      	b.n	8008878 <__smakebuf_r+0x18>

080088d8 <_fstat_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	@ (80088f8 <_fstat_r+0x20>)
 80088dc:	2300      	movs	r3, #0
 80088de:	4604      	mov	r4, r0
 80088e0:	4608      	mov	r0, r1
 80088e2:	4611      	mov	r1, r2
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	f7f9 fcdd 	bl	80022a4 <_fstat>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d102      	bne.n	80088f4 <_fstat_r+0x1c>
 80088ee:	682b      	ldr	r3, [r5, #0]
 80088f0:	b103      	cbz	r3, 80088f4 <_fstat_r+0x1c>
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	bd38      	pop	{r3, r4, r5, pc}
 80088f6:	bf00      	nop
 80088f8:	20002a84 	.word	0x20002a84

080088fc <_isatty_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d06      	ldr	r5, [pc, #24]	@ (8008918 <_isatty_r+0x1c>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7f9 fcdc 	bl	80022c4 <_isatty>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_isatty_r+0x1a>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_isatty_r+0x1a>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20002a84 	.word	0x20002a84

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
