
Ind4p0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000872c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080088d0  080088d0  000188d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028ac  200001dc  08008fa8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a88  08008fa8  00022a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121a1  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002649  00000000  00000000  0003245e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00034aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  00035c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f8e  00000000  00000000  000369a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014887  00000000  00000000  0004f932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f914  00000000  00000000  000641b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a80  00000000  00000000  00103ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00109550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001450  00000000  00000000  001095ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0010a9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088b4 	.word	0x080088b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080088b4 	.word	0x080088b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ebc:	1d39      	adds	r1, r7, #4
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <__io_putchar+0x20>)
 8000ec6:	f003 fdbb 	bl	8004a40 <HAL_UART_Transmit>
	return ch;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000540 	.word	0x20000540

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 fa09 	bl	80022f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f83b 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f9a1 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 f97f 	bl	80011ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000eee:	f000 f893 	bl	8001018 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f8ff 	bl	80010f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ef6:	f000 f94f 	bl	8001198 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000efa:	f000 f929 	bl	8001150 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//	arm_fir_init_f32(&S_FIR, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], SAMPLES);
	arm_fir_init_f32(&S_FIR, NUM_TAPS_HP, (float32_t *)&firCoeffs32_high_pass[0], &firStateF32_HP[0], SAMPLES);
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <main+0x64>)
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <main+0x68>)
 8000f08:	2157      	movs	r1, #87	; 0x57
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <main+0x6c>)
 8000f0c:	f004 fd9e 	bl	8005a4c <arm_fir_init_f32>


	/********************************************
	 * attiva l'UART in interrupt mode
	 ********************************************/
	HAL_UART_Receive_IT(&huart1,&UART1_rx, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <main+0x70>)
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <main+0x74>)
 8000f16:	f003 fe1e 	bl	8004b56 <HAL_UART_Receive_IT>


	//************************************************************************************************//
	HAL_TIM_Base_Start_IT(&htim10);
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <main+0x78>)
 8000f1c:	f003 fb26 	bl	800456c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_PRESCALER(&htim10, 1);
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <main+0x78>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2201      	movs	r2, #1
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
//	 *******************************************************/
//	//HAL_ADCEx_Calibration_Start(&hadc1);
//	/*******************************************************/
//
//
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 3);
 8000f28:	2203      	movs	r2, #3
 8000f2a:	490a      	ldr	r1, [pc, #40]	; (8000f54 <main+0x7c>)
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <main+0x80>)
 8000f2e:	f001 fabb 	bl	80024a8 <HAL_ADC_Start_DMA>


//		HAL_UART_Transmit(&huart1, tt, sizeof(tt), 100);


		HAL_Delay(1000);
 8000f32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f36:	f001 fa4f 	bl	80023d8 <HAL_Delay>
 8000f3a:	e7fa      	b.n	8000f32 <main+0x5a>
 8000f3c:	200007cc 	.word	0x200007cc
 8000f40:	080088d0 	.word	0x080088d0
 8000f44:	200007c0 	.word	0x200007c0
 8000f48:	200005ac 	.word	0x200005ac
 8000f4c:	20000540 	.word	0x20000540
 8000f50:	200004f8 	.word	0x200004f8
 8000f54:	200007b4 	.word	0x200007b4
 8000f58:	200003fc 	.word	0x200003fc

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fd4f 	bl	8006a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xb4>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemClock_Config+0xb4>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <SystemClock_Config+0xb4>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <SystemClock_Config+0xb8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <SystemClock_Config+0xb8>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <SystemClock_Config+0xb8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fe25 	bl	8003c1c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fd8:	f000 fedc 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 f888 	bl	800410c <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001002:	f000 fec7 	bl	8001d94 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xd0>)
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <MX_ADC1_Init+0xd4>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xd0>)
 800103e:	2201      	movs	r2, #1
 8001040:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001044:	2201      	movs	r2, #1
 8001046:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC1_Init+0xd0>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <MX_ADC1_Init+0xd8>)
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xd0>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001064:	2203      	movs	r2, #3
 8001066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xd0>)
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001072:	2201      	movs	r2, #1
 8001074:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001078:	f001 f9d2 	bl	8002420 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fe87 	bl	8001d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xd0>)
 8001098:	f001 fb00 	bl	800269c <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010a2:	f000 fe77 	bl	8001d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xd0>)
 80010b4:	f001 faf2 	bl	800269c <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80010be:	f000 fe69 	bl	8001d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010c6:	2303      	movs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xd0>)
 80010d0:	f001 fae4 	bl	800269c <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010da:	f000 fe5b 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200003fc 	.word	0x200003fc
 80010ec:	40012000 	.word	0x40012000
 80010f0:	0f000001 	.word	0x0f000001

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f002 fc2f 	bl	8003994 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 fe2a 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200004a4 	.word	0x200004a4
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_TIM10_Init+0x40>)
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <MX_TIM10_Init+0x44>)
 8001158:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_TIM10_Init+0x40>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_TIM10_Init+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_TIM10_Init+0x40>)
 8001168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_TIM10_Init+0x40>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_TIM10_Init+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM10_Init+0x40>)
 800117c:	f003 f9a6 	bl	80044cc <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001186:	f000 fe05 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200004f8 	.word	0x200004f8
 8001194:	40014400 	.word	0x40014400

08001198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_USART1_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011d0:	f003 fbe6 	bl	80049a0 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 fddb 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000540 	.word	0x20000540
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x3c>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	2038      	movs	r0, #56	; 0x38
 8001214:	f001 fdcd 	bl	8002db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001218:	2038      	movs	r0, #56	; 0x38
 800121a:	f001 fde6 	bl	8002dea <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012ba:	f002 fb37 	bl	800392c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 80012be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012d8:	f002 f9a4 	bl	8003624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020800 	.word	0x40020800

080012ec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */


// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]


	adc_channel_instance.ADC_X = value[0];
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_ADC_ConvCpltCallback+0x284>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b9e      	ldr	r3, [pc, #632]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 8001310:	809a      	strh	r2, [r3, #4]
	adc_channel_instance.ADC_Y = value[1];
 8001312:	4b9c      	ldr	r3, [pc, #624]	; (8001584 <HAL_ADC_ConvCpltCallback+0x284>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 800131a:	80da      	strh	r2, [r3, #6]
	adc_channel_instance.ADC_Z = value[2];
 800131c:	4b99      	ldr	r3, [pc, #612]	; (8001584 <HAL_ADC_ConvCpltCallback+0x284>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b99      	ldr	r3, [pc, #612]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 8001324:	811a      	strh	r2, [r3, #8]



	Input_X[current_index_aqsample] = adc_channel_instance.ADC_X;
 8001326:	4b98      	ldr	r3, [pc, #608]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 8001328:	889a      	ldrh	r2, [r3, #4]
 800132a:	4b98      	ldr	r3, [pc, #608]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 2a90 	vmov	s15, r2
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	4a96      	ldr	r2, [pc, #600]	; (8001590 <HAL_ADC_ConvCpltCallback+0x290>)
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	edc3 7a00 	vstr	s15, [r3]
	Input_Y[current_index_aqsample] = adc_channel_instance.ADC_Y;
 8001340:	4b91      	ldr	r3, [pc, #580]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 8001342:	88da      	ldrh	r2, [r3, #6]
 8001344:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 2a90 	vmov	s15, r2
 800134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001350:	4a90      	ldr	r2, [pc, #576]	; (8001594 <HAL_ADC_ConvCpltCallback+0x294>)
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	edc3 7a00 	vstr	s15, [r3]
	Input_Z[current_index_aqsample] = adc_channel_instance.ADC_Z;
 800135a:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <HAL_ADC_ConvCpltCallback+0x288>)
 800135c:	891a      	ldrh	r2, [r3, #8]
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee07 2a90 	vmov	s15, r2
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	4a8b      	ldr	r2, [pc, #556]	; (8001598 <HAL_ADC_ConvCpltCallback+0x298>)
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	edc3 7a00 	vstr	s15, [r3]


	/**************************************************************************************************************************************
	 * ELABORAZIONE
	 **************************************************************************************************************************************/
	arm_fir_f32(&S_FIR,&Input_X[current_index_aqsample], &output_X, 1);
 8001374:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4a85      	ldr	r2, [pc, #532]	; (8001590 <HAL_ADC_ConvCpltCallback+0x290>)
 800137c:	1899      	adds	r1, r3, r2
 800137e:	2301      	movs	r3, #1
 8001380:	4a86      	ldr	r2, [pc, #536]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 8001382:	4887      	ldr	r0, [pc, #540]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001384:	f004 fb74 	bl	8005a70 <arm_fir_f32>
	arm_fir_f32(&S_FIR,&Input_Y[current_index_aqsample], &output_Y, 1);
 8001388:	4b80      	ldr	r3, [pc, #512]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4a81      	ldr	r2, [pc, #516]	; (8001594 <HAL_ADC_ConvCpltCallback+0x294>)
 8001390:	1899      	adds	r1, r3, r2
 8001392:	2301      	movs	r3, #1
 8001394:	4a83      	ldr	r2, [pc, #524]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8001396:	4882      	ldr	r0, [pc, #520]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001398:	f004 fb6a 	bl	8005a70 <arm_fir_f32>
	arm_fir_f32(&S_FIR,&Input_Z[current_index_aqsample], &output_Z, 1);
 800139c:	4b7b      	ldr	r3, [pc, #492]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <HAL_ADC_ConvCpltCallback+0x298>)
 80013a4:	1899      	adds	r1, r3, r2
 80013a6:	2301      	movs	r3, #1
 80013a8:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80013aa:	487d      	ldr	r0, [pc, #500]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 80013ac:	f004 fb60 	bl	8005a70 <arm_fir_f32>


	if(output_X < 0)
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d507      	bpl.n	80013d0 <HAL_ADC_ConvCpltCallback+0xd0>
		output_X = output_X * -1;
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eef1 7a67 	vneg.f32	s15, s15
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	if(output_Y < 0)
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d507      	bpl.n	80013f0 <HAL_ADC_ConvCpltCallback+0xf0>
		output_Y = output_Y * -1;
 80013e0:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eef1 7a67 	vneg.f32	s15, s15
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
	if(output_Z < 0)
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d507      	bpl.n	8001410 <HAL_ADC_ConvCpltCallback+0x110>
		output_Z = output_Z * -1;
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eef1 7a67 	vneg.f32	s15, s15
 800140a:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
/*******************************************************/

	/*********************************************************************************************************
	 * Se uno dei tre segnali supera la soglia degli urti viene messo a true il flag del bump
	 *********************************************************************************************************/
	if(BumpFlag==false && ((output_X>bumpsThreshold)||(output_Y>bumpsThreshold)||(output_Z>bumpsThreshold)) ){
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <HAL_ADC_ConvCpltCallback+0x2ac>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	f083 0301 	eor.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d02c      	beq.n	8001478 <HAL_ADC_ConvCpltCallback+0x178>
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d41b      	bmi.n	8001472 <HAL_ADC_ConvCpltCallback+0x172>
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001446:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	d40d      	bmi.n	8001472 <HAL_ADC_ConvCpltCallback+0x172>
 8001456:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d502      	bpl.n	8001478 <HAL_ADC_ConvCpltCallback+0x178>
		//send_bump_alarm();
		BumpFlag=true;
 8001472:	4b4e      	ldr	r3, [pc, #312]	; (80015ac <HAL_ADC_ConvCpltCallback+0x2ac>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
	/************************************************************************************************/

	/*********************************************************************************************************
	 * Se uno dei tre segnali supera la soglia nascosta degli urti viene messo a true il flag dell'hidden bump
	 *********************************************************************************************************/
	if(HiddenBumpFlag==false &&((output_X>hiddenBumpsThreshold)||(output_Y>hiddenBumpsThreshold)||(output_Z>hiddenBumpsThreshold)) ){
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x2b4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f083 0301 	eor.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02c      	beq.n	80014e0 <HAL_ADC_ConvCpltCallback+0x1e0>
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d41b      	bmi.n	80014da <HAL_ADC_ConvCpltCallback+0x1da>
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	d40d      	bmi.n	80014da <HAL_ADC_ConvCpltCallback+0x1da>
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d502      	bpl.n	80014e0 <HAL_ADC_ConvCpltCallback+0x1e0>
		//send_hidden_bump_alarm();
		HiddenBumpFlag=true;
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x2b4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]

	/******************************************************
	 * Se output_X supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni xShakesCount
	 ******************************************************/
	if(output_X>shakesThreshold){
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_ADC_ConvCpltCallback+0x2bc>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_ADC_ConvCpltCallback+0x29c>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d505      	bpl.n	8001508 <HAL_ADC_ConvCpltCallback+0x208>
		xShakesCount++;
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x2c0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8001506:	701a      	strb	r2, [r3, #0]
	/******************************************************/
	/******************************************************
	 * Se output_Y supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni yShakesCount
	 ******************************************************/
	if(output_Y>shakesThreshold){
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_ADC_ConvCpltCallback+0x2bc>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d505      	bpl.n	8001530 <HAL_ADC_ConvCpltCallback+0x230>
		yShakesCount++;
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x2c4>)
 800152e:	701a      	strb	r2, [r3, #0]
	/******************************************************/
	/******************************************************
	 * Se output_Z supera la soglia delle vibrazioni
	 * incrementa il contatore di vibrazioni zShakesCount
	 ******************************************************/
	if(output_Z>shakesThreshold){
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d505      	bpl.n	8001558 <HAL_ADC_ConvCpltCallback+0x258>
		zShakesCount++;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001556:	701a      	strb	r2, [r3, #0]
	}
	/******************************************************/

	/**************************************************************************************************************************************/

	current_index_aqsample = (current_index_aqsample + 1) % SAMPLES;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	425a      	negs	r2, r3
 8001560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001568:	bf58      	it	pl
 800156a:	4253      	negpl	r3, r2
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_ADC_ConvCpltCallback+0x28c>)
 800156e:	6013      	str	r3, [r2, #0]



	HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 8001570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001574:	4815      	ldr	r0, [pc, #84]	; (80015cc <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001576:	f002 f9f2 	bl	800395e <HAL_GPIO_TogglePin>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200007b4 	.word	0x200007b4
 8001588:	20002928 	.word	0x20002928
 800158c:	20001124 	.word	0x20001124
 8001590:	20001128 	.word	0x20001128
 8001594:	20001928 	.word	0x20001928
 8001598:	20002128 	.word	0x20002128
 800159c:	20000590 	.word	0x20000590
 80015a0:	200007c0 	.word	0x200007c0
 80015a4:	20000594 	.word	0x20000594
 80015a8:	20000598 	.word	0x20000598
 80015ac:	2000059c 	.word	0x2000059c
 80015b0:	20000000 	.word	0x20000000
 80015b4:	2000059d 	.word	0x2000059d
 80015b8:	20000006 	.word	0x20000006
 80015bc:	20000002 	.word	0x20000002
 80015c0:	2000058a 	.word	0x2000058a
 80015c4:	2000058b 	.word	0x2000058b
 80015c8:	2000058c 	.word	0x2000058c
 80015cc:	40020800 	.word	0x40020800

080015d0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d111      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x36>
		//		printf("%f %f %f %f %f %f\r\n",Input_X[current_index_aqsample],Input_Y[current_index_aqsample],Input_Z[current_index_aqsample],output_X,output_Y,output_Z);
		/****************************************************************************************************************/
		//printf("%d %d %d\r\n",adc_channel_instance.ADC_X,adc_channel_instance.ADC_Y,adc_channel_instance.ADC_Z);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//if((output_X>bumpsThreshold)||(output_Y>bumpsThreshold)||(output_Z>bumpsThreshold)){
		if(BumpFlag==true){
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x24>
			//send_bump_alarm((uint8_t)output_X, (uint8_t)output_Y, (uint8_t)output_Z);
			send_bump_alarm();
 80015ea:	f000 f96b 	bl	80018c4 <send_bump_alarm>
			BumpFlag=false;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

		/*********************************************************************************************************
		 * Se uno dei tre segnali supera la soglia nascosta degli urti viene trasmesso al SW l'allarme di urto
		 *********************************************************************************************************/
		//if((output_X>hiddenBumpsThreshold)||(output_Y>hiddenBumpsThreshold)||(output_Z>hiddenBumpsThreshold)){
		if(HiddenBumpFlag==true){
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x36>
			send_hidden_bump_alarm();
 80015fc:	f000 f9d4 	bl	80019a8 <send_hidden_bump_alarm>
			HiddenBumpFlag=false;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	//
	//		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
	//
	//	}
	/* USER CODE END Callback 0 */
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40014400 	.word	0x40014400
 8001614:	2000059c 	.word	0x2000059c
 8001618:	2000059d 	.word	0x2000059d

0800161c <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b091      	sub	sp, #68	; 0x44
 8001620:	af04      	add	r7, sp, #16
 8001622:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_UART_RxCpltCallback+0x160>)
 8001628:	4293      	cmp	r3, r2
 800162a:	f040 80a3 	bne.w	8001774 <HAL_UART_RxCpltCallback+0x158>
	{

		/*****************************************************************************************/

		UART1_rxBuffer[rxbuffer_index] = UART1_rx;
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_UART_RxCpltCallback+0x164>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_UART_RxCpltCallback+0x168>)
 8001636:	7819      	ldrb	r1, [r3, #0]
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_UART_RxCpltCallback+0x16c>)
 800163a:	5499      	strb	r1, [r3, r2]
		//		rxbuffer_index = (rxbuffer_index + 1) % MAX_BUFFER_LENGHT;
		rxbuffer_index = (rxbuffer_index + 1);
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_UART_RxCpltCallback+0x164>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <HAL_UART_RxCpltCallback+0x164>)
 8001646:	701a      	strb	r2, [r3, #0]


		// se è arrivato tutto il pacchetto entra nell'if
		if(UART1_rx == ETX_TAG)
 8001648:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <HAL_UART_RxCpltCallback+0x168>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2baf      	cmp	r3, #175	; 0xaf
 800164e:	f040 808c 	bne.w	800176a <HAL_UART_RxCpltCallback+0x14e>
		{

			int size_of_packet = sizeof(protocollo_uart);
 8001652:	231e      	movs	r3, #30
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(rxbuffer_index >= size_of_packet)
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_UART_RxCpltCallback+0x164>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	4293      	cmp	r3, r2
 8001660:	dc7a      	bgt.n	8001758 <HAL_UART_RxCpltCallback+0x13c>
			{

				protocollo_uart dummy;
				memcpy(&dummy,UART1_rxBuffer,size_of_packet);
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4947      	ldr	r1, [pc, #284]	; (8001788 <HAL_UART_RxCpltCallback+0x16c>)
 800166a:	4618      	mov	r0, r3
 800166c:	f005 fa4f 	bl	8006b0e <memcpy>

				if((dummy.stx == STX_TAG)&&(dummy.etx == ETX_TAG))
 8001670:	7b3b      	ldrb	r3, [r7, #12]
 8001672:	2bbe      	cmp	r3, #190	; 0xbe
 8001674:	d170      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x13c>
 8001676:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800167a:	2baf      	cmp	r3, #175	; 0xaf
 800167c:	d16c      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x13c>
				{

					switch(dummy.cmd)
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	3b02      	subs	r3, #2
 8001682:	2b07      	cmp	r3, #7
 8001684:	d864      	bhi.n	8001750 <HAL_UART_RxCpltCallback+0x134>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_UART_RxCpltCallback+0x70>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	080016ad 	.word	0x080016ad
 8001690:	08001757 	.word	0x08001757
 8001694:	08001751 	.word	0x08001751
 8001698:	08001751 	.word	0x08001751
 800169c:	08001715 	.word	0x08001715
 80016a0:	0800172d 	.word	0x0800172d
 80016a4:	08001745 	.word	0x08001745
 80016a8:	0800174b 	.word	0x0800174b
					{

					case 	shake_monitor_cmd:

						shakesCount = xShakesCount;
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_UART_RxCpltCallback+0x170>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016b4:	801a      	strh	r2, [r3, #0]
						if(yShakesCount > shakesCount) shakesCount = yShakesCount;
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_UART_RxCpltCallback+0x178>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d904      	bls.n	80016ce <HAL_UART_RxCpltCallback+0xb2>
 80016c4:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_UART_RxCpltCallback+0x178>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016cc:	801a      	strh	r2, [r3, #0]
						if(zShakesCount > shakesCount) shakesCount = zShakesCount;
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_UART_RxCpltCallback+0x17c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d904      	bls.n	80016e6 <HAL_UART_RxCpltCallback+0xca>
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_UART_RxCpltCallback+0x17c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016e4:	801a      	strh	r2, [r3, #0]

						send_shakes_count(shakesCount,xShakesCount,yShakesCount,zShakesCount);
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_UART_RxCpltCallback+0x174>)
 80016e8:	8818      	ldrh	r0, [r3, #0]
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_UART_RxCpltCallback+0x170>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b299      	uxth	r1, r3
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_UART_RxCpltCallback+0x178>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_UART_RxCpltCallback+0x17c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f000 f9c6 	bl	8001a8c <send_shakes_count>

						xShakesCount = 0;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_UART_RxCpltCallback+0x170>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
						yShakesCount = 0;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_UART_RxCpltCallback+0x178>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
						zShakesCount = 0;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_UART_RxCpltCallback+0x17c>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
						break;
 8001712:	e021      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>

					case 	reboot_cmd:
						break;

					case 	setConfiguration_cmd:
						receive_config(dummy);
 8001714:	466c      	mov	r4, sp
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171c:	c407      	stmia	r4!, {r0, r1, r2}
 800171e:	8023      	strh	r3, [r4, #0]
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001726:	f000 f8ab 	bl	8001880 <receive_config>
						break;
 800172a:	e015      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>

					case 	saveConfiguration_cmd:
						receive_config(dummy);
 800172c:	466c      	mov	r4, sp
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001734:	c407      	stmia	r4!, {r0, r1, r2}
 8001736:	8023      	strh	r3, [r4, #0]
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173e:	f000 f89f 	bl	8001880 <receive_config>
						break;
 8001742:	e009      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>

					case 	getConfiguration_cmd:
						send_config();
 8001744:	f000 f82a 	bl	800179c <send_config>
						break;
 8001748:	e006      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>

					case 	getRawData_cmd:
						send_raw_data();
 800174a:	f000 fa2f 	bl	8001bac <send_raw_data>
						break;
 800174e:	e003      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>
						//case    alarm_disabled_cmd:
						//	send_alarm_disabled();
						//	break;

					default:
						send_nack();
 8001750:	f000 fa9e 	bl	8001c90 <send_nack>
						break;
 8001754:	e000      	b.n	8001758 <HAL_UART_RxCpltCallback+0x13c>
						break;
 8001756:	bf00      	nop
			}

			/**************************************************************
			 * azzera il buffer UART1_rxBuffer e l'indice rxbuffer_index
			 **************************************************************/
			memset(UART1_rxBuffer,0,sizeof(UART1_rxBuffer));
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	2100      	movs	r1, #0
 800175e:	480a      	ldr	r0, [pc, #40]	; (8001788 <HAL_UART_RxCpltCallback+0x16c>)
 8001760:	f005 f955 	bl	8006a0e <memset>
			rxbuffer_index = 0;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_UART_RxCpltCallback+0x164>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart1, &pippo, 1, 100);

		/********************************************
		 * attiva l'UART in interrupt mode
		 ********************************************/
		HAL_UART_Receive_IT(&huart1,&UART1_rx, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	4905      	ldr	r1, [pc, #20]	; (8001784 <HAL_UART_RxCpltCallback+0x168>)
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <HAL_UART_RxCpltCallback+0x160>)
 8001770:	f003 f9f1 	bl	8004b56 <HAL_UART_Receive_IT>

		/*****************************************************************************************/

	}

}
 8001774:	bf00      	nop
 8001776:	3734      	adds	r7, #52	; 0x34
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	20000540 	.word	0x20000540
 8001780:	200007b0 	.word	0x200007b0
 8001784:	200005ac 	.word	0x200005ac
 8001788:	200005b0 	.word	0x200005b0
 800178c:	2000058a 	.word	0x2000058a
 8001790:	20000588 	.word	0x20000588
 8001794:	2000058b 	.word	0x2000058b
 8001798:	2000058c 	.word	0x2000058c

0800179c <send_config>:

/************************************************************************************************
 * Invia i parametri di configurazione all'interfaccia SW
 ************************************************************************************************/

void send_config(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0


	protocollo_uart send_pkt = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	221e      	movs	r2, #30
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 f930 	bl	8006a0e <memset>
	send_pkt.stx = STX_TAG;
 80017ae:	23be      	movs	r3, #190	; 0xbe
 80017b0:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = getConfiguration_cmd;
 80017b2:	2308      	movs	r3, #8
 80017b4:	717b      	strb	r3, [r7, #5]


	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <send_config+0xb0>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <send_config+0xb4>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <send_config+0xb8>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <send_config+0xbc>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <send_config+0xc0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <send_config+0xc4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <send_config+0xc8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <send_config+0xcc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <send_config+0xd0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <send_config+0xd4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <send_config+0xd8>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	3302      	adds	r3, #2
 8001804:	2119      	movs	r1, #25
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fa8c 	bl	8001d24 <crc_16>
 800180c:	4603      	mov	r3, r0
 800180e:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 8001812:	23af      	movs	r3, #175	; 0xaf
 8001814:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001818:	231e      	movs	r3, #30
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 800181c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001820:	2100      	movs	r1, #0
 8001822:	4815      	ldr	r0, [pc, #84]	; (8001878 <send_config+0xdc>)
 8001824:	f005 f8f3 	bl	8006a0e <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <send_config+0xdc>)
 8001830:	f005 f96d 	bl	8006b0e <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	b29a      	uxth	r2, r3
 8001838:	2364      	movs	r3, #100	; 0x64
 800183a:	490f      	ldr	r1, [pc, #60]	; (8001878 <send_config+0xdc>)
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <send_config+0xe0>)
 800183e:	f003 f8ff 	bl	8004a40 <HAL_UART_Transmit>
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000
 8001850:	20000002 	.word	0x20000002
 8001854:	20000004 	.word	0x20000004
 8001858:	20000588 	.word	0x20000588
 800185c:	2000058a 	.word	0x2000058a
 8001860:	2000058b 	.word	0x2000058b
 8001864:	2000058c 	.word	0x2000058c
 8001868:	20000590 	.word	0x20000590
 800186c:	20000594 	.word	0x20000594
 8001870:	20000598 	.word	0x20000598
 8001874:	20000006 	.word	0x20000006
 8001878:	200006b0 	.word	0x200006b0
 800187c:	20000540 	.word	0x20000540

08001880 <receive_config>:

/************************************************
 * Riceve i parametri di configurazione
 * dall'interfaccia SW
 ************************************************/
void receive_config(protocollo_uart pkt){
 8001880:	b084      	sub	sp, #16
 8001882:	b490      	push	{r4, r7}
 8001884:	af00      	add	r7, sp, #0
 8001886:	f107 0408 	add.w	r4, r7, #8
 800188a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bumpsThreshold = pkt.pay.bumpsThreshold;
 800188e:	897a      	ldrh	r2, [r7, #10]
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <receive_config+0x34>)
 8001892:	801a      	strh	r2, [r3, #0]
	shakesThreshold = pkt.pay.shakesThreshold;
 8001894:	89ba      	ldrh	r2, [r7, #12]
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <receive_config+0x38>)
 8001898:	801a      	strh	r2, [r3, #0]
	shakesSamplingTime = pkt.pay.shakesSamplingTime;
 800189a:	89fa      	ldrh	r2, [r7, #14]
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <receive_config+0x3c>)
 800189e:	801a      	strh	r2, [r3, #0]
	hiddenBumpsThreshold = pkt.pay.hiddenBumpsThreshold;
 80018a0:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <receive_config+0x40>)
 80018a8:	801a      	strh	r2, [r3, #0]
	//shakesCount = pkt.payload[3];



}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc90      	pop	{r4, r7}
 80018b0:	b004      	add	sp, #16
 80018b2:	4770      	bx	lr
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000002 	.word	0x20000002
 80018bc:	20000004 	.word	0x20000004
 80018c0:	20000006 	.word	0x20000006

080018c4 <send_bump_alarm>:
/************************************************/
/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per urto
 ************************************************************************************************/
//void send_bump_alarm(uint8_t output_X,uint8_t output_Y,uint8_t output_Z){
void send_bump_alarm(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0



	protocollo_uart send_pkt = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	221e      	movs	r2, #30
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f005 f89c 	bl	8006a0e <memset>
	send_pkt.stx = STX_TAG;
 80018d6:	23be      	movs	r3, #190	; 0xbe
 80018d8:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = bump_event_cmd;
 80018da:	2300      	movs	r3, #0
 80018dc:	717b      	strb	r3, [r7, #5]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <send_bump_alarm+0xb0>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <send_bump_alarm+0xb4>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <send_bump_alarm+0xb8>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <send_bump_alarm+0xbc>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <send_bump_alarm+0xc0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <send_bump_alarm+0xc4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <send_bump_alarm+0xc8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <send_bump_alarm+0xcc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <send_bump_alarm+0xd0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <send_bump_alarm+0xd4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <send_bump_alarm+0xd8>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f8a7 301d 	strh.w	r3, [r7, #29]


	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	3302      	adds	r3, #2
 800192c:	2119      	movs	r1, #25
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f9f8 	bl	8001d24 <crc_16>
 8001934:	4603      	mov	r3, r0
 8001936:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 800193a:	23af      	movs	r3, #175	; 0xaf
 800193c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001940:	231e      	movs	r3, #30
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001948:	2100      	movs	r1, #0
 800194a:	4815      	ldr	r0, [pc, #84]	; (80019a0 <send_bump_alarm+0xdc>)
 800194c:	f005 f85f 	bl	8006a0e <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <send_bump_alarm+0xdc>)
 8001958:	f005 f8d9 	bl	8006b0e <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	b29a      	uxth	r2, r3
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	490f      	ldr	r1, [pc, #60]	; (80019a0 <send_bump_alarm+0xdc>)
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <send_bump_alarm+0xe0>)
 8001966:	f003 f86b 	bl	8004a40 <HAL_UART_Transmit>
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000
 8001978:	20000002 	.word	0x20000002
 800197c:	20000004 	.word	0x20000004
 8001980:	20000588 	.word	0x20000588
 8001984:	2000058a 	.word	0x2000058a
 8001988:	2000058b 	.word	0x2000058b
 800198c:	2000058c 	.word	0x2000058c
 8001990:	20000590 	.word	0x20000590
 8001994:	20000594 	.word	0x20000594
 8001998:	20000598 	.word	0x20000598
 800199c:	20000006 	.word	0x20000006
 80019a0:	200006b0 	.word	0x200006b0
 80019a4:	20000540 	.word	0x20000540

080019a8 <send_hidden_bump_alarm>:

/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per urto
 ************************************************************************************************/
//void send_bump_alarm(uint8_t output_X,uint8_t output_Y,uint8_t output_Z){
void send_hidden_bump_alarm(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0

	protocollo_uart send_pkt = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	221e      	movs	r2, #30
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 f82a 	bl	8006a0e <memset>
	send_pkt.stx = STX_TAG;
 80019ba:	23be      	movs	r3, #190	; 0xbe
 80019bc:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = hidden_bump_event_cmd;
 80019be:	230a      	movs	r3, #10
 80019c0:	717b      	strb	r3, [r7, #5]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <send_hidden_bump_alarm+0xb0>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <send_hidden_bump_alarm+0xb4>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <send_hidden_bump_alarm+0xb8>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <send_hidden_bump_alarm+0xbc>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <send_hidden_bump_alarm+0xc0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <send_hidden_bump_alarm+0xc4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <send_hidden_bump_alarm+0xc8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <send_hidden_bump_alarm+0xcc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <send_hidden_bump_alarm+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <send_hidden_bump_alarm+0xd4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <send_hidden_bump_alarm+0xd8>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	3302      	adds	r3, #2
 8001a10:	2119      	movs	r1, #25
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f986 	bl	8001d24 <crc_16>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f8a7 301f 	strh.w	r3, [r7, #31]
	send_pkt.etx = ETX_TAG;
 8001a1e:	23af      	movs	r3, #175	; 0xaf
 8001a20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001a24:	231e      	movs	r3, #30
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4815      	ldr	r0, [pc, #84]	; (8001a84 <send_hidden_bump_alarm+0xdc>)
 8001a30:	f004 ffed 	bl	8006a0e <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <send_hidden_bump_alarm+0xdc>)
 8001a3c:	f005 f867 	bl	8006b0e <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2364      	movs	r3, #100	; 0x64
 8001a46:	490f      	ldr	r1, [pc, #60]	; (8001a84 <send_hidden_bump_alarm+0xdc>)
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <send_hidden_bump_alarm+0xe0>)
 8001a4a:	f002 fff9 	bl	8004a40 <HAL_UART_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000002 	.word	0x20000002
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000588 	.word	0x20000588
 8001a68:	2000058a 	.word	0x2000058a
 8001a6c:	2000058b 	.word	0x2000058b
 8001a70:	2000058c 	.word	0x2000058c
 8001a74:	20000590 	.word	0x20000590
 8001a78:	20000594 	.word	0x20000594
 8001a7c:	20000598 	.word	0x20000598
 8001a80:	20000006 	.word	0x20000006
 8001a84:	200006b0 	.word	0x200006b0
 8001a88:	20000540 	.word	0x20000540

08001a8c <send_shakes_count>:
/************************************************************************************************/

/************************************************************************************************
 * Invia all'interfaccia SW il comando di allarme per vibrazioni
 ************************************************************************************************/
void send_shakes_count(uint16_t shakesCount, uint16_t XshakesCount, uint16_t YshakesCount, uint16_t ZshakesCount){
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b08d      	sub	sp, #52	; 0x34
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4604      	mov	r4, r0
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	80fb      	strh	r3, [r7, #6]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80bb      	strh	r3, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	803b      	strh	r3, [r7, #0]


	protocollo_uart send_pkt = {0};
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	221e      	movs	r2, #30
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 ffab 	bl	8006a0e <memset>
	send_pkt.stx = STX_TAG;
 8001ab8:	23be      	movs	r3, #190	; 0xbe
 8001aba:	733b      	strb	r3, [r7, #12]
	send_pkt.cmd = shake_event_cmd;
 8001abc:	2301      	movs	r3, #1
 8001abe:	737b      	strb	r3, [r7, #13]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <send_shakes_count+0xe4>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	81fb      	strh	r3, [r7, #14]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <send_shakes_count+0xe8>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	823b      	strh	r3, [r7, #16]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <send_shakes_count+0xec>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	827b      	strh	r3, [r7, #18]
	send_pkt.pay.shakesCount = shakesCount;
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	82bb      	strh	r3, [r7, #20]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001ad6:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <send_shakes_count+0xf0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	75bb      	strb	r3, [r7, #22]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <send_shakes_count+0xf4>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	75fb      	strb	r3, [r7, #23]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <send_shakes_count+0xf8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	763b      	strb	r3, [r7, #24]
	send_pkt.pay.output_X = output_X; //avgOutput_X; //output_X;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <send_shakes_count+0xfc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.output_Y = output_Y; //avgOutput_Y;//output_Y;
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <send_shakes_count+0x100>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8c7 301d 	str.w	r3, [r7, #29]
	send_pkt.pay.output_Z = output_Z; //avgOutput_Z; //output_Z;
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <send_shakes_count+0x104>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <send_shakes_count+0x108>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	2119      	movs	r1, #25
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f907 	bl	8001d24 <crc_16>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f8a7 3027 	strh.w	r3, [r7, #39]	; 0x27

	send_pkt.etx = ETX_TAG;
 8001b1c:	23af      	movs	r3, #175	; 0xaf
 8001b1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	int size_of_packet = sizeof(protocollo_uart);
 8001b22:	231e      	movs	r3, #30
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	481a      	ldr	r0, [pc, #104]	; (8001b98 <send_shakes_count+0x10c>)
 8001b2e:	f004 ff6e 	bl	8006a0e <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <send_shakes_count+0x10c>)
 8001b3c:	f004 ffe7 	bl	8006b0e <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2364      	movs	r3, #100	; 0x64
 8001b46:	4914      	ldr	r1, [pc, #80]	; (8001b98 <send_shakes_count+0x10c>)
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <send_shakes_count+0x110>)
 8001b4a:	f002 ff79 	bl	8004a40 <HAL_UART_Transmit>


	/***************************************************************
	 * Riazzera i valori medi calcolati per gli assi X, Y e Z
	 ***************************************************************/
	avgOutput_X = 0;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <send_shakes_count+0x114>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	avgOutput_Y = 0;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <send_shakes_count+0x118>)
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
	avgOutput_Z = 0;
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <send_shakes_count+0x11c>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
	/***************************************************************/

}
 8001b66:	bf00      	nop
 8001b68:	3734      	adds	r7, #52	; 0x34
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000002 	.word	0x20000002
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	2000058a 	.word	0x2000058a
 8001b80:	2000058b 	.word	0x2000058b
 8001b84:	2000058c 	.word	0x2000058c
 8001b88:	20000590 	.word	0x20000590
 8001b8c:	20000594 	.word	0x20000594
 8001b90:	20000598 	.word	0x20000598
 8001b94:	20000006 	.word	0x20000006
 8001b98:	200006b0 	.word	0x200006b0
 8001b9c:	20000540 	.word	0x20000540
 8001ba0:	200005a0 	.word	0x200005a0
 8001ba4:	200005a4 	.word	0x200005a4
 8001ba8:	200005a8 	.word	0x200005a8

08001bac <send_raw_data>:
/************************************************************************************************/

/************************************************************************************************
 * Invia all'interfaccia SW i dati grezzi
 ************************************************************************************************/
void send_raw_data(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0

	protocollo_uart send_pkt = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	221e      	movs	r2, #30
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 ff28 	bl	8006a0e <memset>
	send_pkt.stx = STX_TAG;
 8001bbe:	23be      	movs	r3, #190	; 0xbe
 8001bc0:	713b      	strb	r3, [r7, #4]
	send_pkt.cmd = getRawData_cmd;
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	717b      	strb	r3, [r7, #5]

	send_pkt.pay.bumpsThreshold = bumpsThreshold;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <send_raw_data+0xb0>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	80fb      	strh	r3, [r7, #6]
	send_pkt.pay.shakesThreshold = shakesThreshold;
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <send_raw_data+0xb4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	813b      	strh	r3, [r7, #8]
	send_pkt.pay.shakesSamplingTime = shakesSamplingTime;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <send_raw_data+0xb8>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	817b      	strh	r3, [r7, #10]
	send_pkt.pay.shakesCount = shakesCount;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <send_raw_data+0xbc>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	81bb      	strh	r3, [r7, #12]
	send_pkt.pay.xShakesCount = xShakesCount;
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <send_raw_data+0xc0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	73bb      	strb	r3, [r7, #14]
	send_pkt.pay.yShakesCount = yShakesCount;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <send_raw_data+0xc4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	73fb      	strb	r3, [r7, #15]
	send_pkt.pay.zShakesCount = zShakesCount;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <send_raw_data+0xc8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	743b      	strb	r3, [r7, #16]
	send_pkt.pay.output_X = output_X;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <send_raw_data+0xcc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8c7 3011 	str.w	r3, [r7, #17]
	send_pkt.pay.output_Y = output_Y;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <send_raw_data+0xd0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8c7 3015 	str.w	r3, [r7, #21]
	send_pkt.pay.output_Z = output_Z;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <send_raw_data+0xd4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8c7 3019 	str.w	r3, [r7, #25]
	send_pkt.pay.hiddenBumpsThreshold = hiddenBumpsThreshold;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <send_raw_data+0xd8>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f8a7 301d 	strh.w	r3, [r7, #29]

	send_pkt.crc = crc_16((unsigned char *)&send_pkt.pay,sizeof(send_pkt.pay));
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	3302      	adds	r3, #2
 8001c14:	2119      	movs	r1, #25
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f884 	bl	8001d24 <crc_16>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8a7 301f 	strh.w	r3, [r7, #31]

	send_pkt.etx = ETX_TAG;
 8001c22:	23af      	movs	r3, #175	; 0xaf
 8001c24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	int size_of_packet = sizeof(protocollo_uart);
 8001c28:	231e      	movs	r3, #30
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	memset(UART1_txBuffer,0,MAX_BUFFER_LENGHT);
 8001c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c30:	2100      	movs	r1, #0
 8001c32:	4815      	ldr	r0, [pc, #84]	; (8001c88 <send_raw_data+0xdc>)
 8001c34:	f004 feeb 	bl	8006a0e <memset>
	memcpy(UART1_txBuffer,(uint8_t*)&send_pkt,size_of_packet);
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <send_raw_data+0xdc>)
 8001c40:	f004 ff65 	bl	8006b0e <memcpy>
	//HAL_UART_Transmit_IT(&huart1, UART1_txBuffer, size_of_packet);
	HAL_UART_Transmit(&huart1, UART1_txBuffer, size_of_packet, 100);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	490f      	ldr	r1, [pc, #60]	; (8001c88 <send_raw_data+0xdc>)
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <send_raw_data+0xe0>)
 8001c4e:	f002 fef7 	bl	8004a40 <HAL_UART_Transmit>
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000002 	.word	0x20000002
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000588 	.word	0x20000588
 8001c6c:	2000058a 	.word	0x2000058a
 8001c70:	2000058b 	.word	0x2000058b
 8001c74:	2000058c 	.word	0x2000058c
 8001c78:	20000590 	.word	0x20000590
 8001c7c:	20000594 	.word	0x20000594
 8001c80:	20000598 	.word	0x20000598
 8001c84:	20000006 	.word	0x20000006
 8001c88:	200006b0 	.word	0x200006b0
 8001c8c:	20000540 	.word	0x20000540

08001c90 <send_nack>:
//
//}
/************************************************************************************************/


void send_nack(){
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <init_crc16_tab>:


/************************************************************************************
 * inizializzazione crc16
 ************************************************************************************/
static void init_crc16_tab( void ) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	80fb      	strh	r3, [r7, #6]
 8001caa:	e029      	b.n	8001d00 <init_crc16_tab+0x60>

		crc = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	807b      	strh	r3, [r7, #2]
		c   = i;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	80bb      	strh	r3, [r7, #4]
 8001cb8:	e017      	b.n	8001cea <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	4053      	eors	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <init_crc16_tab+0x38>
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <init_crc16_tab+0x78>)
 8001cd2:	4053      	eors	r3, r2
 8001cd4:	807b      	strh	r3, [r7, #2]
 8001cd6:	e002      	b.n	8001cde <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8001cde:	883b      	ldrh	r3, [r7, #0]
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8001ce4:	88bb      	ldrh	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	88bb      	ldrh	r3, [r7, #4]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	d9e4      	bls.n	8001cba <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <init_crc16_tab+0x7c>)
 8001cf4:	887a      	ldrh	r2, [r7, #2]
 8001cf6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	80fb      	strh	r3, [r7, #6]
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d9d2      	bls.n	8001cac <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <init_crc16_tab+0x80>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	ffffa001 	.word	0xffffa001
 8001d1c:	200001fc 	.word	0x200001fc
 8001d20:	200001f8 	.word	0x200001f8

08001d24 <crc_16>:
/************************************************************************************/

/*********************************************************************************
 * Calcolo crc 16
 *********************************************************************************/
uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <crc_16+0x68>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <crc_16+0x1c>
 8001d3c:	f7ff ffb0 	bl	8001ca0 <init_crc16_tab>

	crc = CRC_START_16;
 8001d40:	2300      	movs	r3, #0
 8001d42:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d018      	beq.n	8001d80 <crc_16+0x5c>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e011      	b.n	8001d78 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8001d54:	8afb      	ldrh	r3, [r7, #22]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	8af9      	ldrh	r1, [r7, #22]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1c58      	adds	r0, r3, #1
 8001d60:	6138      	str	r0, [r7, #16]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	404b      	eors	r3, r1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4909      	ldr	r1, [pc, #36]	; (8001d90 <crc_16+0x6c>)
 8001d6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d6e:	4053      	eors	r3, r2
 8001d70:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3e9      	bcc.n	8001d54 <crc_16+0x30>
	}

	return crc;
 8001d80:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200001f8 	.word	0x200001f8
 8001d90:	200001fc 	.word	0x200001fc

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_MspInit+0x4c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <HAL_MspInit+0x4c>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_MspInit+0x4c>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <HAL_ADC_MspInit+0xdc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d157      	bne.n	8001ec2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_ADC_MspInit+0xe0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481d      	ldr	r0, [pc, #116]	; (8001ed4 <HAL_ADC_MspInit+0xe4>)
 8001e5e:	f001 fbe1 	bl	8003624 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_ADC_MspInit+0xec>)
 8001e66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001ea8:	f000 ffba 	bl	8002e20 <HAL_DMA_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001eb2:	f7ff ff6f 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_ADC_MspInit+0xe8>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40012000 	.word	0x40012000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	20000444 	.word	0x20000444
 8001edc:	40026410 	.word	0x40026410

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_I2C_MspInit+0x84>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12b      	bne.n	8001f5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1e:	23c0      	movs	r3, #192	; 0xc0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f22:	2312      	movs	r3, #18
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <HAL_I2C_MspInit+0x8c>)
 8001f3a:	f001 fb73 	bl	8003624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_I2C_MspInit+0x88>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40005400 	.word	0x40005400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_TIM_Base_MspInit+0x48>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d115      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f000 ff05 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f000 ff1e 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_UART_MspInit+0x94>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d134      	bne.n	800204c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_UART_MspInit+0x98>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_UART_MspInit+0x98>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_UART_MspInit+0x98>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0x98>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_UART_MspInit+0x98>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_UART_MspInit+0x98>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800201a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800202c:	2307      	movs	r3, #7
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_UART_MspInit+0x9c>)
 8002038:	f001 faf4 	bl	8003624 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2025      	movs	r0, #37	; 0x25
 8002042:	f000 feb6 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002046:	2025      	movs	r0, #37	; 0x25
 8002048:	f000 fecf 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40011000 	.word	0x40011000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f000 f974 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020ba:	f002 fab9 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200004f8 	.word	0x200004f8

080020c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USART1_IRQHandler+0x10>)
 80020ce:	f002 fd67 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000540 	.word	0x20000540

080020dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <DMA2_Stream0_IRQHandler+0x10>)
 80020e2:	f001 f835 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000444 	.word	0x20000444

080020f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_kill>:

int _kill(int pid, int sig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800210a:	f004 fcd3 	bl	8006ab4 <__errno>
 800210e:	4603      	mov	r3, r0
 8002110:	2216      	movs	r2, #22
 8002112:	601a      	str	r2, [r3, #0]
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_exit>:

void _exit (int status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ffe7 	bl	8002100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002132:	e7fe      	b.n	8002132 <_exit+0x12>

08002134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
  }

  return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e009      	b.n	8002194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fe93 	bl	8000eb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf1      	blt.n	8002180 <_write+0x12>
  }
  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_close>:

int _close(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ce:	605a      	str	r2, [r3, #4]
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_isatty>:

int _isatty(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f004 fc38 	bl	8006ab4 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20020000 	.word	0x20020000
 8002270:	00000400 	.word	0x00000400
 8002274:	20002934 	.word	0x20002934
 8002278:	20002a88 	.word	0x20002a88

0800227c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a4:	f7ff ffea 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f004 fbf7 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7fe fe01 	bl	8000ed8 <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022e4:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 80022e8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022ec:	20002a88 	.word	0x20002a88

080022f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC_IRQHandler>
	...

080022f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_Init+0x40>)
 80022fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_Init+0x40>)
 800230a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_Init+0x40>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 fd3d 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002322:	200f      	movs	r0, #15
 8002324:	f000 f808 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fd3a 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023c00 	.word	0x40023c00

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x54>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x58>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd55 	bl	8002e06 <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f000 fd1d 	bl	8002db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_InitTick+0x5c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000008 	.word	0x20000008
 8002390:	20000010 	.word	0x20000010
 8002394:	2000000c 	.word	0x2000000c

08002398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x20>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x24>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_IncTick+0x24>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000010 	.word	0x20000010
 80023bc:	20002938 	.word	0x20002938

080023c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_GetTick+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20002938 	.word	0x20002938

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff ffee 	bl	80023c0 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_Delay+0x44>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fe:	bf00      	nop
 8002400:	f7ff ffde 	bl	80023c0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000010 	.word	0x20000010

08002420 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e033      	b.n	800249e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fcd6 	bl	8001df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002466:	f023 0302 	bic.w	r3, r3, #2
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa44 	bl	8002900 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
 800248e:	e001      	b.n	8002494 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0ce      	b.n	8002664 <HAL_ADC_Start_DMA+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d018      	beq.n	800250e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_ADC_Start_DMA+0x1c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <HAL_ADC_Start_DMA+0x1c8>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9a      	lsrs	r2, r3, #18
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002500:	e002      	b.n	8002508 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3b01      	subs	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251c:	d107      	bne.n	800252e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800252c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 8086 	bne.w	800264a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257c:	d106      	bne.n	800258c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f023 0206 	bic.w	r2, r3, #6
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
 800258a:	e002      	b.n	8002592 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_ADC_Start_DMA+0x1cc>)
 800259c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4a35      	ldr	r2, [pc, #212]	; (8002678 <HAL_ADC_Start_DMA+0x1d0>)
 80025a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_ADC_Start_DMA+0x1d4>)
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_ADC_Start_DMA+0x1d8>)
 80025b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	334c      	adds	r3, #76	; 0x4c
 80025ea:	4619      	mov	r1, r3
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f000 fcc4 	bl	8002f7c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10f      	bne.n	8002620 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d129      	bne.n	8002662 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	e020      	b.n	8002662 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_ADC_Start_DMA+0x1dc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d11b      	bne.n	8002662 <HAL_ADC_Start_DMA+0x1ba>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d114      	bne.n	8002662 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e00b      	b.n	8002662 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000008 	.word	0x20000008
 8002670:	431bde83 	.word	0x431bde83
 8002674:	40012300 	.word	0x40012300
 8002678:	08002af9 	.word	0x08002af9
 800267c:	08002bb3 	.word	0x08002bb3
 8002680:	08002bcf 	.word	0x08002bcf
 8002684:	40012000 	.word	0x40012000

08002688 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1c>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e113      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x244>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	d925      	bls.n	8002714 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68d9      	ldr	r1, [r3, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	3b1e      	subs	r3, #30
 80026de:	2207      	movs	r2, #7
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43da      	mvns	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	400a      	ands	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	4603      	mov	r3, r0
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4403      	add	r3, r0
 8002706:	3b1e      	subs	r3, #30
 8002708:	409a      	lsls	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	e022      	b.n	800275a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6919      	ldr	r1, [r3, #16]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	2207      	movs	r2, #7
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	4603      	mov	r3, r0
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4403      	add	r3, r0
 8002750:	409a      	lsls	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d824      	bhi.n	80027ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b05      	subs	r3, #5
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b05      	subs	r3, #5
 800279e:	fa00 f203 	lsl.w	r2, r0, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
 80027aa:	e04c      	b.n	8002846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	d824      	bhi.n	80027fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b23      	subs	r3, #35	; 0x23
 80027c6:	221f      	movs	r2, #31
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43da      	mvns	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	400a      	ands	r2, r1
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b23      	subs	r3, #35	; 0x23
 80027f0:	fa00 f203 	lsl.w	r2, r0, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
 80027fc:	e023      	b.n	8002846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b41      	subs	r3, #65	; 0x41
 8002810:	221f      	movs	r2, #31
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	400a      	ands	r2, r1
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3b41      	subs	r3, #65	; 0x41
 800283a:	fa00 f203 	lsl.w	r2, r0, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_ADC_ConfigChannel+0x250>)
 8002848:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <HAL_ADC_ConfigChannel+0x254>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d10f      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1d8>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b12      	cmp	r3, #18
 800285a:	d10b      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_ADC_ConfigChannel+0x254>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12b      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x23a>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_ADC_ConfigChannel+0x258>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x1f4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b11      	cmp	r3, #17
 800288e:	d122      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_ADC_ConfigChannel+0x258>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_ADC_ConfigChannel+0x25c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_ADC_ConfigChannel+0x260>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	0c9a      	lsrs	r2, r3, #18
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40012300 	.word	0x40012300
 80028f0:	40012000 	.word	0x40012000
 80028f4:	10000012 	.word	0x10000012
 80028f8:	20000008 	.word	0x20000008
 80028fc:	431bde83 	.word	0x431bde83

08002900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <ADC_Init+0x1f0>)
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	021a      	lsls	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <ADC_Init+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	e00f      	b.n	80029fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0202 	bic.w	r2, r2, #2
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01b      	beq.n	8002a64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	3b01      	subs	r3, #1
 8002a58:	035a      	lsls	r2, r3, #13
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	e007      	b.n	8002a74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	051a      	lsls	r2, r3, #20
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab6:	025a      	lsls	r2, r3, #9
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	029a      	lsls	r2, r3, #10
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012300 	.word	0x40012300
 8002af4:	0f000001 	.word	0x0f000001

08002af8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13c      	bne.n	8002b8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12b      	bne.n	8002b84 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d127      	bne.n	8002b84 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d006      	beq.n	8002b50 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d119      	bne.n	8002b84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fe fbbb 	bl	8001300 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b8a:	e00e      	b.n	8002baa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff fd75 	bl	8002688 <HAL_ADC_ErrorCallback>
}
 8002b9e:	e004      	b.n	8002baa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7fe fb93 	bl	80012ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff fd4a 	bl	8002688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff29 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff3e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff8e 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff31 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffa2 	bl	8002d58 <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fac8 	bl	80023c0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e099      	b.n	8002f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5c:	e00f      	b.n	8002e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5e:	f7ff faaf 	bl	80023c0 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d908      	bls.n	8002e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e078      	b.n	8002f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e8      	bne.n	8002e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_DMA_Init+0x158>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d107      	bne.n	8002ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0307 	bic.w	r3, r3, #7
 8002efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d117      	bne.n	8002f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fb01 	bl	800352c <DMA_CheckFifoParam>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e016      	b.n	8002f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fab8 	bl	80034c0 <DMA_CalcBaseAndBitshift>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	223f      	movs	r2, #63	; 0x3f
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	f010803f 	.word	0xf010803f

08002f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x26>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e040      	b.n	8003024 <HAL_DMA_Start_IT+0xa8>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d12f      	bne.n	8003016 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fa4a 	bl	8003464 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0216 	orr.w	r2, r2, #22
 8002fea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0208 	orr.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e005      	b.n	8003022 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800303a:	f7ff f9c1 	bl	80023c0 <HAL_GetTick>
 800303e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d008      	beq.n	800305e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e052      	b.n	8003104 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0216 	bic.w	r2, r2, #22
 800306c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_DMA_Abort+0x62>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ae:	e013      	b.n	80030d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b0:	f7ff f986 	bl	80023c0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d90c      	bls.n	80030d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e015      	b.n	8003104 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e4      	bne.n	80030b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	223f      	movs	r2, #63	; 0x3f
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d004      	beq.n	800312a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00c      	b.n	8003144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2205      	movs	r2, #5
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800315c:	4b8e      	ldr	r3, [pc, #568]	; (8003398 <HAL_DMA_IRQHandler+0x248>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8e      	ldr	r2, [pc, #568]	; (800339c <HAL_DMA_IRQHandler+0x24c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2208      	movs	r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2208      	movs	r2, #8
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2201      	movs	r2, #1
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2204      	movs	r2, #4
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2210      	movs	r2, #16
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d043      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03c      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2210      	movs	r2, #16
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e01f      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e016      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0208 	bic.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2220      	movs	r2, #32
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808f 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8087 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2220      	movs	r2, #32
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d136      	bne.n	8003368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0216 	bic.w	r2, r2, #22
 8003308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_DMA_IRQHandler+0x1da>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0208 	bic.w	r2, r2, #8
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	223f      	movs	r2, #63	; 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07e      	beq.n	800345c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
        }
        return;
 8003366:	e079      	b.n	800345c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	2b00      	cmp	r3, #0
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e02c      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e01e      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0210 	bic.w	r2, r2, #16
 80033ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d032      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d022      	beq.n	800344a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2205      	movs	r2, #5
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	d307      	bcc.n	8003438 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f2      	bne.n	800341c <HAL_DMA_IRQHandler+0x2cc>
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003438:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x30e>
        return;
 800345c:	bf00      	nop
    }
  }
}
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003480:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d108      	bne.n	80034a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a2:	e007      	b.n	80034b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3b10      	subs	r3, #16
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <DMA_CalcBaseAndBitshift+0x64>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <DMA_CalcBaseAndBitshift+0x68>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d909      	bls.n	8003502 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003500:	e007      	b.n	8003512 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	aaaaaaab 	.word	0xaaaaaaab
 8003528:	08008a44 	.word	0x08008a44

0800352c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11f      	bne.n	8003586 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d856      	bhi.n	80035fa <DMA_CheckFifoParam+0xce>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <DMA_CheckFifoParam+0x28>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003565 	.word	0x08003565
 8003558:	08003577 	.word	0x08003577
 800355c:	08003565 	.word	0x08003565
 8003560:	080035fb 	.word	0x080035fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d046      	beq.n	80035fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003574:	e043      	b.n	80035fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357e:	d140      	bne.n	8003602 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003584:	e03d      	b.n	8003602 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d121      	bne.n	80035d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d837      	bhi.n	8003606 <DMA_CheckFifoParam+0xda>
 8003596:	a201      	add	r2, pc, #4	; (adr r2, 800359c <DMA_CheckFifoParam+0x70>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035b3 	.word	0x080035b3
 80035a4:	080035ad 	.word	0x080035ad
 80035a8:	080035c5 	.word	0x080035c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e030      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d025      	beq.n	800360a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c2:	e022      	b.n	800360a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035cc:	d11f      	bne.n	800360e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d2:	e01c      	b.n	800360e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d903      	bls.n	80035e2 <DMA_CheckFifoParam+0xb6>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d003      	beq.n	80035e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e0:	e018      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      break;
 80035e6:	e015      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00e      	beq.n	8003612 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e00b      	b.n	8003612 <DMA_CheckFifoParam+0xe6>
      break;
 80035fa:	bf00      	nop
 80035fc:	e00a      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e008      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e006      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e004      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;   
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
    }
  } 
  
  return status; 
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e159      	b.n	80038f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8148 	bne.w	80038ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003672:	2b02      	cmp	r3, #2
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a2 	beq.w	80038ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b57      	ldr	r3, [pc, #348]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4a56      	ldr	r2, [pc, #344]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	4b54      	ldr	r3, [pc, #336]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c6:	4a52      	ldr	r2, [pc, #328]	; (8003910 <HAL_GPIO_Init+0x2ec>)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	220f      	movs	r2, #15
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d019      	beq.n	8003826 <HAL_GPIO_Init+0x202>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_GPIO_Init+0x2f4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_GPIO_Init+0x1fe>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a47      	ldr	r2, [pc, #284]	; (800391c <HAL_GPIO_Init+0x2f8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00d      	beq.n	800381e <HAL_GPIO_Init+0x1fa>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_GPIO_Init+0x2fc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <HAL_GPIO_Init+0x1f6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_GPIO_Init+0x300>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_GPIO_Init+0x1f2>
 8003812:	2304      	movs	r3, #4
 8003814:	e008      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003816:	2307      	movs	r3, #7
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x204>
 800381a:	2303      	movs	r3, #3
 800381c:	e004      	b.n	8003828 <HAL_GPIO_Init+0x204>
 800381e:	2302      	movs	r3, #2
 8003820:	e002      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003826:	2300      	movs	r3, #0
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f002 0203 	and.w	r2, r2, #3
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003838:	4935      	ldr	r1, [pc, #212]	; (8003910 <HAL_GPIO_Init+0x2ec>)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <HAL_GPIO_Init+0x304>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_GPIO_Init+0x304>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e8:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	f67f aea2 	bls.w	8003640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	40013800 	.word	0x40013800
 8003914:	40020000 	.word	0x40020000
 8003918:	40020400 	.word	0x40020400
 800391c:	40020800 	.word	0x40020800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40021000 	.word	0x40021000
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003948:	e003      	b.n	8003952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	041a      	lsls	r2, r3, #16
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43d9      	mvns	r1, r3
 800397c:	887b      	ldrh	r3, [r7, #2]
 800397e:	400b      	ands	r3, r1
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e12b      	b.n	8003bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe fa90 	bl	8001ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f8:	f000 fd40 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 80039fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a81      	ldr	r2, [pc, #516]	; (8003c08 <HAL_I2C_Init+0x274>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d807      	bhi.n	8003a18 <HAL_I2C_Init+0x84>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_I2C_Init+0x278>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e006      	b.n	8003a26 <HAL_I2C_Init+0x92>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a7d      	ldr	r2, [pc, #500]	; (8003c10 <HAL_I2C_Init+0x27c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0e7      	b.n	8003bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a78      	ldr	r2, [pc, #480]	; (8003c14 <HAL_I2C_Init+0x280>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0c9b      	lsrs	r3, r3, #18
 8003a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_I2C_Init+0x274>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d802      	bhi.n	8003a68 <HAL_I2C_Init+0xd4>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	e009      	b.n	8003a7c <HAL_I2C_Init+0xe8>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	4a69      	ldr	r2, [pc, #420]	; (8003c18 <HAL_I2C_Init+0x284>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	495c      	ldr	r1, [pc, #368]	; (8003c08 <HAL_I2C_Init+0x274>)
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	d819      	bhi.n	8003ad0 <HAL_I2C_Init+0x13c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1e59      	subs	r1, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_I2C_Init+0x138>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e59      	subs	r1, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aca:	e051      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003acc:	2304      	movs	r3, #4
 8003ace:	e04f      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <HAL_I2C_Init+0x168>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e012      	b.n	8003b22 <HAL_I2C_Init+0x18e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	0099      	lsls	r1, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x196>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e022      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <HAL_I2C_Init+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e58      	subs	r0, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Init+0x1dc>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	6809      	ldr	r1, [r1, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6911      	ldr	r1, [r2, #16]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	000186a0 	.word	0x000186a0
 8003c0c:	001e847f 	.word	0x001e847f
 8003c10:	003d08ff 	.word	0x003d08ff
 8003c14:	431bde83 	.word	0x431bde83
 8003c18:	10624dd3 	.word	0x10624dd3

08003c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e267      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d075      	beq.n	8003d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d112      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05b      	beq.n	8003d24 <HAL_RCC_OscConfig+0x108>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d157      	bne.n	8003d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e242      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x74>
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a75      	ldr	r2, [pc, #468]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e01d      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x98>
 8003c9a:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6f      	ldr	r2, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6c      	ldr	r2, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fb74 	bl	80023c0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fb70 	bl	80023c0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e207      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0xc0>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fb60 	bl	80023c0 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe fb5c 	bl	80023c0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1f3      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	4b51      	ldr	r3, [pc, #324]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0xe8>
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d11c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1c7      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4937      	ldr	r1, [pc, #220]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	e03a      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8c:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_RCC_OscConfig+0x244>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fe fb15 	bl	80023c0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fb11 	bl	80023c0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e1a8      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4925      	ldr	r1, [pc, #148]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x244>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe faf4 	bl	80023c0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fe faf0 	bl	80023c0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e187      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d036      	beq.n	8003e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_RCC_OscConfig+0x248>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fe fad4 	bl	80023c0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fe fad0 	bl	80023c0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e167      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x200>
 8003e3a:	e01b      	b.n	8003e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_OscConfig+0x248>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fabd 	bl	80023c0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e00e      	b.n	8003e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fe fab9 	bl	80023c0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d907      	bls.n	8003e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e150      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470000 	.word	0x42470000
 8003e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ea      	bne.n	8003e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8097 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	4b7d      	ldr	r3, [pc, #500]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a7c      	ldr	r2, [pc, #496]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	4b77      	ldr	r3, [pc, #476]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d118      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebe:	4b74      	ldr	r3, [pc, #464]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eca:	f7fe fa79 	bl	80023c0 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fe fa75 	bl	80023c0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e10c      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x2ea>
 8003ef8:	4b64      	ldr	r3, [pc, #400]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a63      	ldr	r2, [pc, #396]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	e01c      	b.n	8003f40 <HAL_RCC_OscConfig+0x324>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x30c>
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5e      	ldr	r2, [pc, #376]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0x324>
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a54      	ldr	r2, [pc, #336]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0304 	bic.w	r3, r3, #4
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fe fa3a 	bl	80023c0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f50:	f7fe fa36 	bl	80023c0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0cb      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ee      	beq.n	8003f50 <HAL_RCC_OscConfig+0x334>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fe fa24 	bl	80023c0 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fe fa20 	bl	80023c0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0b5      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f92:	4b3e      	ldr	r3, [pc, #248]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ee      	bne.n	8003f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4a38      	ldr	r2, [pc, #224]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a1 	beq.w	80040fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d05c      	beq.n	8004080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d141      	bne.n	8004052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f9f4 	bl	80023c0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe f9f0 	bl	80023c0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e087      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	3b01      	subs	r3, #1
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	491b      	ldr	r1, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe f9c9 	bl	80023c0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe f9c5 	bl	80023c0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e05c      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x416>
 8004050:	e054      	b.n	80040fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe f9b2 	bl	80023c0 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe f9ae 	bl	80023c0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e045      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x444>
 800407e:	e03d      	b.n	80040fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e038      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
 8004094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x4ec>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d028      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d121      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d11a      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	3b01      	subs	r3, #1
 80040e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0cc      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b68      	ldr	r3, [pc, #416]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90c      	bls.n	8004148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b65      	ldr	r3, [pc, #404]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d044      	beq.n	800422c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e06f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e067      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4934      	ldr	r1, [pc, #208]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041fc:	f7fe f8e0 	bl	80023c0 <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7fe f8dc 	bl	80023c0 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 020c 	and.w	r2, r3, #12
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	429a      	cmp	r2, r3
 800422a:	d1eb      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20c      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe f840 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08008a2c 	.word	0x08008a2c
 80042d0:	20000008 	.word	0x20000008
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b090      	sub	sp, #64	; 0x40
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
 80042e4:	2300      	movs	r3, #0
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e8:	2300      	movs	r3, #0
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80a1 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x16c>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e09b      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_GetSysClockFreq+0x184>)
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004310:	e09b      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004316:	e098      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	627a      	str	r2, [r7, #36]	; 0x24
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004340:	2100      	movs	r1, #0
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004344:	fb03 f201 	mul.w	r2, r3, r1
 8004348:	2300      	movs	r3, #0
 800434a:	fb00 f303 	mul.w	r3, r0, r3
 800434e:	4413      	add	r3, r2
 8004350:	4a43      	ldr	r2, [pc, #268]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004352:	fba0 1202 	umull	r1, r2, r0, r2
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	460a      	mov	r2, r1
 800435a:	62ba      	str	r2, [r7, #40]	; 0x28
 800435c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435e:	4413      	add	r3, r2
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	2200      	movs	r2, #0
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	61fa      	str	r2, [r7, #28]
 800436a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004372:	f7fc fc21 	bl	8000bb8 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4613      	mov	r3, r2
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437e:	e053      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	2200      	movs	r2, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	617a      	str	r2, [r7, #20]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004392:	f04f 0b00 	mov.w	fp, #0
 8004396:	4652      	mov	r2, sl
 8004398:	465b      	mov	r3, fp
 800439a:	f04f 0000 	mov.w	r0, #0
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	0159      	lsls	r1, r3, #5
 80043a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a8:	0150      	lsls	r0, r2, #5
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	ebb2 080a 	subs.w	r8, r2, sl
 80043b2:	eb63 090b 	sbc.w	r9, r3, fp
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ca:	ebb2 0408 	subs.w	r4, r2, r8
 80043ce:	eb63 0509 	sbc.w	r5, r3, r9
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	00eb      	lsls	r3, r5, #3
 80043dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043e0:	00e2      	lsls	r2, r4, #3
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	eb14 030a 	adds.w	r3, r4, sl
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	eb45 030b 	adc.w	r3, r5, fp
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fe:	4629      	mov	r1, r5
 8004400:	028b      	lsls	r3, r1, #10
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004408:	4621      	mov	r1, r4
 800440a:	028a      	lsls	r2, r1, #10
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	2200      	movs	r2, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800441c:	f7fc fbcc 	bl	8000bb8 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004442:	e002      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetSysClockFreq+0x184>)
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800444c:	4618      	mov	r0, r3
 800444e:	3740      	adds	r7, #64	; 0x40
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	017d7840 	.word	0x017d7840

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000008 	.word	0x20000008

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08008a3c 	.word	0x08008a3c

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a8:	f7ff ffdc 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0b5b      	lsrs	r3, r3, #13
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08008a3c 	.word	0x08008a3c

080044cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e041      	b.n	8004562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fd3c 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f000 f9a8 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d001      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e044      	b.n	800460e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start_IT+0xb0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x6c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x6c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIM_Base_Start_IT+0xb4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x6c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_TIM_Base_Start_IT+0xb8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x6c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_Base_Start_IT+0xbc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x6c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIM_Base_Start_IT+0xc0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d010      	beq.n	800460c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	e007      	b.n	800460c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0202 	mvn.w	r2, #2
 8004664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8d2 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8c4 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8d5 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8ac 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f89e 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8af 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d020      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f886 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f878 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f889 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d020      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f860 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f852 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f863 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0201 	mvn.w	r2, #1
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc ff1a 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8e6 	bl	800498c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f834 	bl	800484c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8b8 	bl	8004978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <TIM_Base_SetConfig+0xfc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a37      	ldr	r2, [pc, #220]	; (8004960 <TIM_Base_SetConfig+0x100>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a36      	ldr	r2, [pc, #216]	; (8004964 <TIM_Base_SetConfig+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a35      	ldr	r2, [pc, #212]	; (8004968 <TIM_Base_SetConfig+0x108>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	; (800495c <TIM_Base_SetConfig+0xfc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_Base_SetConfig+0x100>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <TIM_Base_SetConfig+0x104>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <TIM_Base_SetConfig+0x108>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_Base_SetConfig+0x10c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <TIM_Base_SetConfig+0x110>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_Base_SetConfig+0x114>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0e      	ldr	r2, [pc, #56]	; (800495c <TIM_Base_SetConfig+0xfc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]
  }
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e042      	b.n	8004a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fafa 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fdbd 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d175      	bne.n	8004b4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_UART_Transmit+0x2c>
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e06e      	b.n	8004b4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2221      	movs	r2, #33	; 0x21
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7e:	f7fd fc9f 	bl	80023c0 <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a98:	d108      	bne.n	8004aac <HAL_UART_Transmit+0x6c>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e003      	b.n	8004ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ab4:	e02e      	b.n	8004b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb1f 	bl	8005104 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e03a      	b.n	8004b4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3302      	adds	r3, #2
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e007      	b.n	8004b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	3301      	adds	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1cb      	bne.n	8004ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	; 0x40
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 faeb 	bl	8005104 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e006      	b.n	8004b4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	4613      	mov	r3, r2
 8004b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d112      	bne.n	8004b96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_UART_Receive_IT+0x26>
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e00b      	b.n	8004b98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fb12 	bl	80051b6 <UART_Start_Receive_IT>
 8004b92:	4603      	mov	r3, r0
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0ba      	sub	sp, #232	; 0xe8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_UART_IRQHandler+0x66>
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fbf2 	bl	80053e8 <UART_Receive_IT>
      return;
 8004c04:	e25b      	b.n	80050be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80de 	beq.w	8004dcc <HAL_UART_IRQHandler+0x22c>
 8004c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80d1 	beq.w	8004dcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_UART_IRQHandler+0xae>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f043 0201 	orr.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_UART_IRQHandler+0xd2>
 8004c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f043 0202 	orr.w	r2, r3, #2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_UART_IRQHandler+0xf6>
 8004c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x126>
 8004ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	f043 0208 	orr.w	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 81f2 	beq.w	80050b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x14e>
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb7d 	bl	80053e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <HAL_UART_IRQHandler+0x17a>
 8004d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d04f      	beq.n	8004dba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa85 	bl	800522a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d141      	bne.n	8004db2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1d9      	bne.n	8004d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d013      	beq.n	8004daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	4a7e      	ldr	r2, [pc, #504]	; (8004f80 <HAL_UART_IRQHandler+0x3e0>)
 8004d88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe f9bc 	bl	800310c <HAL_DMA_Abort_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e00e      	b.n	8004dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f994 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	e00a      	b.n	8004dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f990 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	e006      	b.n	8004dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f98c 	bl	80050d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004dc6:	e175      	b.n	80050b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	bf00      	nop
    return;
 8004dca:	e173      	b.n	80050b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	f040 814f 	bne.w	8005074 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8148 	beq.w	8005074 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8141 	beq.w	8005074 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	f040 80b6 	bne.w	8004f84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8145 	beq.w	80050b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f080 813e 	bcs.w	80050b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	f000 8088 	beq.w	8004f62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1d9      	bne.n	8004e52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3314      	adds	r3, #20
 8004ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e1      	bne.n	8004e9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e3      	bne.n	8004eda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e3      	bne.n	8004f20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe f865 	bl	800302c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8b7 	bl	80050ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f7e:	e09b      	b.n	80050b8 <HAL_UART_IRQHandler+0x518>
 8004f80:	080052f1 	.word	0x080052f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 808e 	beq.w	80050bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8089 	beq.w	80050bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fce:	647a      	str	r2, [r7, #68]	; 0x44
 8004fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e3      	bne.n	8004faa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005006:	633a      	str	r2, [r7, #48]	; 0x30
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	60fb      	str	r3, [r7, #12]
   return(result);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800504c:	61fa      	str	r2, [r7, #28]
 800504e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	617b      	str	r3, [r7, #20]
   return(result);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e3      	bne.n	8005028 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f83d 	bl	80050ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005072:	e023      	b.n	80050bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_UART_IRQHandler+0x4f4>
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f943 	bl	8005318 <UART_Transmit_IT>
    return;
 8005092:	e014      	b.n	80050be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00e      	beq.n	80050be <HAL_UART_IRQHandler+0x51e>
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f983 	bl	80053b8 <UART_EndTransmit_IT>
    return;
 80050b2:	e004      	b.n	80050be <HAL_UART_IRQHandler+0x51e>
    return;
 80050b4:	bf00      	nop
 80050b6:	e002      	b.n	80050be <HAL_UART_IRQHandler+0x51e>
      return;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <HAL_UART_IRQHandler+0x51e>
      return;
 80050bc:	bf00      	nop
  }
}
 80050be:	37e8      	adds	r7, #232	; 0xe8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005114:	e03b      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d037      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fd f94f 	bl	80023c0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <UART_WaitOnFlagUntilTimeout+0x30>
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e03a      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d023      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d020      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d01d      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d116      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f857 	bl	800522a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2208      	movs	r2, #8
 8005180:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e00f      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d0b4      	beq.n	8005116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2222      	movs	r2, #34	; 0x22
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0220 	orr.w	r2, r2, #32
 800521a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522a:	b480      	push	{r7}
 800522c:	b095      	sub	sp, #84	; 0x54
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005252:	643a      	str	r2, [r7, #64]	; 0x40
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	61fb      	str	r3, [r7, #28]
   return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	64bb      	str	r3, [r7, #72]	; 0x48
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d119      	bne.n	80052d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c2:	61ba      	str	r2, [r7, #24]
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052e4:	bf00      	nop
 80052e6:	3754      	adds	r7, #84	; 0x54
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff fee4 	bl	80050d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b21      	cmp	r3, #33	; 0x21
 800532a:	d13e      	bne.n	80053aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005334:	d114      	bne.n	8005360 <UART_Transmit_IT+0x48>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d110      	bne.n	8005360 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005352:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]
 800535e:	e008      	b.n	8005372 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6211      	str	r1, [r2, #32]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4619      	mov	r1, r3
 8005380:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005394:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fe73 	bl	80050c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b22      	cmp	r3, #34	; 0x22
 80053fa:	f040 80ae 	bne.w	800555a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005406:	d117      	bne.n	8005438 <UART_Receive_IT+0x50>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d113      	bne.n	8005438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	b29a      	uxth	r2, r3
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	629a      	str	r2, [r3, #40]	; 0x28
 8005436:	e026      	b.n	8005486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d007      	beq.n	800545c <UART_Receive_IT+0x74>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <UART_Receive_IT+0x82>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b2da      	uxtb	r2, r3
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e008      	b.n	800547c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4619      	mov	r1, r3
 8005494:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005496:	2b00      	cmp	r3, #0
 8005498:	d15d      	bne.n	8005556 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0220 	bic.w	r2, r2, #32
 80054a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d135      	bne.n	800554c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d10a      	bne.n	800553e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fdd1 	bl	80050ec <HAL_UARTEx_RxEventCallback>
 800554a:	e002      	b.n	8005552 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc f865 	bl	800161c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e002      	b.n	800555c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b0c0      	sub	sp, #256	; 0x100
 800556a:	af00      	add	r7, sp, #0
 800556c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	ea40 0301 	orr.w	r3, r0, r1
 800558c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055bc:	f021 010c 	bic.w	r1, r1, #12
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ca:	430b      	orrs	r3, r1
 80055cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	6999      	ldr	r1, [r3, #24]
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	ea40 0301 	orr.w	r3, r0, r1
 80055ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <UART_SetConfig+0x2cc>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d005      	beq.n	8005604 <UART_SetConfig+0xa0>
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8d      	ldr	r3, [pc, #564]	; (8005834 <UART_SetConfig+0x2d0>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d104      	bne.n	800560e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe ff4e 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8005608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800560c:	e003      	b.n	8005616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7fe ff35 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	f040 810c 	bne.w	800583c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800562e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	1891      	adds	r1, r2, r2
 800563c:	65b9      	str	r1, [r7, #88]	; 0x58
 800563e:	415b      	adcs	r3, r3
 8005640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005646:	4621      	mov	r1, r4
 8005648:	eb12 0801 	adds.w	r8, r2, r1
 800564c:	4629      	mov	r1, r5
 800564e:	eb43 0901 	adc.w	r9, r3, r1
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	4623      	mov	r3, r4
 800566c:	eb18 0303 	adds.w	r3, r8, r3
 8005670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005674:	462b      	mov	r3, r5
 8005676:	eb49 0303 	adc.w	r3, r9, r3
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800568a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800568e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005692:	460b      	mov	r3, r1
 8005694:	18db      	adds	r3, r3, r3
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
 8005698:	4613      	mov	r3, r2
 800569a:	eb42 0303 	adc.w	r3, r2, r3
 800569e:	657b      	str	r3, [r7, #84]	; 0x54
 80056a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056a8:	f7fb fa86 	bl	8000bb8 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4b61      	ldr	r3, [pc, #388]	; (8005838 <UART_SetConfig+0x2d4>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	011c      	lsls	r4, r3, #4
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d4:	415b      	adcs	r3, r3
 80056d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056dc:	4641      	mov	r1, r8
 80056de:	eb12 0a01 	adds.w	sl, r2, r1
 80056e2:	4649      	mov	r1, r9
 80056e4:	eb43 0b01 	adc.w	fp, r3, r1
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	4692      	mov	sl, r2
 80056fe:	469b      	mov	fp, r3
 8005700:	4643      	mov	r3, r8
 8005702:	eb1a 0303 	adds.w	r3, sl, r3
 8005706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800570a:	464b      	mov	r3, r9
 800570c:	eb4b 0303 	adc.w	r3, fp, r3
 8005710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005728:	460b      	mov	r3, r1
 800572a:	18db      	adds	r3, r3, r3
 800572c:	643b      	str	r3, [r7, #64]	; 0x40
 800572e:	4613      	mov	r3, r2
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
 8005736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800573a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800573e:	f7fb fa3b 	bl	8000bb8 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b3b      	ldr	r3, [pc, #236]	; (8005838 <UART_SetConfig+0x2d4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	; 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800575e:	4b36      	ldr	r3, [pc, #216]	; (8005838 <UART_SetConfig+0x2d4>)
 8005760:	fba3 2302 	umull	r2, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800576c:	441c      	add	r4, r3
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800577c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	63b9      	str	r1, [r7, #56]	; 0x38
 8005788:	415b      	adcs	r3, r3
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6339      	str	r1, [r7, #48]	; 0x30
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057fa:	f7fb f9dd 	bl	8000bb8 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <UART_SetConfig+0x2d4>)
 8005804:	fba3 1302 	umull	r1, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	2164      	movs	r1, #100	; 0x64
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3332      	adds	r3, #50	; 0x32
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <UART_SetConfig+0x2d4>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f003 0207 	and.w	r2, r3, #7
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4422      	add	r2, r4
 800582a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582c:	e106      	b.n	8005a3c <UART_SetConfig+0x4d8>
 800582e:	bf00      	nop
 8005830:	40011000 	.word	0x40011000
 8005834:	40011400 	.word	0x40011400
 8005838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800583c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800584a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	1891      	adds	r1, r2, r2
 8005854:	6239      	str	r1, [r7, #32]
 8005856:	415b      	adcs	r3, r3
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
 800585a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585e:	4641      	mov	r1, r8
 8005860:	1854      	adds	r4, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0501 	adc.w	r5, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	00eb      	lsls	r3, r5, #3
 8005872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005876:	00e2      	lsls	r2, r4, #3
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	4643      	mov	r3, r8
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005884:	464b      	mov	r3, r9
 8005886:	eb45 0303 	adc.w	r3, r5, r3
 800588a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800589a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058aa:	4629      	mov	r1, r5
 80058ac:	008b      	lsls	r3, r1, #2
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b4:	4621      	mov	r1, r4
 80058b6:	008a      	lsls	r2, r1, #2
 80058b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058bc:	f7fb f97c 	bl	8000bb8 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4b60      	ldr	r3, [pc, #384]	; (8005a48 <UART_SetConfig+0x4e4>)
 80058c6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	011c      	lsls	r4, r3, #4
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	61b9      	str	r1, [r7, #24]
 80058e8:	415b      	adcs	r3, r3
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6139      	str	r1, [r7, #16]
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005924:	464b      	mov	r3, r9
 8005926:	460a      	mov	r2, r1
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	67bb      	str	r3, [r7, #120]	; 0x78
 800593a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005948:	4649      	mov	r1, r9
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	4641      	mov	r1, r8
 800594e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005952:	4641      	mov	r1, r8
 8005954:	008a      	lsls	r2, r1, #2
 8005956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800595a:	f7fb f92d 	bl	8000bb8 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b38      	ldr	r3, [pc, #224]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	; 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a33      	ldr	r2, [pc, #204]	; (8005a48 <UART_SetConfig+0x4e4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005984:	441c      	add	r4, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	673b      	str	r3, [r7, #112]	; 0x70
 800598e:	677a      	str	r2, [r7, #116]	; 0x74
 8005990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	415b      	adcs	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d6:	464b      	mov	r3, r9
 80059d8:	460a      	mov	r2, r1
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ea:	667a      	str	r2, [r7, #100]	; 0x64
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a0a:	f7fb f8d5 	bl	8000bb8 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	; 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4422      	add	r2, r4
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <arm_fir_init_f32>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	9c04      	ldr	r4, [sp, #16]
 8005a50:	6082      	str	r2, [r0, #8]
 8005a52:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005a56:	3c01      	subs	r4, #1
 8005a58:	4605      	mov	r5, r0
 8005a5a:	440c      	add	r4, r1
 8005a5c:	8001      	strh	r1, [r0, #0]
 8005a5e:	461e      	mov	r6, r3
 8005a60:	00a2      	lsls	r2, r4, #2
 8005a62:	4618      	mov	r0, r3
 8005a64:	2100      	movs	r1, #0
 8005a66:	f000 ffd2 	bl	8006a0e <memset>
 8005a6a:	606e      	str	r6, [r5, #4]
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	bf00      	nop

08005a70 <arm_fir_f32>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b10 	vpush	{d8-d15}
 8005a78:	b089      	sub	sp, #36	; 0x24
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	9003      	str	r0, [sp, #12]
 8005a7e:	8800      	ldrh	r0, [r0, #0]
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	461e      	mov	r6, r3
 8005a84:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8005a88:	9001      	str	r0, [sp, #4]
 8005a8a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8005a94:	08f3      	lsrs	r3, r6, #3
 8005a96:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8005a9a:	9400      	str	r4, [sp, #0]
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	f000 81ef 	beq.w	8005e80 <arm_fir_f32+0x410>
 8005aa2:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8005aa6:	469e      	mov	lr, r3
 8005aa8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005aac:	1f1e      	subs	r6, r3, #4
 8005aae:	4625      	mov	r5, r4
 8005ab0:	9605      	str	r6, [sp, #20]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	eb08 0003 	add.w	r0, r8, r3
 8005ab8:	f004 0a07 	and.w	sl, r4, #7
 8005abc:	4613      	mov	r3, r2
 8005abe:	f10c 0420 	add.w	r4, ip, #32
 8005ac2:	f8cd c018 	str.w	ip, [sp, #24]
 8005ac6:	4684      	mov	ip, r0
 8005ac8:	4648      	mov	r0, r9
 8005aca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005ace:	9107      	str	r1, [sp, #28]
 8005ad0:	f105 0720 	add.w	r7, r5, #32
 8005ad4:	f101 0620 	add.w	r6, r1, #32
 8005ad8:	f102 0520 	add.w	r5, r2, #32
 8005adc:	4652      	mov	r2, sl
 8005ade:	469a      	mov	sl, r3
 8005ae0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005ae4:	f847 3c20 	str.w	r3, [r7, #-32]
 8005ae8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8005aec:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005af0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005af4:	f847 3c18 	str.w	r3, [r7, #-24]
 8005af8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8005afc:	f847 3c14 	str.w	r3, [r7, #-20]
 8005b00:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005b04:	f847 3c10 	str.w	r3, [r7, #-16]
 8005b08:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8005b0c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005b10:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005b14:	f847 3c08 	str.w	r3, [r7, #-8]
 8005b18:	eddf 3af1 	vldr	s7, [pc, #964]	; 8005ee0 <arm_fir_f32+0x470>
 8005b1c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005b20:	f847 3c04 	str.w	r3, [r7, #-4]
 8005b24:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8005b28:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8005b2c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005b30:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8005b34:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005b38:	ed54 0a03 	vldr	s1, [r4, #-12]
 8005b3c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005b40:	1f21      	subs	r1, r4, #4
 8005b42:	eef0 8a63 	vmov.f32	s17, s7
 8005b46:	eef0 9a63 	vmov.f32	s19, s7
 8005b4a:	eef0 aa63 	vmov.f32	s21, s7
 8005b4e:	eef0 ba63 	vmov.f32	s23, s7
 8005b52:	eeb0 ca63 	vmov.f32	s24, s7
 8005b56:	eef0 ca63 	vmov.f32	s25, s7
 8005b5a:	eeb0 da63 	vmov.f32	s26, s7
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f000 81e8 	beq.w	8005f34 <arm_fir_f32+0x4c4>
 8005b64:	f108 0120 	add.w	r1, r8, #32
 8005b68:	f104 031c 	add.w	r3, r4, #28
 8005b6c:	4683      	mov	fp, r0
 8005b6e:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8005b72:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8005b76:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8005b7a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8005b7e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8005b82:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005b86:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005b8a:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005b8e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005b92:	ee24 fa03 	vmul.f32	s30, s8, s6
 8005b96:	ee64 ea22 	vmul.f32	s29, s8, s5
 8005b9a:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8005b9e:	ee24 ea02 	vmul.f32	s28, s8, s4
 8005ba2:	ee64 da21 	vmul.f32	s27, s8, s3
 8005ba6:	ee24 ba01 	vmul.f32	s22, s8, s2
 8005baa:	ee24 aa20 	vmul.f32	s20, s8, s1
 8005bae:	ee24 9a00 	vmul.f32	s18, s8, s0
 8005bb2:	ee24 4a08 	vmul.f32	s8, s8, s16
 8005bb6:	ee3f da0d 	vadd.f32	s26, s30, s26
 8005bba:	ee74 3a23 	vadd.f32	s7, s8, s7
 8005bbe:	ee24 faa2 	vmul.f32	s30, s9, s5
 8005bc2:	ee7e caac 	vadd.f32	s25, s29, s25
 8005bc6:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8005bca:	ee64 ea82 	vmul.f32	s29, s9, s4
 8005bce:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005bd2:	ee7d baab 	vadd.f32	s23, s27, s23
 8005bd6:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8005bda:	ee64 da81 	vmul.f32	s27, s9, s2
 8005bde:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005be2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005be6:	ee24 baa0 	vmul.f32	s22, s9, s1
 8005bea:	ee24 aa80 	vmul.f32	s20, s9, s0
 8005bee:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005bf2:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005bf6:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005bfa:	ee25 4a02 	vmul.f32	s8, s10, s4
 8005bfe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005c02:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005c06:	ee7e caac 	vadd.f32	s25, s29, s25
 8005c0a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005c0e:	ee65 ea21 	vmul.f32	s29, s10, s3
 8005c12:	ee25 ea01 	vmul.f32	s28, s10, s2
 8005c16:	ee7d baab 	vadd.f32	s23, s27, s23
 8005c1a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005c1e:	ee65 da20 	vmul.f32	s27, s10, s1
 8005c22:	ee25 ba00 	vmul.f32	s22, s10, s0
 8005c26:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005c2a:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005c2e:	ee28 aa05 	vmul.f32	s20, s16, s10
 8005c32:	ee23 9a05 	vmul.f32	s18, s6, s10
 8005c36:	ee3d da0f 	vadd.f32	s26, s26, s30
 8005c3a:	ee25 5a22 	vmul.f32	s10, s10, s5
 8005c3e:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8005c42:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005c46:	ed53 1a04 	vldr	s3, [r3, #-16]
 8005c4a:	ee7e caac 	vadd.f32	s25, s29, s25
 8005c4e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005c52:	ee65 ea81 	vmul.f32	s29, s11, s2
 8005c56:	ee25 eaa0 	vmul.f32	s28, s11, s1
 8005c5a:	ee7d baab 	vadd.f32	s23, s27, s23
 8005c5e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005c62:	ee65 da80 	vmul.f32	s27, s11, s0
 8005c66:	ee28 ba25 	vmul.f32	s22, s16, s11
 8005c6a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005c6e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005c72:	ee23 aa25 	vmul.f32	s20, s6, s11
 8005c76:	ee22 9aa5 	vmul.f32	s18, s5, s11
 8005c7a:	ee3d da04 	vadd.f32	s26, s26, s8
 8005c7e:	ee65 5a82 	vmul.f32	s11, s11, s4
 8005c82:	ee66 4a01 	vmul.f32	s9, s12, s2
 8005c86:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005c8a:	ed13 1a03 	vldr	s2, [r3, #-12]
 8005c8e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8005c92:	ee3d da23 	vadd.f32	s26, s26, s7
 8005c96:	ee22 5a06 	vmul.f32	s10, s4, s12
 8005c9a:	ee7e caac 	vadd.f32	s25, s29, s25
 8005c9e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005ca2:	ee66 ea20 	vmul.f32	s29, s12, s1
 8005ca6:	ee26 ea00 	vmul.f32	s28, s12, s0
 8005caa:	ee7d baab 	vadd.f32	s23, s27, s23
 8005cae:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005cb2:	ee68 da06 	vmul.f32	s27, s16, s12
 8005cb6:	ee23 ba06 	vmul.f32	s22, s6, s12
 8005cba:	ee22 aa86 	vmul.f32	s20, s5, s12
 8005cbe:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005cc2:	ee26 6a21 	vmul.f32	s12, s12, s3
 8005cc6:	ee26 9aa0 	vmul.f32	s18, s13, s1
 8005cca:	ee36 6a25 	vadd.f32	s12, s12, s11
 8005cce:	ed53 0a02 	vldr	s1, [r3, #-8]
 8005cd2:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8005cd6:	ee3d da24 	vadd.f32	s26, s26, s9
 8005cda:	ee7e caac 	vadd.f32	s25, s29, s25
 8005cde:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005ce2:	ee66 ea80 	vmul.f32	s29, s13, s0
 8005ce6:	ee28 ea26 	vmul.f32	s28, s16, s13
 8005cea:	ee7d baab 	vadd.f32	s23, s27, s23
 8005cee:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005cf2:	ee63 da26 	vmul.f32	s27, s6, s13
 8005cf6:	ee22 baa6 	vmul.f32	s22, s5, s13
 8005cfa:	ee3a aa29 	vadd.f32	s20, s20, s19
 8005cfe:	ee75 8a28 	vadd.f32	s17, s10, s17
 8005d02:	ee62 9a26 	vmul.f32	s19, s4, s13
 8005d06:	ee66 6a81 	vmul.f32	s13, s13, s2
 8005d0a:	ee27 5a00 	vmul.f32	s10, s14, s0
 8005d0e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005d12:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8005d16:	ee7e caac 	vadd.f32	s25, s29, s25
 8005d1a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005d1e:	ee68 ea07 	vmul.f32	s29, s16, s14
 8005d22:	ee23 ea07 	vmul.f32	s28, s6, s14
 8005d26:	ee7d baab 	vadd.f32	s23, s27, s23
 8005d2a:	ee22 ba07 	vmul.f32	s22, s4, s14
 8005d2e:	ee62 da87 	vmul.f32	s27, s5, s14
 8005d32:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005d36:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005d3a:	ee61 9a87 	vmul.f32	s19, s3, s14
 8005d3e:	ee67 3a20 	vmul.f32	s7, s14, s1
 8005d42:	ed13 0a01 	vldr	s0, [r3, #-4]
 8005d46:	ee3d da09 	vadd.f32	s26, s26, s18
 8005d4a:	ee21 6a07 	vmul.f32	s12, s2, s14
 8005d4e:	ee3d da05 	vadd.f32	s26, s26, s10
 8005d52:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005d56:	ee63 5a27 	vmul.f32	s11, s6, s15
 8005d5a:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8005d5e:	ee62 4a27 	vmul.f32	s9, s4, s15
 8005d62:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8005d66:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005d6a:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8005d6e:	ee61 9a27 	vmul.f32	s19, s2, s15
 8005d72:	ee36 7a28 	vadd.f32	s14, s12, s17
 8005d76:	ee7e caac 	vadd.f32	s25, s29, s25
 8005d7a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8005d7e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005d82:	ee7d baab 	vadd.f32	s23, s27, s23
 8005d86:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8005d8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d8e:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d92:	f101 0120 	add.w	r1, r1, #32
 8005d96:	ee38 da0d 	vadd.f32	s26, s16, s26
 8005d9a:	ee75 caac 	vadd.f32	s25, s11, s25
 8005d9e:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8005da2:	ee74 baab 	vadd.f32	s23, s9, s23
 8005da6:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8005daa:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8005dae:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005db2:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8005db6:	f103 0320 	add.w	r3, r3, #32
 8005dba:	f47f aed8 	bne.w	8005b6e <arm_fir_f32+0xfe>
 8005dbe:	eb09 0104 	add.w	r1, r9, r4
 8005dc2:	46e3      	mov	fp, ip
 8005dc4:	b3a2      	cbz	r2, 8005e30 <arm_fir_f32+0x3c0>
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	ecbb 6a01 	vldmia	fp!, {s12}
 8005dcc:	ecf1 7a01 	vldmia	r1!, {s15}
 8005dd0:	ee26 3a03 	vmul.f32	s6, s12, s6
 8005dd4:	ee26 4a22 	vmul.f32	s8, s12, s5
 8005dd8:	ee66 4a02 	vmul.f32	s9, s12, s4
 8005ddc:	ee26 5a21 	vmul.f32	s10, s12, s3
 8005de0:	ee66 5a01 	vmul.f32	s11, s12, s2
 8005de4:	ee66 6a20 	vmul.f32	s13, s12, s1
 8005de8:	ee26 7a00 	vmul.f32	s14, s12, s0
 8005dec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005df0:	3b01      	subs	r3, #1
 8005df2:	ee3d da03 	vadd.f32	s26, s26, s6
 8005df6:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005dfa:	eeb0 3a62 	vmov.f32	s6, s5
 8005dfe:	ee3c ca24 	vadd.f32	s24, s24, s9
 8005e02:	eef0 2a42 	vmov.f32	s5, s4
 8005e06:	ee7b ba85 	vadd.f32	s23, s23, s10
 8005e0a:	eeb0 2a61 	vmov.f32	s4, s3
 8005e0e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8005e12:	eef0 1a41 	vmov.f32	s3, s2
 8005e16:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8005e1a:	eeb0 1a60 	vmov.f32	s2, s1
 8005e1e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005e22:	eef0 0a40 	vmov.f32	s1, s0
 8005e26:	ee73 3a86 	vadd.f32	s7, s7, s12
 8005e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e2e:	d1cb      	bne.n	8005dc8 <arm_fir_f32+0x358>
 8005e30:	f1be 0e01 	subs.w	lr, lr, #1
 8005e34:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8005e38:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8005e3c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8005e40:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8005e44:	ed45 aa04 	vstr	s21, [r5, #-16]
 8005e48:	ed45 9a03 	vstr	s19, [r5, #-12]
 8005e4c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8005e50:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005e54:	f107 0720 	add.w	r7, r7, #32
 8005e58:	f106 0620 	add.w	r6, r6, #32
 8005e5c:	f104 0420 	add.w	r4, r4, #32
 8005e60:	f105 0520 	add.w	r5, r5, #32
 8005e64:	f47f ae3c 	bne.w	8005ae0 <arm_fir_f32+0x70>
 8005e68:	9b02      	ldr	r3, [sp, #8]
 8005e6a:	9800      	ldr	r0, [sp, #0]
 8005e6c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005e70:	9907      	ldr	r1, [sp, #28]
 8005e72:	015b      	lsls	r3, r3, #5
 8005e74:	4652      	mov	r2, sl
 8005e76:	4418      	add	r0, r3
 8005e78:	9000      	str	r0, [sp, #0]
 8005e7a:	4419      	add	r1, r3
 8005e7c:	449c      	add	ip, r3
 8005e7e:	441a      	add	r2, r3
 8005e80:	9b04      	ldr	r3, [sp, #16]
 8005e82:	f013 0e07 	ands.w	lr, r3, #7
 8005e86:	d01f      	beq.n	8005ec8 <arm_fir_f32+0x458>
 8005e88:	9f00      	ldr	r7, [sp, #0]
 8005e8a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e8e:	4676      	mov	r6, lr
 8005e90:	4665      	mov	r5, ip
 8005e92:	f851 3b04 	ldr.w	r3, [r1], #4
 8005e96:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005ee0 <arm_fir_f32+0x470>
 8005e9a:	f847 3b04 	str.w	r3, [r7], #4
 8005e9e:	4644      	mov	r4, r8
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	ecb0 7a01 	vldmia	r0!, {s14}
 8005ea8:	ecf4 7a01 	vldmia	r4!, {s15}
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005eb6:	d1f5      	bne.n	8005ea4 <arm_fir_f32+0x434>
 8005eb8:	3e01      	subs	r6, #1
 8005eba:	ece2 6a01 	vstmia	r2!, {s13}
 8005ebe:	f105 0504 	add.w	r5, r5, #4
 8005ec2:	d1e6      	bne.n	8005e92 <arm_fir_f32+0x422>
 8005ec4:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	1e59      	subs	r1, r3, #1
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	088e      	lsrs	r6, r1, #2
 8005ed0:	685c      	ldr	r4, [r3, #4]
 8005ed2:	d020      	beq.n	8005f16 <arm_fir_f32+0x4a6>
 8005ed4:	f104 0210 	add.w	r2, r4, #16
 8005ed8:	f10c 0310 	add.w	r3, ip, #16
 8005edc:	4630      	mov	r0, r6
 8005ede:	e001      	b.n	8005ee4 <arm_fir_f32+0x474>
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005ee8:	f842 5c10 	str.w	r5, [r2, #-16]
 8005eec:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005ef0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005ef4:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005ef8:	f842 5c08 	str.w	r5, [r2, #-8]
 8005efc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005f00:	f842 5c04 	str.w	r5, [r2, #-4]
 8005f04:	3801      	subs	r0, #1
 8005f06:	f103 0310 	add.w	r3, r3, #16
 8005f0a:	f102 0210 	add.w	r2, r2, #16
 8005f0e:	d1e9      	bne.n	8005ee4 <arm_fir_f32+0x474>
 8005f10:	0133      	lsls	r3, r6, #4
 8005f12:	441c      	add	r4, r3
 8005f14:	449c      	add	ip, r3
 8005f16:	f011 0303 	ands.w	r3, r1, #3
 8005f1a:	d006      	beq.n	8005f2a <arm_fir_f32+0x4ba>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f22:	f842 1b04 	str.w	r1, [r2], #4
 8005f26:	3b01      	subs	r3, #1
 8005f28:	d1f9      	bne.n	8005f1e <arm_fir_f32+0x4ae>
 8005f2a:	b009      	add	sp, #36	; 0x24
 8005f2c:	ecbd 8b10 	vpop	{d8-d15}
 8005f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f34:	46c3      	mov	fp, r8
 8005f36:	e745      	b.n	8005dc4 <arm_fir_f32+0x354>

08005f38 <__cvt>:
 8005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	ec55 4b10 	vmov	r4, r5, d0
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	460e      	mov	r6, r1
 8005f44:	4619      	mov	r1, r3
 8005f46:	462b      	mov	r3, r5
 8005f48:	bfbb      	ittet	lt
 8005f4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f4e:	461d      	movlt	r5, r3
 8005f50:	2300      	movge	r3, #0
 8005f52:	232d      	movlt	r3, #45	; 0x2d
 8005f54:	700b      	strb	r3, [r1, #0]
 8005f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	f023 0820 	bic.w	r8, r3, #32
 8005f62:	bfbc      	itt	lt
 8005f64:	4622      	movlt	r2, r4
 8005f66:	4614      	movlt	r4, r2
 8005f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f6c:	d005      	beq.n	8005f7a <__cvt+0x42>
 8005f6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f72:	d100      	bne.n	8005f76 <__cvt+0x3e>
 8005f74:	3601      	adds	r6, #1
 8005f76:	2102      	movs	r1, #2
 8005f78:	e000      	b.n	8005f7c <__cvt+0x44>
 8005f7a:	2103      	movs	r1, #3
 8005f7c:	ab03      	add	r3, sp, #12
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	ab02      	add	r3, sp, #8
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	ec45 4b10 	vmov	d0, r4, r5
 8005f88:	4653      	mov	r3, sl
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	f000 fe58 	bl	8006c40 <_dtoa_r>
 8005f90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f94:	4607      	mov	r7, r0
 8005f96:	d102      	bne.n	8005f9e <__cvt+0x66>
 8005f98:	f019 0f01 	tst.w	r9, #1
 8005f9c:	d022      	beq.n	8005fe4 <__cvt+0xac>
 8005f9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fa2:	eb07 0906 	add.w	r9, r7, r6
 8005fa6:	d110      	bne.n	8005fca <__cvt+0x92>
 8005fa8:	783b      	ldrb	r3, [r7, #0]
 8005faa:	2b30      	cmp	r3, #48	; 0x30
 8005fac:	d10a      	bne.n	8005fc4 <__cvt+0x8c>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fba:	b918      	cbnz	r0, 8005fc4 <__cvt+0x8c>
 8005fbc:	f1c6 0601 	rsb	r6, r6, #1
 8005fc0:	f8ca 6000 	str.w	r6, [sl]
 8005fc4:	f8da 3000 	ldr.w	r3, [sl]
 8005fc8:	4499      	add	r9, r3
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fd81 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd6:	b108      	cbz	r0, 8005fdc <__cvt+0xa4>
 8005fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fdc:	2230      	movs	r2, #48	; 0x30
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	454b      	cmp	r3, r9
 8005fe2:	d307      	bcc.n	8005ff4 <__cvt+0xbc>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fe8:	1bdb      	subs	r3, r3, r7
 8005fea:	4638      	mov	r0, r7
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	b004      	add	sp, #16
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	9103      	str	r1, [sp, #12]
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	e7f0      	b.n	8005fde <__cvt+0xa6>

08005ffc <__exponent>:
 8005ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ffe:	4603      	mov	r3, r0
 8006000:	2900      	cmp	r1, #0
 8006002:	bfb8      	it	lt
 8006004:	4249      	neglt	r1, r1
 8006006:	f803 2b02 	strb.w	r2, [r3], #2
 800600a:	bfb4      	ite	lt
 800600c:	222d      	movlt	r2, #45	; 0x2d
 800600e:	222b      	movge	r2, #43	; 0x2b
 8006010:	2909      	cmp	r1, #9
 8006012:	7042      	strb	r2, [r0, #1]
 8006014:	dd2a      	ble.n	800606c <__exponent+0x70>
 8006016:	f10d 0207 	add.w	r2, sp, #7
 800601a:	4617      	mov	r7, r2
 800601c:	260a      	movs	r6, #10
 800601e:	4694      	mov	ip, r2
 8006020:	fb91 f5f6 	sdiv	r5, r1, r6
 8006024:	fb06 1415 	mls	r4, r6, r5, r1
 8006028:	3430      	adds	r4, #48	; 0x30
 800602a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800602e:	460c      	mov	r4, r1
 8006030:	2c63      	cmp	r4, #99	; 0x63
 8006032:	f102 32ff 	add.w	r2, r2, #4294967295
 8006036:	4629      	mov	r1, r5
 8006038:	dcf1      	bgt.n	800601e <__exponent+0x22>
 800603a:	3130      	adds	r1, #48	; 0x30
 800603c:	f1ac 0402 	sub.w	r4, ip, #2
 8006040:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006044:	1c41      	adds	r1, r0, #1
 8006046:	4622      	mov	r2, r4
 8006048:	42ba      	cmp	r2, r7
 800604a:	d30a      	bcc.n	8006062 <__exponent+0x66>
 800604c:	f10d 0209 	add.w	r2, sp, #9
 8006050:	eba2 020c 	sub.w	r2, r2, ip
 8006054:	42bc      	cmp	r4, r7
 8006056:	bf88      	it	hi
 8006058:	2200      	movhi	r2, #0
 800605a:	4413      	add	r3, r2
 800605c:	1a18      	subs	r0, r3, r0
 800605e:	b003      	add	sp, #12
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006062:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006066:	f801 5f01 	strb.w	r5, [r1, #1]!
 800606a:	e7ed      	b.n	8006048 <__exponent+0x4c>
 800606c:	2330      	movs	r3, #48	; 0x30
 800606e:	3130      	adds	r1, #48	; 0x30
 8006070:	7083      	strb	r3, [r0, #2]
 8006072:	70c1      	strb	r1, [r0, #3]
 8006074:	1d03      	adds	r3, r0, #4
 8006076:	e7f1      	b.n	800605c <__exponent+0x60>

08006078 <_printf_float>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	ed2d 8b02 	vpush	{d8}
 8006080:	b08d      	sub	sp, #52	; 0x34
 8006082:	460c      	mov	r4, r1
 8006084:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006088:	4616      	mov	r6, r2
 800608a:	461f      	mov	r7, r3
 800608c:	4605      	mov	r5, r0
 800608e:	f000 fcc7 	bl	8006a20 <_localeconv_r>
 8006092:	f8d0 a000 	ldr.w	sl, [r0]
 8006096:	4650      	mov	r0, sl
 8006098:	f7fa f8f2 	bl	8000280 <strlen>
 800609c:	2300      	movs	r3, #0
 800609e:	930a      	str	r3, [sp, #40]	; 0x28
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060ac:	3307      	adds	r3, #7
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	f103 0208 	add.w	r2, r3, #8
 80060b6:	f8c8 2000 	str.w	r2, [r8]
 80060ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80060c8:	ee08 0a10 	vmov	s16, r0
 80060cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80060d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060d4:	4b9e      	ldr	r3, [pc, #632]	; (8006350 <_printf_float+0x2d8>)
 80060d6:	f04f 32ff 	mov.w	r2, #4294967295
 80060da:	f7fa fd2f 	bl	8000b3c <__aeabi_dcmpun>
 80060de:	bb88      	cbnz	r0, 8006144 <_printf_float+0xcc>
 80060e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e4:	4b9a      	ldr	r3, [pc, #616]	; (8006350 <_printf_float+0x2d8>)
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	f7fa fd09 	bl	8000b00 <__aeabi_dcmple>
 80060ee:	bb48      	cbnz	r0, 8006144 <_printf_float+0xcc>
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	4640      	mov	r0, r8
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa fcf8 	bl	8000aec <__aeabi_dcmplt>
 80060fc:	b110      	cbz	r0, 8006104 <_printf_float+0x8c>
 80060fe:	232d      	movs	r3, #45	; 0x2d
 8006100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006104:	4a93      	ldr	r2, [pc, #588]	; (8006354 <_printf_float+0x2dc>)
 8006106:	4b94      	ldr	r3, [pc, #592]	; (8006358 <_printf_float+0x2e0>)
 8006108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800610c:	bf94      	ite	ls
 800610e:	4690      	movls	r8, r2
 8006110:	4698      	movhi	r8, r3
 8006112:	2303      	movs	r3, #3
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	9b05      	ldr	r3, [sp, #20]
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	9700      	str	r7, [sp, #0]
 8006124:	4633      	mov	r3, r6
 8006126:	aa0b      	add	r2, sp, #44	; 0x2c
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f9da 	bl	80064e4 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	f040 8090 	bne.w	8006256 <_printf_float+0x1de>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b00d      	add	sp, #52	; 0x34
 800613c:	ecbd 8b02 	vpop	{d8}
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa fcf6 	bl	8000b3c <__aeabi_dcmpun>
 8006150:	b140      	cbz	r0, 8006164 <_printf_float+0xec>
 8006152:	464b      	mov	r3, r9
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfbc      	itt	lt
 8006158:	232d      	movlt	r3, #45	; 0x2d
 800615a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800615e:	4a7f      	ldr	r2, [pc, #508]	; (800635c <_printf_float+0x2e4>)
 8006160:	4b7f      	ldr	r3, [pc, #508]	; (8006360 <_printf_float+0x2e8>)
 8006162:	e7d1      	b.n	8006108 <_printf_float+0x90>
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800616a:	9206      	str	r2, [sp, #24]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	d13f      	bne.n	80061f0 <_printf_float+0x178>
 8006170:	2306      	movs	r3, #6
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	9b05      	ldr	r3, [sp, #20]
 8006176:	6861      	ldr	r1, [r4, #4]
 8006178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800617c:	2300      	movs	r3, #0
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	ab0a      	add	r3, sp, #40	; 0x28
 8006182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006186:	ab09      	add	r3, sp, #36	; 0x24
 8006188:	ec49 8b10 	vmov	d0, r8, r9
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	6022      	str	r2, [r4, #0]
 8006190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006194:	4628      	mov	r0, r5
 8006196:	f7ff fecf 	bl	8005f38 <__cvt>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619e:	2b47      	cmp	r3, #71	; 0x47
 80061a0:	4680      	mov	r8, r0
 80061a2:	d108      	bne.n	80061b6 <_printf_float+0x13e>
 80061a4:	1cc8      	adds	r0, r1, #3
 80061a6:	db02      	blt.n	80061ae <_printf_float+0x136>
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	dd41      	ble.n	8006232 <_printf_float+0x1ba>
 80061ae:	f1ab 0302 	sub.w	r3, fp, #2
 80061b2:	fa5f fb83 	uxtb.w	fp, r3
 80061b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061ba:	d820      	bhi.n	80061fe <_printf_float+0x186>
 80061bc:	3901      	subs	r1, #1
 80061be:	465a      	mov	r2, fp
 80061c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061c4:	9109      	str	r1, [sp, #36]	; 0x24
 80061c6:	f7ff ff19 	bl	8005ffc <__exponent>
 80061ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061cc:	1813      	adds	r3, r2, r0
 80061ce:	2a01      	cmp	r2, #1
 80061d0:	4681      	mov	r9, r0
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	dc02      	bgt.n	80061dc <_printf_float+0x164>
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	07d2      	lsls	r2, r2, #31
 80061da:	d501      	bpl.n	80061e0 <_printf_float+0x168>
 80061dc:	3301      	adds	r3, #1
 80061de:	6123      	str	r3, [r4, #16]
 80061e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d09c      	beq.n	8006122 <_printf_float+0xaa>
 80061e8:	232d      	movs	r3, #45	; 0x2d
 80061ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ee:	e798      	b.n	8006122 <_printf_float+0xaa>
 80061f0:	9a06      	ldr	r2, [sp, #24]
 80061f2:	2a47      	cmp	r2, #71	; 0x47
 80061f4:	d1be      	bne.n	8006174 <_printf_float+0xfc>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1bc      	bne.n	8006174 <_printf_float+0xfc>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7b9      	b.n	8006172 <_printf_float+0xfa>
 80061fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006202:	d118      	bne.n	8006236 <_printf_float+0x1be>
 8006204:	2900      	cmp	r1, #0
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	dd0b      	ble.n	8006222 <_printf_float+0x1aa>
 800620a:	6121      	str	r1, [r4, #16]
 800620c:	b913      	cbnz	r3, 8006214 <_printf_float+0x19c>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	07d0      	lsls	r0, r2, #31
 8006212:	d502      	bpl.n	800621a <_printf_float+0x1a2>
 8006214:	3301      	adds	r3, #1
 8006216:	440b      	add	r3, r1
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	65a1      	str	r1, [r4, #88]	; 0x58
 800621c:	f04f 0900 	mov.w	r9, #0
 8006220:	e7de      	b.n	80061e0 <_printf_float+0x168>
 8006222:	b913      	cbnz	r3, 800622a <_printf_float+0x1b2>
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	07d2      	lsls	r2, r2, #31
 8006228:	d501      	bpl.n	800622e <_printf_float+0x1b6>
 800622a:	3302      	adds	r3, #2
 800622c:	e7f4      	b.n	8006218 <_printf_float+0x1a0>
 800622e:	2301      	movs	r3, #1
 8006230:	e7f2      	b.n	8006218 <_printf_float+0x1a0>
 8006232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006238:	4299      	cmp	r1, r3
 800623a:	db05      	blt.n	8006248 <_printf_float+0x1d0>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	6121      	str	r1, [r4, #16]
 8006240:	07d8      	lsls	r0, r3, #31
 8006242:	d5ea      	bpl.n	800621a <_printf_float+0x1a2>
 8006244:	1c4b      	adds	r3, r1, #1
 8006246:	e7e7      	b.n	8006218 <_printf_float+0x1a0>
 8006248:	2900      	cmp	r1, #0
 800624a:	bfd4      	ite	le
 800624c:	f1c1 0202 	rsble	r2, r1, #2
 8006250:	2201      	movgt	r2, #1
 8006252:	4413      	add	r3, r2
 8006254:	e7e0      	b.n	8006218 <_printf_float+0x1a0>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	055a      	lsls	r2, r3, #21
 800625a:	d407      	bmi.n	800626c <_printf_float+0x1f4>
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	4642      	mov	r2, r8
 8006260:	4631      	mov	r1, r6
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	d12c      	bne.n	80062c4 <_printf_float+0x24c>
 800626a:	e764      	b.n	8006136 <_printf_float+0xbe>
 800626c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006270:	f240 80e0 	bls.w	8006434 <_printf_float+0x3bc>
 8006274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	f7fa fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006280:	2800      	cmp	r0, #0
 8006282:	d034      	beq.n	80062ee <_printf_float+0x276>
 8006284:	4a37      	ldr	r2, [pc, #220]	; (8006364 <_printf_float+0x2ec>)
 8006286:	2301      	movs	r3, #1
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af51 	beq.w	8006136 <_printf_float+0xbe>
 8006294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006298:	429a      	cmp	r2, r3
 800629a:	db02      	blt.n	80062a2 <_printf_float+0x22a>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07d8      	lsls	r0, r3, #31
 80062a0:	d510      	bpl.n	80062c4 <_printf_float+0x24c>
 80062a2:	ee18 3a10 	vmov	r3, s16
 80062a6:	4652      	mov	r2, sl
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af41 	beq.w	8006136 <_printf_float+0xbe>
 80062b4:	f04f 0800 	mov.w	r8, #0
 80062b8:	f104 091a 	add.w	r9, r4, #26
 80062bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	4543      	cmp	r3, r8
 80062c2:	dc09      	bgt.n	80062d8 <_printf_float+0x260>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	079b      	lsls	r3, r3, #30
 80062c8:	f100 8107 	bmi.w	80064da <_printf_float+0x462>
 80062cc:	68e0      	ldr	r0, [r4, #12]
 80062ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d0:	4298      	cmp	r0, r3
 80062d2:	bfb8      	it	lt
 80062d4:	4618      	movlt	r0, r3
 80062d6:	e730      	b.n	800613a <_printf_float+0xc2>
 80062d8:	2301      	movs	r3, #1
 80062da:	464a      	mov	r2, r9
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af27 	beq.w	8006136 <_printf_float+0xbe>
 80062e8:	f108 0801 	add.w	r8, r8, #1
 80062ec:	e7e6      	b.n	80062bc <_printf_float+0x244>
 80062ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dc39      	bgt.n	8006368 <_printf_float+0x2f0>
 80062f4:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <_printf_float+0x2ec>)
 80062f6:	2301      	movs	r3, #1
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f af19 	beq.w	8006136 <_printf_float+0xbe>
 8006304:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006308:	4313      	orrs	r3, r2
 800630a:	d102      	bne.n	8006312 <_printf_float+0x29a>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07d9      	lsls	r1, r3, #31
 8006310:	d5d8      	bpl.n	80062c4 <_printf_float+0x24c>
 8006312:	ee18 3a10 	vmov	r3, s16
 8006316:	4652      	mov	r2, sl
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f af09 	beq.w	8006136 <_printf_float+0xbe>
 8006324:	f04f 0900 	mov.w	r9, #0
 8006328:	f104 0a1a 	add.w	sl, r4, #26
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	425b      	negs	r3, r3
 8006330:	454b      	cmp	r3, r9
 8006332:	dc01      	bgt.n	8006338 <_printf_float+0x2c0>
 8006334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006336:	e792      	b.n	800625e <_printf_float+0x1e6>
 8006338:	2301      	movs	r3, #1
 800633a:	4652      	mov	r2, sl
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f aef7 	beq.w	8006136 <_printf_float+0xbe>
 8006348:	f109 0901 	add.w	r9, r9, #1
 800634c:	e7ee      	b.n	800632c <_printf_float+0x2b4>
 800634e:	bf00      	nop
 8006350:	7fefffff 	.word	0x7fefffff
 8006354:	08008a4c 	.word	0x08008a4c
 8006358:	08008a50 	.word	0x08008a50
 800635c:	08008a54 	.word	0x08008a54
 8006360:	08008a58 	.word	0x08008a58
 8006364:	08008a5c 	.word	0x08008a5c
 8006368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800636a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800636c:	429a      	cmp	r2, r3
 800636e:	bfa8      	it	ge
 8006370:	461a      	movge	r2, r3
 8006372:	2a00      	cmp	r2, #0
 8006374:	4691      	mov	r9, r2
 8006376:	dc37      	bgt.n	80063e8 <_printf_float+0x370>
 8006378:	f04f 0b00 	mov.w	fp, #0
 800637c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006380:	f104 021a 	add.w	r2, r4, #26
 8006384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006386:	9305      	str	r3, [sp, #20]
 8006388:	eba3 0309 	sub.w	r3, r3, r9
 800638c:	455b      	cmp	r3, fp
 800638e:	dc33      	bgt.n	80063f8 <_printf_float+0x380>
 8006390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006394:	429a      	cmp	r2, r3
 8006396:	db3b      	blt.n	8006410 <_printf_float+0x398>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	07da      	lsls	r2, r3, #31
 800639c:	d438      	bmi.n	8006410 <_printf_float+0x398>
 800639e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063a2:	eba2 0903 	sub.w	r9, r2, r3
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	4591      	cmp	r9, r2
 80063ac:	bfa8      	it	ge
 80063ae:	4691      	movge	r9, r2
 80063b0:	f1b9 0f00 	cmp.w	r9, #0
 80063b4:	dc35      	bgt.n	8006422 <_printf_float+0x3aa>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063be:	f104 0a1a 	add.w	sl, r4, #26
 80063c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	eba3 0309 	sub.w	r3, r3, r9
 80063cc:	4543      	cmp	r3, r8
 80063ce:	f77f af79 	ble.w	80062c4 <_printf_float+0x24c>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4652      	mov	r2, sl
 80063d6:	4631      	mov	r1, r6
 80063d8:	4628      	mov	r0, r5
 80063da:	47b8      	blx	r7
 80063dc:	3001      	adds	r0, #1
 80063de:	f43f aeaa 	beq.w	8006136 <_printf_float+0xbe>
 80063e2:	f108 0801 	add.w	r8, r8, #1
 80063e6:	e7ec      	b.n	80063c2 <_printf_float+0x34a>
 80063e8:	4613      	mov	r3, r2
 80063ea:	4631      	mov	r1, r6
 80063ec:	4642      	mov	r2, r8
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	d1c0      	bne.n	8006378 <_printf_float+0x300>
 80063f6:	e69e      	b.n	8006136 <_printf_float+0xbe>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	9205      	str	r2, [sp, #20]
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f ae97 	beq.w	8006136 <_printf_float+0xbe>
 8006408:	9a05      	ldr	r2, [sp, #20]
 800640a:	f10b 0b01 	add.w	fp, fp, #1
 800640e:	e7b9      	b.n	8006384 <_printf_float+0x30c>
 8006410:	ee18 3a10 	vmov	r3, s16
 8006414:	4652      	mov	r2, sl
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	d1be      	bne.n	800639e <_printf_float+0x326>
 8006420:	e689      	b.n	8006136 <_printf_float+0xbe>
 8006422:	9a05      	ldr	r2, [sp, #20]
 8006424:	464b      	mov	r3, r9
 8006426:	4442      	add	r2, r8
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d1c1      	bne.n	80063b6 <_printf_float+0x33e>
 8006432:	e680      	b.n	8006136 <_printf_float+0xbe>
 8006434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006436:	2a01      	cmp	r2, #1
 8006438:	dc01      	bgt.n	800643e <_printf_float+0x3c6>
 800643a:	07db      	lsls	r3, r3, #31
 800643c:	d53a      	bpl.n	80064b4 <_printf_float+0x43c>
 800643e:	2301      	movs	r3, #1
 8006440:	4642      	mov	r2, r8
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae74 	beq.w	8006136 <_printf_float+0xbe>
 800644e:	ee18 3a10 	vmov	r3, s16
 8006452:	4652      	mov	r2, sl
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f ae6b 	beq.w	8006136 <_printf_float+0xbe>
 8006460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006464:	2200      	movs	r2, #0
 8006466:	2300      	movs	r3, #0
 8006468:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800646c:	f7fa fb34 	bl	8000ad8 <__aeabi_dcmpeq>
 8006470:	b9d8      	cbnz	r0, 80064aa <_printf_float+0x432>
 8006472:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006476:	f108 0201 	add.w	r2, r8, #1
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	d10e      	bne.n	80064a2 <_printf_float+0x42a>
 8006484:	e657      	b.n	8006136 <_printf_float+0xbe>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f ae50 	beq.w	8006136 <_printf_float+0xbe>
 8006496:	f108 0801 	add.w	r8, r8, #1
 800649a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	4543      	cmp	r3, r8
 80064a0:	dcf1      	bgt.n	8006486 <_printf_float+0x40e>
 80064a2:	464b      	mov	r3, r9
 80064a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064a8:	e6da      	b.n	8006260 <_printf_float+0x1e8>
 80064aa:	f04f 0800 	mov.w	r8, #0
 80064ae:	f104 0a1a 	add.w	sl, r4, #26
 80064b2:	e7f2      	b.n	800649a <_printf_float+0x422>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4642      	mov	r2, r8
 80064b8:	e7df      	b.n	800647a <_printf_float+0x402>
 80064ba:	2301      	movs	r3, #1
 80064bc:	464a      	mov	r2, r9
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f ae36 	beq.w	8006136 <_printf_float+0xbe>
 80064ca:	f108 0801 	add.w	r8, r8, #1
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064d2:	1a5b      	subs	r3, r3, r1
 80064d4:	4543      	cmp	r3, r8
 80064d6:	dcf0      	bgt.n	80064ba <_printf_float+0x442>
 80064d8:	e6f8      	b.n	80062cc <_printf_float+0x254>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 0919 	add.w	r9, r4, #25
 80064e2:	e7f4      	b.n	80064ce <_printf_float+0x456>

080064e4 <_printf_common>:
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	4616      	mov	r6, r2
 80064ea:	4699      	mov	r9, r3
 80064ec:	688a      	ldr	r2, [r1, #8]
 80064ee:	690b      	ldr	r3, [r1, #16]
 80064f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	bfb8      	it	lt
 80064f8:	4613      	movlt	r3, r2
 80064fa:	6033      	str	r3, [r6, #0]
 80064fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006500:	4607      	mov	r7, r0
 8006502:	460c      	mov	r4, r1
 8006504:	b10a      	cbz	r2, 800650a <_printf_common+0x26>
 8006506:	3301      	adds	r3, #1
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	0699      	lsls	r1, r3, #26
 800650e:	bf42      	ittt	mi
 8006510:	6833      	ldrmi	r3, [r6, #0]
 8006512:	3302      	addmi	r3, #2
 8006514:	6033      	strmi	r3, [r6, #0]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	f015 0506 	ands.w	r5, r5, #6
 800651c:	d106      	bne.n	800652c <_printf_common+0x48>
 800651e:	f104 0a19 	add.w	sl, r4, #25
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	6832      	ldr	r2, [r6, #0]
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc26      	bgt.n	800657a <_printf_common+0x96>
 800652c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006530:	1e13      	subs	r3, r2, #0
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	bf18      	it	ne
 8006536:	2301      	movne	r3, #1
 8006538:	0692      	lsls	r2, r2, #26
 800653a:	d42b      	bmi.n	8006594 <_printf_common+0xb0>
 800653c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006540:	4649      	mov	r1, r9
 8006542:	4638      	mov	r0, r7
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d01e      	beq.n	8006588 <_printf_common+0xa4>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	6922      	ldr	r2, [r4, #16]
 800654e:	f003 0306 	and.w	r3, r3, #6
 8006552:	2b04      	cmp	r3, #4
 8006554:	bf02      	ittt	eq
 8006556:	68e5      	ldreq	r5, [r4, #12]
 8006558:	6833      	ldreq	r3, [r6, #0]
 800655a:	1aed      	subeq	r5, r5, r3
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	bf0c      	ite	eq
 8006560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006564:	2500      	movne	r5, #0
 8006566:	4293      	cmp	r3, r2
 8006568:	bfc4      	itt	gt
 800656a:	1a9b      	subgt	r3, r3, r2
 800656c:	18ed      	addgt	r5, r5, r3
 800656e:	2600      	movs	r6, #0
 8006570:	341a      	adds	r4, #26
 8006572:	42b5      	cmp	r5, r6
 8006574:	d11a      	bne.n	80065ac <_printf_common+0xc8>
 8006576:	2000      	movs	r0, #0
 8006578:	e008      	b.n	800658c <_printf_common+0xa8>
 800657a:	2301      	movs	r3, #1
 800657c:	4652      	mov	r2, sl
 800657e:	4649      	mov	r1, r9
 8006580:	4638      	mov	r0, r7
 8006582:	47c0      	blx	r8
 8006584:	3001      	adds	r0, #1
 8006586:	d103      	bne.n	8006590 <_printf_common+0xac>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006590:	3501      	adds	r5, #1
 8006592:	e7c6      	b.n	8006522 <_printf_common+0x3e>
 8006594:	18e1      	adds	r1, r4, r3
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	2030      	movs	r0, #48	; 0x30
 800659a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800659e:	4422      	add	r2, r4
 80065a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a8:	3302      	adds	r3, #2
 80065aa:	e7c7      	b.n	800653c <_printf_common+0x58>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4622      	mov	r2, r4
 80065b0:	4649      	mov	r1, r9
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c0      	blx	r8
 80065b6:	3001      	adds	r0, #1
 80065b8:	d0e6      	beq.n	8006588 <_printf_common+0xa4>
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7d9      	b.n	8006572 <_printf_common+0x8e>
	...

080065c0 <_printf_i>:
 80065c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	7e0f      	ldrb	r7, [r1, #24]
 80065c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065c8:	2f78      	cmp	r7, #120	; 0x78
 80065ca:	4691      	mov	r9, r2
 80065cc:	4680      	mov	r8, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	469a      	mov	sl, r3
 80065d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065d6:	d807      	bhi.n	80065e8 <_printf_i+0x28>
 80065d8:	2f62      	cmp	r7, #98	; 0x62
 80065da:	d80a      	bhi.n	80065f2 <_printf_i+0x32>
 80065dc:	2f00      	cmp	r7, #0
 80065de:	f000 80d4 	beq.w	800678a <_printf_i+0x1ca>
 80065e2:	2f58      	cmp	r7, #88	; 0x58
 80065e4:	f000 80c0 	beq.w	8006768 <_printf_i+0x1a8>
 80065e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065f0:	e03a      	b.n	8006668 <_printf_i+0xa8>
 80065f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065f6:	2b15      	cmp	r3, #21
 80065f8:	d8f6      	bhi.n	80065e8 <_printf_i+0x28>
 80065fa:	a101      	add	r1, pc, #4	; (adr r1, 8006600 <_printf_i+0x40>)
 80065fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006600:	08006659 	.word	0x08006659
 8006604:	0800666d 	.word	0x0800666d
 8006608:	080065e9 	.word	0x080065e9
 800660c:	080065e9 	.word	0x080065e9
 8006610:	080065e9 	.word	0x080065e9
 8006614:	080065e9 	.word	0x080065e9
 8006618:	0800666d 	.word	0x0800666d
 800661c:	080065e9 	.word	0x080065e9
 8006620:	080065e9 	.word	0x080065e9
 8006624:	080065e9 	.word	0x080065e9
 8006628:	080065e9 	.word	0x080065e9
 800662c:	08006771 	.word	0x08006771
 8006630:	08006699 	.word	0x08006699
 8006634:	0800672b 	.word	0x0800672b
 8006638:	080065e9 	.word	0x080065e9
 800663c:	080065e9 	.word	0x080065e9
 8006640:	08006793 	.word	0x08006793
 8006644:	080065e9 	.word	0x080065e9
 8006648:	08006699 	.word	0x08006699
 800664c:	080065e9 	.word	0x080065e9
 8006650:	080065e9 	.word	0x080065e9
 8006654:	08006733 	.word	0x08006733
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	1d1a      	adds	r2, r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	602a      	str	r2, [r5, #0]
 8006660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006668:	2301      	movs	r3, #1
 800666a:	e09f      	b.n	80067ac <_printf_i+0x1ec>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	0607      	lsls	r7, r0, #24
 8006672:	f103 0104 	add.w	r1, r3, #4
 8006676:	6029      	str	r1, [r5, #0]
 8006678:	d501      	bpl.n	800667e <_printf_i+0xbe>
 800667a:	681e      	ldr	r6, [r3, #0]
 800667c:	e003      	b.n	8006686 <_printf_i+0xc6>
 800667e:	0646      	lsls	r6, r0, #25
 8006680:	d5fb      	bpl.n	800667a <_printf_i+0xba>
 8006682:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006686:	2e00      	cmp	r6, #0
 8006688:	da03      	bge.n	8006692 <_printf_i+0xd2>
 800668a:	232d      	movs	r3, #45	; 0x2d
 800668c:	4276      	negs	r6, r6
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006692:	485a      	ldr	r0, [pc, #360]	; (80067fc <_printf_i+0x23c>)
 8006694:	230a      	movs	r3, #10
 8006696:	e012      	b.n	80066be <_printf_i+0xfe>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	1d19      	adds	r1, r3, #4
 800669e:	6029      	str	r1, [r5, #0]
 80066a0:	0605      	lsls	r5, r0, #24
 80066a2:	d501      	bpl.n	80066a8 <_printf_i+0xe8>
 80066a4:	681e      	ldr	r6, [r3, #0]
 80066a6:	e002      	b.n	80066ae <_printf_i+0xee>
 80066a8:	0641      	lsls	r1, r0, #25
 80066aa:	d5fb      	bpl.n	80066a4 <_printf_i+0xe4>
 80066ac:	881e      	ldrh	r6, [r3, #0]
 80066ae:	4853      	ldr	r0, [pc, #332]	; (80067fc <_printf_i+0x23c>)
 80066b0:	2f6f      	cmp	r7, #111	; 0x6f
 80066b2:	bf0c      	ite	eq
 80066b4:	2308      	moveq	r3, #8
 80066b6:	230a      	movne	r3, #10
 80066b8:	2100      	movs	r1, #0
 80066ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066be:	6865      	ldr	r5, [r4, #4]
 80066c0:	60a5      	str	r5, [r4, #8]
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	bfa2      	ittt	ge
 80066c6:	6821      	ldrge	r1, [r4, #0]
 80066c8:	f021 0104 	bicge.w	r1, r1, #4
 80066cc:	6021      	strge	r1, [r4, #0]
 80066ce:	b90e      	cbnz	r6, 80066d4 <_printf_i+0x114>
 80066d0:	2d00      	cmp	r5, #0
 80066d2:	d04b      	beq.n	800676c <_printf_i+0x1ac>
 80066d4:	4615      	mov	r5, r2
 80066d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80066da:	fb03 6711 	mls	r7, r3, r1, r6
 80066de:	5dc7      	ldrb	r7, [r0, r7]
 80066e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066e4:	4637      	mov	r7, r6
 80066e6:	42bb      	cmp	r3, r7
 80066e8:	460e      	mov	r6, r1
 80066ea:	d9f4      	bls.n	80066d6 <_printf_i+0x116>
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10b      	bne.n	8006708 <_printf_i+0x148>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	07de      	lsls	r6, r3, #31
 80066f4:	d508      	bpl.n	8006708 <_printf_i+0x148>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6861      	ldr	r1, [r4, #4]
 80066fa:	4299      	cmp	r1, r3
 80066fc:	bfde      	ittt	le
 80066fe:	2330      	movle	r3, #48	; 0x30
 8006700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006708:	1b52      	subs	r2, r2, r5
 800670a:	6122      	str	r2, [r4, #16]
 800670c:	f8cd a000 	str.w	sl, [sp]
 8006710:	464b      	mov	r3, r9
 8006712:	aa03      	add	r2, sp, #12
 8006714:	4621      	mov	r1, r4
 8006716:	4640      	mov	r0, r8
 8006718:	f7ff fee4 	bl	80064e4 <_printf_common>
 800671c:	3001      	adds	r0, #1
 800671e:	d14a      	bne.n	80067b6 <_printf_i+0x1f6>
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	b004      	add	sp, #16
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	f043 0320 	orr.w	r3, r3, #32
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	4833      	ldr	r0, [pc, #204]	; (8006800 <_printf_i+0x240>)
 8006734:	2778      	movs	r7, #120	; 0x78
 8006736:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6829      	ldr	r1, [r5, #0]
 800673e:	061f      	lsls	r7, r3, #24
 8006740:	f851 6b04 	ldr.w	r6, [r1], #4
 8006744:	d402      	bmi.n	800674c <_printf_i+0x18c>
 8006746:	065f      	lsls	r7, r3, #25
 8006748:	bf48      	it	mi
 800674a:	b2b6      	uxthmi	r6, r6
 800674c:	07df      	lsls	r7, r3, #31
 800674e:	bf48      	it	mi
 8006750:	f043 0320 	orrmi.w	r3, r3, #32
 8006754:	6029      	str	r1, [r5, #0]
 8006756:	bf48      	it	mi
 8006758:	6023      	strmi	r3, [r4, #0]
 800675a:	b91e      	cbnz	r6, 8006764 <_printf_i+0x1a4>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	f023 0320 	bic.w	r3, r3, #32
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	2310      	movs	r3, #16
 8006766:	e7a7      	b.n	80066b8 <_printf_i+0xf8>
 8006768:	4824      	ldr	r0, [pc, #144]	; (80067fc <_printf_i+0x23c>)
 800676a:	e7e4      	b.n	8006736 <_printf_i+0x176>
 800676c:	4615      	mov	r5, r2
 800676e:	e7bd      	b.n	80066ec <_printf_i+0x12c>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	6826      	ldr	r6, [r4, #0]
 8006774:	6961      	ldr	r1, [r4, #20]
 8006776:	1d18      	adds	r0, r3, #4
 8006778:	6028      	str	r0, [r5, #0]
 800677a:	0635      	lsls	r5, r6, #24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	d501      	bpl.n	8006784 <_printf_i+0x1c4>
 8006780:	6019      	str	r1, [r3, #0]
 8006782:	e002      	b.n	800678a <_printf_i+0x1ca>
 8006784:	0670      	lsls	r0, r6, #25
 8006786:	d5fb      	bpl.n	8006780 <_printf_i+0x1c0>
 8006788:	8019      	strh	r1, [r3, #0]
 800678a:	2300      	movs	r3, #0
 800678c:	6123      	str	r3, [r4, #16]
 800678e:	4615      	mov	r5, r2
 8006790:	e7bc      	b.n	800670c <_printf_i+0x14c>
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	1d1a      	adds	r2, r3, #4
 8006796:	602a      	str	r2, [r5, #0]
 8006798:	681d      	ldr	r5, [r3, #0]
 800679a:	6862      	ldr	r2, [r4, #4]
 800679c:	2100      	movs	r1, #0
 800679e:	4628      	mov	r0, r5
 80067a0:	f7f9 fd1e 	bl	80001e0 <memchr>
 80067a4:	b108      	cbz	r0, 80067aa <_printf_i+0x1ea>
 80067a6:	1b40      	subs	r0, r0, r5
 80067a8:	6060      	str	r0, [r4, #4]
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	2300      	movs	r3, #0
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b4:	e7aa      	b.n	800670c <_printf_i+0x14c>
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	462a      	mov	r2, r5
 80067ba:	4649      	mov	r1, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	47d0      	blx	sl
 80067c0:	3001      	adds	r0, #1
 80067c2:	d0ad      	beq.n	8006720 <_printf_i+0x160>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	079b      	lsls	r3, r3, #30
 80067c8:	d413      	bmi.n	80067f2 <_printf_i+0x232>
 80067ca:	68e0      	ldr	r0, [r4, #12]
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	4298      	cmp	r0, r3
 80067d0:	bfb8      	it	lt
 80067d2:	4618      	movlt	r0, r3
 80067d4:	e7a6      	b.n	8006724 <_printf_i+0x164>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4632      	mov	r2, r6
 80067da:	4649      	mov	r1, r9
 80067dc:	4640      	mov	r0, r8
 80067de:	47d0      	blx	sl
 80067e0:	3001      	adds	r0, #1
 80067e2:	d09d      	beq.n	8006720 <_printf_i+0x160>
 80067e4:	3501      	adds	r5, #1
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	9903      	ldr	r1, [sp, #12]
 80067ea:	1a5b      	subs	r3, r3, r1
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	dcf2      	bgt.n	80067d6 <_printf_i+0x216>
 80067f0:	e7eb      	b.n	80067ca <_printf_i+0x20a>
 80067f2:	2500      	movs	r5, #0
 80067f4:	f104 0619 	add.w	r6, r4, #25
 80067f8:	e7f5      	b.n	80067e6 <_printf_i+0x226>
 80067fa:	bf00      	nop
 80067fc:	08008a5e 	.word	0x08008a5e
 8006800:	08008a6f 	.word	0x08008a6f

08006804 <std>:
 8006804:	2300      	movs	r3, #0
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	e9c0 3300 	strd	r3, r3, [r0]
 800680e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006812:	6083      	str	r3, [r0, #8]
 8006814:	8181      	strh	r1, [r0, #12]
 8006816:	6643      	str	r3, [r0, #100]	; 0x64
 8006818:	81c2      	strh	r2, [r0, #14]
 800681a:	6183      	str	r3, [r0, #24]
 800681c:	4619      	mov	r1, r3
 800681e:	2208      	movs	r2, #8
 8006820:	305c      	adds	r0, #92	; 0x5c
 8006822:	f000 f8f4 	bl	8006a0e <memset>
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <std+0x58>)
 8006828:	6263      	str	r3, [r4, #36]	; 0x24
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <std+0x5c>)
 800682c:	62a3      	str	r3, [r4, #40]	; 0x28
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <std+0x60>)
 8006830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <std+0x64>)
 8006834:	6323      	str	r3, [r4, #48]	; 0x30
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <std+0x68>)
 8006838:	6224      	str	r4, [r4, #32]
 800683a:	429c      	cmp	r4, r3
 800683c:	d006      	beq.n	800684c <std+0x48>
 800683e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006842:	4294      	cmp	r4, r2
 8006844:	d002      	beq.n	800684c <std+0x48>
 8006846:	33d0      	adds	r3, #208	; 0xd0
 8006848:	429c      	cmp	r4, r3
 800684a:	d105      	bne.n	8006858 <std+0x54>
 800684c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006854:	f000 b958 	b.w	8006b08 <__retarget_lock_init_recursive>
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	08006989 	.word	0x08006989
 8006860:	080069ab 	.word	0x080069ab
 8006864:	080069e3 	.word	0x080069e3
 8006868:	08006a07 	.word	0x08006a07
 800686c:	2000293c 	.word	0x2000293c

08006870 <stdio_exit_handler>:
 8006870:	4a02      	ldr	r2, [pc, #8]	; (800687c <stdio_exit_handler+0xc>)
 8006872:	4903      	ldr	r1, [pc, #12]	; (8006880 <stdio_exit_handler+0x10>)
 8006874:	4803      	ldr	r0, [pc, #12]	; (8006884 <stdio_exit_handler+0x14>)
 8006876:	f000 b869 	b.w	800694c <_fwalk_sglue>
 800687a:	bf00      	nop
 800687c:	20000014 	.word	0x20000014
 8006880:	08008229 	.word	0x08008229
 8006884:	20000020 	.word	0x20000020

08006888 <cleanup_stdio>:
 8006888:	6841      	ldr	r1, [r0, #4]
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <cleanup_stdio+0x34>)
 800688c:	4299      	cmp	r1, r3
 800688e:	b510      	push	{r4, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	d001      	beq.n	8006898 <cleanup_stdio+0x10>
 8006894:	f001 fcc8 	bl	8008228 <_fflush_r>
 8006898:	68a1      	ldr	r1, [r4, #8]
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <cleanup_stdio+0x38>)
 800689c:	4299      	cmp	r1, r3
 800689e:	d002      	beq.n	80068a6 <cleanup_stdio+0x1e>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f001 fcc1 	bl	8008228 <_fflush_r>
 80068a6:	68e1      	ldr	r1, [r4, #12]
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <cleanup_stdio+0x3c>)
 80068aa:	4299      	cmp	r1, r3
 80068ac:	d004      	beq.n	80068b8 <cleanup_stdio+0x30>
 80068ae:	4620      	mov	r0, r4
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f001 bcb8 	b.w	8008228 <_fflush_r>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	bf00      	nop
 80068bc:	2000293c 	.word	0x2000293c
 80068c0:	200029a4 	.word	0x200029a4
 80068c4:	20002a0c 	.word	0x20002a0c

080068c8 <global_stdio_init.part.0>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <global_stdio_init.part.0+0x30>)
 80068cc:	4c0b      	ldr	r4, [pc, #44]	; (80068fc <global_stdio_init.part.0+0x34>)
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <global_stdio_init.part.0+0x38>)
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	4620      	mov	r0, r4
 80068d4:	2200      	movs	r2, #0
 80068d6:	2104      	movs	r1, #4
 80068d8:	f7ff ff94 	bl	8006804 <std>
 80068dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80068e0:	2201      	movs	r2, #1
 80068e2:	2109      	movs	r1, #9
 80068e4:	f7ff ff8e 	bl	8006804 <std>
 80068e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80068ec:	2202      	movs	r2, #2
 80068ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f2:	2112      	movs	r1, #18
 80068f4:	f7ff bf86 	b.w	8006804 <std>
 80068f8:	20002a74 	.word	0x20002a74
 80068fc:	2000293c 	.word	0x2000293c
 8006900:	08006871 	.word	0x08006871

08006904 <__sfp_lock_acquire>:
 8006904:	4801      	ldr	r0, [pc, #4]	; (800690c <__sfp_lock_acquire+0x8>)
 8006906:	f000 b900 	b.w	8006b0a <__retarget_lock_acquire_recursive>
 800690a:	bf00      	nop
 800690c:	20002a7d 	.word	0x20002a7d

08006910 <__sfp_lock_release>:
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <__sfp_lock_release+0x8>)
 8006912:	f000 b8fb 	b.w	8006b0c <__retarget_lock_release_recursive>
 8006916:	bf00      	nop
 8006918:	20002a7d 	.word	0x20002a7d

0800691c <__sinit>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4604      	mov	r4, r0
 8006920:	f7ff fff0 	bl	8006904 <__sfp_lock_acquire>
 8006924:	6a23      	ldr	r3, [r4, #32]
 8006926:	b11b      	cbz	r3, 8006930 <__sinit+0x14>
 8006928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692c:	f7ff bff0 	b.w	8006910 <__sfp_lock_release>
 8006930:	4b04      	ldr	r3, [pc, #16]	; (8006944 <__sinit+0x28>)
 8006932:	6223      	str	r3, [r4, #32]
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__sinit+0x2c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f5      	bne.n	8006928 <__sinit+0xc>
 800693c:	f7ff ffc4 	bl	80068c8 <global_stdio_init.part.0>
 8006940:	e7f2      	b.n	8006928 <__sinit+0xc>
 8006942:	bf00      	nop
 8006944:	08006889 	.word	0x08006889
 8006948:	20002a74 	.word	0x20002a74

0800694c <_fwalk_sglue>:
 800694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006950:	4607      	mov	r7, r0
 8006952:	4688      	mov	r8, r1
 8006954:	4614      	mov	r4, r2
 8006956:	2600      	movs	r6, #0
 8006958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800695c:	f1b9 0901 	subs.w	r9, r9, #1
 8006960:	d505      	bpl.n	800696e <_fwalk_sglue+0x22>
 8006962:	6824      	ldr	r4, [r4, #0]
 8006964:	2c00      	cmp	r4, #0
 8006966:	d1f7      	bne.n	8006958 <_fwalk_sglue+0xc>
 8006968:	4630      	mov	r0, r6
 800696a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d907      	bls.n	8006984 <_fwalk_sglue+0x38>
 8006974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006978:	3301      	adds	r3, #1
 800697a:	d003      	beq.n	8006984 <_fwalk_sglue+0x38>
 800697c:	4629      	mov	r1, r5
 800697e:	4638      	mov	r0, r7
 8006980:	47c0      	blx	r8
 8006982:	4306      	orrs	r6, r0
 8006984:	3568      	adds	r5, #104	; 0x68
 8006986:	e7e9      	b.n	800695c <_fwalk_sglue+0x10>

08006988 <__sread>:
 8006988:	b510      	push	{r4, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006990:	f000 f86c 	bl	8006a6c <_read_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	bfab      	itete	ge
 8006998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800699a:	89a3      	ldrhlt	r3, [r4, #12]
 800699c:	181b      	addge	r3, r3, r0
 800699e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069a2:	bfac      	ite	ge
 80069a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80069a6:	81a3      	strhlt	r3, [r4, #12]
 80069a8:	bd10      	pop	{r4, pc}

080069aa <__swrite>:
 80069aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ae:	461f      	mov	r7, r3
 80069b0:	898b      	ldrh	r3, [r1, #12]
 80069b2:	05db      	lsls	r3, r3, #23
 80069b4:	4605      	mov	r5, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	4616      	mov	r6, r2
 80069ba:	d505      	bpl.n	80069c8 <__swrite+0x1e>
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	2302      	movs	r3, #2
 80069c2:	2200      	movs	r2, #0
 80069c4:	f000 f840 	bl	8006a48 <_lseek_r>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	4632      	mov	r2, r6
 80069d6:	463b      	mov	r3, r7
 80069d8:	4628      	mov	r0, r5
 80069da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	f000 b857 	b.w	8006a90 <_write_r>

080069e2 <__sseek>:
 80069e2:	b510      	push	{r4, lr}
 80069e4:	460c      	mov	r4, r1
 80069e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ea:	f000 f82d 	bl	8006a48 <_lseek_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	bf15      	itete	ne
 80069f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80069f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069fe:	81a3      	strheq	r3, [r4, #12]
 8006a00:	bf18      	it	ne
 8006a02:	81a3      	strhne	r3, [r4, #12]
 8006a04:	bd10      	pop	{r4, pc}

08006a06 <__sclose>:
 8006a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0a:	f000 b80d 	b.w	8006a28 <_close_r>

08006a0e <memset>:
 8006a0e:	4402      	add	r2, r0
 8006a10:	4603      	mov	r3, r0
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d100      	bne.n	8006a18 <memset+0xa>
 8006a16:	4770      	bx	lr
 8006a18:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1c:	e7f9      	b.n	8006a12 <memset+0x4>
	...

08006a20 <_localeconv_r>:
 8006a20:	4800      	ldr	r0, [pc, #0]	; (8006a24 <_localeconv_r+0x4>)
 8006a22:	4770      	bx	lr
 8006a24:	20000160 	.word	0x20000160

08006a28 <_close_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_close_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fb fbb7 	bl	80021a6 <_close>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_close_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_close_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20002a78 	.word	0x20002a78

08006a48 <_lseek_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	; (8006a68 <_lseek_r+0x20>)
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fb fbcc 	bl	80021f4 <_lseek>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_lseek_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_lseek_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20002a78 	.word	0x20002a78

08006a6c <_read_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	; (8006a8c <_read_r+0x20>)
 8006a70:	4604      	mov	r4, r0
 8006a72:	4608      	mov	r0, r1
 8006a74:	4611      	mov	r1, r2
 8006a76:	2200      	movs	r2, #0
 8006a78:	602a      	str	r2, [r5, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f7fb fb5a 	bl	8002134 <_read>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_read_r+0x1e>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_read_r+0x1e>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20002a78 	.word	0x20002a78

08006a90 <_write_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d07      	ldr	r5, [pc, #28]	; (8006ab0 <_write_r+0x20>)
 8006a94:	4604      	mov	r4, r0
 8006a96:	4608      	mov	r0, r1
 8006a98:	4611      	mov	r1, r2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f7fb fb65 	bl	800216e <_write>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_write_r+0x1e>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_write_r+0x1e>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	20002a78 	.word	0x20002a78

08006ab4 <__errno>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	; (8006abc <__errno+0x8>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	2000006c 	.word	0x2000006c

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4d0d      	ldr	r5, [pc, #52]	; (8006af8 <__libc_init_array+0x38>)
 8006ac4:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <__libc_init_array+0x3c>)
 8006ac6:	1b64      	subs	r4, r4, r5
 8006ac8:	10a4      	asrs	r4, r4, #2
 8006aca:	2600      	movs	r6, #0
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	4d0b      	ldr	r5, [pc, #44]	; (8006b00 <__libc_init_array+0x40>)
 8006ad2:	4c0c      	ldr	r4, [pc, #48]	; (8006b04 <__libc_init_array+0x44>)
 8006ad4:	f001 feee 	bl	80088b4 <_init>
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	2600      	movs	r6, #0
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08008dc4 	.word	0x08008dc4
 8006afc:	08008dc4 	.word	0x08008dc4
 8006b00:	08008dc4 	.word	0x08008dc4
 8006b04:	08008dc8 	.word	0x08008dc8

08006b08 <__retarget_lock_init_recursive>:
 8006b08:	4770      	bx	lr

08006b0a <__retarget_lock_acquire_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <__retarget_lock_release_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <memcpy>:
 8006b0e:	440a      	add	r2, r1
 8006b10:	4291      	cmp	r1, r2
 8006b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b16:	d100      	bne.n	8006b1a <memcpy+0xc>
 8006b18:	4770      	bx	lr
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b24:	4291      	cmp	r1, r2
 8006b26:	d1f9      	bne.n	8006b1c <memcpy+0xe>
 8006b28:	bd10      	pop	{r4, pc}

08006b2a <quorem>:
 8006b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2e:	6903      	ldr	r3, [r0, #16]
 8006b30:	690c      	ldr	r4, [r1, #16]
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	4607      	mov	r7, r0
 8006b36:	db7e      	blt.n	8006c36 <quorem+0x10c>
 8006b38:	3c01      	subs	r4, #1
 8006b3a:	f101 0814 	add.w	r8, r1, #20
 8006b3e:	f100 0514 	add.w	r5, r0, #20
 8006b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b50:	3301      	adds	r3, #1
 8006b52:	429a      	cmp	r2, r3
 8006b54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b60:	d331      	bcc.n	8006bc6 <quorem+0x9c>
 8006b62:	f04f 0e00 	mov.w	lr, #0
 8006b66:	4640      	mov	r0, r8
 8006b68:	46ac      	mov	ip, r5
 8006b6a:	46f2      	mov	sl, lr
 8006b6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b70:	b293      	uxth	r3, r2
 8006b72:	fb06 e303 	mla	r3, r6, r3, lr
 8006b76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b7a:	0c1a      	lsrs	r2, r3, #16
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ebaa 0303 	sub.w	r3, sl, r3
 8006b82:	f8dc a000 	ldr.w	sl, [ip]
 8006b86:	fa13 f38a 	uxtah	r3, r3, sl
 8006b8a:	fb06 220e 	mla	r2, r6, lr, r2
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	9b00      	ldr	r3, [sp, #0]
 8006b92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b96:	b292      	uxth	r2, r2
 8006b98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ba4:	4581      	cmp	r9, r0
 8006ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006baa:	f84c 3b04 	str.w	r3, [ip], #4
 8006bae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bb2:	d2db      	bcs.n	8006b6c <quorem+0x42>
 8006bb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bb8:	b92b      	cbnz	r3, 8006bc6 <quorem+0x9c>
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	d32c      	bcc.n	8006c1e <quorem+0xf4>
 8006bc4:	613c      	str	r4, [r7, #16]
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	f001 f9a8 	bl	8007f1c <__mcmp>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	db22      	blt.n	8006c16 <quorem+0xec>
 8006bd0:	3601      	adds	r6, #1
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bda:	f8d1 c000 	ldr.w	ip, [r1]
 8006bde:	b293      	uxth	r3, r2
 8006be0:	1ac3      	subs	r3, r0, r3
 8006be2:	0c12      	lsrs	r2, r2, #16
 8006be4:	fa13 f38c 	uxtah	r3, r3, ip
 8006be8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf6:	45c1      	cmp	r9, r8
 8006bf8:	f841 3b04 	str.w	r3, [r1], #4
 8006bfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c00:	d2e9      	bcs.n	8006bd6 <quorem+0xac>
 8006c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c0a:	b922      	cbnz	r2, 8006c16 <quorem+0xec>
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	d30a      	bcc.n	8006c2a <quorem+0x100>
 8006c14:	613c      	str	r4, [r7, #16]
 8006c16:	4630      	mov	r0, r6
 8006c18:	b003      	add	sp, #12
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1ce      	bne.n	8006bc4 <quorem+0x9a>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	e7c9      	b.n	8006bbe <quorem+0x94>
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1f0      	bne.n	8006c14 <quorem+0xea>
 8006c32:	3c01      	subs	r4, #1
 8006c34:	e7eb      	b.n	8006c0e <quorem+0xe4>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7ee      	b.n	8006c18 <quorem+0xee>
 8006c3a:	0000      	movs	r0, r0
 8006c3c:	0000      	movs	r0, r0
	...

08006c40 <_dtoa_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	ed2d 8b04 	vpush	{d8-d9}
 8006c48:	69c5      	ldr	r5, [r0, #28]
 8006c4a:	b093      	sub	sp, #76	; 0x4c
 8006c4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c50:	ec57 6b10 	vmov	r6, r7, d0
 8006c54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c58:	9107      	str	r1, [sp, #28]
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c60:	b975      	cbnz	r5, 8006c80 <_dtoa_r+0x40>
 8006c62:	2010      	movs	r0, #16
 8006c64:	f000 fe2a 	bl	80078bc <malloc>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	61e0      	str	r0, [r4, #28]
 8006c6c:	b920      	cbnz	r0, 8006c78 <_dtoa_r+0x38>
 8006c6e:	4bae      	ldr	r3, [pc, #696]	; (8006f28 <_dtoa_r+0x2e8>)
 8006c70:	21ef      	movs	r1, #239	; 0xef
 8006c72:	48ae      	ldr	r0, [pc, #696]	; (8006f2c <_dtoa_r+0x2ec>)
 8006c74:	f001 fb10 	bl	8008298 <__assert_func>
 8006c78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c7c:	6005      	str	r5, [r0, #0]
 8006c7e:	60c5      	str	r5, [r0, #12]
 8006c80:	69e3      	ldr	r3, [r4, #28]
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	b151      	cbz	r1, 8006c9c <_dtoa_r+0x5c>
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	604a      	str	r2, [r1, #4]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4093      	lsls	r3, r2
 8006c8e:	608b      	str	r3, [r1, #8]
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 ff07 	bl	8007aa4 <_Bfree>
 8006c96:	69e3      	ldr	r3, [r4, #28]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	1e3b      	subs	r3, r7, #0
 8006c9e:	bfbb      	ittet	lt
 8006ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	9303      	strlt	r3, [sp, #12]
 8006ca6:	2300      	movge	r3, #0
 8006ca8:	2201      	movlt	r2, #1
 8006caa:	bfac      	ite	ge
 8006cac:	f8c8 3000 	strge.w	r3, [r8]
 8006cb0:	f8c8 2000 	strlt.w	r2, [r8]
 8006cb4:	4b9e      	ldr	r3, [pc, #632]	; (8006f30 <_dtoa_r+0x2f0>)
 8006cb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006cba:	ea33 0308 	bics.w	r3, r3, r8
 8006cbe:	d11b      	bne.n	8006cf8 <_dtoa_r+0xb8>
 8006cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ccc:	4333      	orrs	r3, r6
 8006cce:	f000 8593 	beq.w	80077f8 <_dtoa_r+0xbb8>
 8006cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cd4:	b963      	cbnz	r3, 8006cf0 <_dtoa_r+0xb0>
 8006cd6:	4b97      	ldr	r3, [pc, #604]	; (8006f34 <_dtoa_r+0x2f4>)
 8006cd8:	e027      	b.n	8006d2a <_dtoa_r+0xea>
 8006cda:	4b97      	ldr	r3, [pc, #604]	; (8006f38 <_dtoa_r+0x2f8>)
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	9800      	ldr	r0, [sp, #0]
 8006ce6:	b013      	add	sp, #76	; 0x4c
 8006ce8:	ecbd 8b04 	vpop	{d8-d9}
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf0:	4b90      	ldr	r3, [pc, #576]	; (8006f34 <_dtoa_r+0x2f4>)
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	3303      	adds	r3, #3
 8006cf6:	e7f3      	b.n	8006ce0 <_dtoa_r+0xa0>
 8006cf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	ec51 0b17 	vmov	r0, r1, d7
 8006d02:	eeb0 8a47 	vmov.f32	s16, s14
 8006d06:	eef0 8a67 	vmov.f32	s17, s15
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f7f9 fee4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d10:	4681      	mov	r9, r0
 8006d12:	b160      	cbz	r0, 8006d2e <_dtoa_r+0xee>
 8006d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d16:	2301      	movs	r3, #1
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8568 	beq.w	80077f2 <_dtoa_r+0xbb2>
 8006d22:	4b86      	ldr	r3, [pc, #536]	; (8006f3c <_dtoa_r+0x2fc>)
 8006d24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	e7da      	b.n	8006ce4 <_dtoa_r+0xa4>
 8006d2e:	aa10      	add	r2, sp, #64	; 0x40
 8006d30:	a911      	add	r1, sp, #68	; 0x44
 8006d32:	4620      	mov	r0, r4
 8006d34:	eeb0 0a48 	vmov.f32	s0, s16
 8006d38:	eef0 0a68 	vmov.f32	s1, s17
 8006d3c:	f001 f994 	bl	8008068 <__d2b>
 8006d40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d44:	4682      	mov	sl, r0
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	d07f      	beq.n	8006e4a <_dtoa_r+0x20a>
 8006d4a:	ee18 3a90 	vmov	r3, s17
 8006d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d56:	ec51 0b18 	vmov	r0, r1, d8
 8006d5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d66:	4619      	mov	r1, r3
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <_dtoa_r+0x300>)
 8006d6c:	f7f9 fa94 	bl	8000298 <__aeabi_dsub>
 8006d70:	a367      	add	r3, pc, #412	; (adr r3, 8006f10 <_dtoa_r+0x2d0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fc47 	bl	8000608 <__aeabi_dmul>
 8006d7a:	a367      	add	r3, pc, #412	; (adr r3, 8006f18 <_dtoa_r+0x2d8>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f7f9 fa8c 	bl	800029c <__adddf3>
 8006d84:	4606      	mov	r6, r0
 8006d86:	4628      	mov	r0, r5
 8006d88:	460f      	mov	r7, r1
 8006d8a:	f7f9 fbd3 	bl	8000534 <__aeabi_i2d>
 8006d8e:	a364      	add	r3, pc, #400	; (adr r3, 8006f20 <_dtoa_r+0x2e0>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fa7c 	bl	800029c <__adddf3>
 8006da4:	4606      	mov	r6, r0
 8006da6:	460f      	mov	r7, r1
 8006da8:	f7f9 fede 	bl	8000b68 <__aeabi_d2iz>
 8006dac:	2200      	movs	r2, #0
 8006dae:	4683      	mov	fp, r0
 8006db0:	2300      	movs	r3, #0
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fe99 	bl	8000aec <__aeabi_dcmplt>
 8006dba:	b148      	cbz	r0, 8006dd0 <_dtoa_r+0x190>
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	f7f9 fbb9 	bl	8000534 <__aeabi_i2d>
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	f7f9 fe87 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dca:	b908      	cbnz	r0, 8006dd0 <_dtoa_r+0x190>
 8006dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dd0:	f1bb 0f16 	cmp.w	fp, #22
 8006dd4:	d857      	bhi.n	8006e86 <_dtoa_r+0x246>
 8006dd6:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <_dtoa_r+0x304>)
 8006dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	ec51 0b18 	vmov	r0, r1, d8
 8006de4:	f7f9 fe82 	bl	8000aec <__aeabi_dcmplt>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d04e      	beq.n	8006e8a <_dtoa_r+0x24a>
 8006dec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006df0:	2300      	movs	r3, #0
 8006df2:	930c      	str	r3, [sp, #48]	; 0x30
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	1b5b      	subs	r3, r3, r5
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	bf45      	ittet	mi
 8006dfc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006e00:	9305      	strmi	r3, [sp, #20]
 8006e02:	2300      	movpl	r3, #0
 8006e04:	2300      	movmi	r3, #0
 8006e06:	9206      	str	r2, [sp, #24]
 8006e08:	bf54      	ite	pl
 8006e0a:	9305      	strpl	r3, [sp, #20]
 8006e0c:	9306      	strmi	r3, [sp, #24]
 8006e0e:	f1bb 0f00 	cmp.w	fp, #0
 8006e12:	db3c      	blt.n	8006e8e <_dtoa_r+0x24e>
 8006e14:	9b06      	ldr	r3, [sp, #24]
 8006e16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006e1a:	445b      	add	r3, fp
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9308      	str	r3, [sp, #32]
 8006e22:	9b07      	ldr	r3, [sp, #28]
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d868      	bhi.n	8006efa <_dtoa_r+0x2ba>
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	bfc4      	itt	gt
 8006e2c:	3b04      	subgt	r3, #4
 8006e2e:	9307      	strgt	r3, [sp, #28]
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	f1a3 0302 	sub.w	r3, r3, #2
 8006e36:	bfcc      	ite	gt
 8006e38:	2500      	movgt	r5, #0
 8006e3a:	2501      	movle	r5, #1
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	f200 8085 	bhi.w	8006f4c <_dtoa_r+0x30c>
 8006e42:	e8df f003 	tbb	[pc, r3]
 8006e46:	3b2e      	.short	0x3b2e
 8006e48:	5839      	.short	0x5839
 8006e4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006e4e:	441d      	add	r5, r3
 8006e50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	bfc1      	itttt	gt
 8006e58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006e64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e68:	bfd6      	itet	le
 8006e6a:	f1c3 0320 	rsble	r3, r3, #32
 8006e6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e72:	fa06 f003 	lslle.w	r0, r6, r3
 8006e76:	f7f9 fb4d 	bl	8000514 <__aeabi_ui2d>
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e80:	3d01      	subs	r5, #1
 8006e82:	920e      	str	r2, [sp, #56]	; 0x38
 8006e84:	e76f      	b.n	8006d66 <_dtoa_r+0x126>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e7b3      	b.n	8006df2 <_dtoa_r+0x1b2>
 8006e8a:	900c      	str	r0, [sp, #48]	; 0x30
 8006e8c:	e7b2      	b.n	8006df4 <_dtoa_r+0x1b4>
 8006e8e:	9b05      	ldr	r3, [sp, #20]
 8006e90:	eba3 030b 	sub.w	r3, r3, fp
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	f1cb 0300 	rsb	r3, fp, #0
 8006e9a:	9308      	str	r3, [sp, #32]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ea0:	e7bf      	b.n	8006e22 <_dtoa_r+0x1e2>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dc52      	bgt.n	8006f52 <_dtoa_r+0x312>
 8006eac:	2301      	movs	r3, #1
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8006eb6:	e00b      	b.n	8006ed0 <_dtoa_r+0x290>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e7f3      	b.n	8006ea4 <_dtoa_r+0x264>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec2:	445b      	add	r3, fp
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	bfb8      	it	lt
 8006ece:	2301      	movlt	r3, #1
 8006ed0:	69e0      	ldr	r0, [r4, #28]
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	f102 0614 	add.w	r6, r2, #20
 8006eda:	429e      	cmp	r6, r3
 8006edc:	d93d      	bls.n	8006f5a <_dtoa_r+0x31a>
 8006ede:	6041      	str	r1, [r0, #4]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fd9f 	bl	8007a24 <_Balloc>
 8006ee6:	9000      	str	r0, [sp, #0]
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d139      	bne.n	8006f60 <_dtoa_r+0x320>
 8006eec:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <_dtoa_r+0x308>)
 8006eee:	4602      	mov	r2, r0
 8006ef0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ef4:	e6bd      	b.n	8006c72 <_dtoa_r+0x32>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e7e1      	b.n	8006ebe <_dtoa_r+0x27e>
 8006efa:	2501      	movs	r5, #1
 8006efc:	2300      	movs	r3, #0
 8006efe:	9307      	str	r3, [sp, #28]
 8006f00:	9509      	str	r5, [sp, #36]	; 0x24
 8006f02:	f04f 33ff 	mov.w	r3, #4294967295
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2312      	movs	r3, #18
 8006f0e:	e7d1      	b.n	8006eb4 <_dtoa_r+0x274>
 8006f10:	636f4361 	.word	0x636f4361
 8006f14:	3fd287a7 	.word	0x3fd287a7
 8006f18:	8b60c8b3 	.word	0x8b60c8b3
 8006f1c:	3fc68a28 	.word	0x3fc68a28
 8006f20:	509f79fb 	.word	0x509f79fb
 8006f24:	3fd34413 	.word	0x3fd34413
 8006f28:	08008a8d 	.word	0x08008a8d
 8006f2c:	08008aa4 	.word	0x08008aa4
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	08008a89 	.word	0x08008a89
 8006f38:	08008a80 	.word	0x08008a80
 8006f3c:	08008a5d 	.word	0x08008a5d
 8006f40:	3ff80000 	.word	0x3ff80000
 8006f44:	08008b90 	.word	0x08008b90
 8006f48:	08008afc 	.word	0x08008afc
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f50:	e7d7      	b.n	8006f02 <_dtoa_r+0x2c2>
 8006f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	e7ba      	b.n	8006ed0 <_dtoa_r+0x290>
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	0052      	lsls	r2, r2, #1
 8006f5e:	e7ba      	b.n	8006ed6 <_dtoa_r+0x296>
 8006f60:	69e3      	ldr	r3, [r4, #28]
 8006f62:	9a00      	ldr	r2, [sp, #0]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	2b0e      	cmp	r3, #14
 8006f6a:	f200 80a8 	bhi.w	80070be <_dtoa_r+0x47e>
 8006f6e:	2d00      	cmp	r5, #0
 8006f70:	f000 80a5 	beq.w	80070be <_dtoa_r+0x47e>
 8006f74:	f1bb 0f00 	cmp.w	fp, #0
 8006f78:	dd38      	ble.n	8006fec <_dtoa_r+0x3ac>
 8006f7a:	4bc0      	ldr	r3, [pc, #768]	; (800727c <_dtoa_r+0x63c>)
 8006f7c:	f00b 020f 	and.w	r2, fp, #15
 8006f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f90:	d019      	beq.n	8006fc6 <_dtoa_r+0x386>
 8006f92:	4bbb      	ldr	r3, [pc, #748]	; (8007280 <_dtoa_r+0x640>)
 8006f94:	ec51 0b18 	vmov	r0, r1, d8
 8006f98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f9c:	f7f9 fc5e 	bl	800085c <__aeabi_ddiv>
 8006fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa4:	f008 080f 	and.w	r8, r8, #15
 8006fa8:	2503      	movs	r5, #3
 8006faa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007280 <_dtoa_r+0x640>
 8006fae:	f1b8 0f00 	cmp.w	r8, #0
 8006fb2:	d10a      	bne.n	8006fca <_dtoa_r+0x38a>
 8006fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb8:	4632      	mov	r2, r6
 8006fba:	463b      	mov	r3, r7
 8006fbc:	f7f9 fc4e 	bl	800085c <__aeabi_ddiv>
 8006fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc4:	e02b      	b.n	800701e <_dtoa_r+0x3de>
 8006fc6:	2502      	movs	r5, #2
 8006fc8:	e7ef      	b.n	8006faa <_dtoa_r+0x36a>
 8006fca:	f018 0f01 	tst.w	r8, #1
 8006fce:	d008      	beq.n	8006fe2 <_dtoa_r+0x3a2>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fd8:	f7f9 fb16 	bl	8000608 <__aeabi_dmul>
 8006fdc:	3501      	adds	r5, #1
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fe6:	f109 0908 	add.w	r9, r9, #8
 8006fea:	e7e0      	b.n	8006fae <_dtoa_r+0x36e>
 8006fec:	f000 809f 	beq.w	800712e <_dtoa_r+0x4ee>
 8006ff0:	f1cb 0600 	rsb	r6, fp, #0
 8006ff4:	4ba1      	ldr	r3, [pc, #644]	; (800727c <_dtoa_r+0x63c>)
 8006ff6:	4fa2      	ldr	r7, [pc, #648]	; (8007280 <_dtoa_r+0x640>)
 8006ff8:	f006 020f 	and.w	r2, r6, #15
 8006ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	ec51 0b18 	vmov	r0, r1, d8
 8007008:	f7f9 fafe 	bl	8000608 <__aeabi_dmul>
 800700c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007010:	1136      	asrs	r6, r6, #4
 8007012:	2300      	movs	r3, #0
 8007014:	2502      	movs	r5, #2
 8007016:	2e00      	cmp	r6, #0
 8007018:	d17e      	bne.n	8007118 <_dtoa_r+0x4d8>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d0      	bne.n	8006fc0 <_dtoa_r+0x380>
 800701e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007020:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8084 	beq.w	8007132 <_dtoa_r+0x4f2>
 800702a:	4b96      	ldr	r3, [pc, #600]	; (8007284 <_dtoa_r+0x644>)
 800702c:	2200      	movs	r2, #0
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	f7f9 fd5b 	bl	8000aec <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	d07b      	beq.n	8007132 <_dtoa_r+0x4f2>
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d078      	beq.n	8007132 <_dtoa_r+0x4f2>
 8007040:	9b01      	ldr	r3, [sp, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	dd39      	ble.n	80070ba <_dtoa_r+0x47a>
 8007046:	4b90      	ldr	r3, [pc, #576]	; (8007288 <_dtoa_r+0x648>)
 8007048:	2200      	movs	r2, #0
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 fadb 	bl	8000608 <__aeabi_dmul>
 8007052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007056:	9e01      	ldr	r6, [sp, #4]
 8007058:	f10b 37ff 	add.w	r7, fp, #4294967295
 800705c:	3501      	adds	r5, #1
 800705e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007062:	4628      	mov	r0, r5
 8007064:	f7f9 fa66 	bl	8000534 <__aeabi_i2d>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	f7f9 facc 	bl	8000608 <__aeabi_dmul>
 8007070:	4b86      	ldr	r3, [pc, #536]	; (800728c <_dtoa_r+0x64c>)
 8007072:	2200      	movs	r2, #0
 8007074:	f7f9 f912 	bl	800029c <__adddf3>
 8007078:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800707c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007080:	9303      	str	r3, [sp, #12]
 8007082:	2e00      	cmp	r6, #0
 8007084:	d158      	bne.n	8007138 <_dtoa_r+0x4f8>
 8007086:	4b82      	ldr	r3, [pc, #520]	; (8007290 <_dtoa_r+0x650>)
 8007088:	2200      	movs	r2, #0
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 f903 	bl	8000298 <__aeabi_dsub>
 8007092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007096:	4680      	mov	r8, r0
 8007098:	4689      	mov	r9, r1
 800709a:	f7f9 fd45 	bl	8000b28 <__aeabi_dcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8296 	bne.w	80075d0 <_dtoa_r+0x990>
 80070a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80070a8:	4640      	mov	r0, r8
 80070aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070ae:	4649      	mov	r1, r9
 80070b0:	f7f9 fd1c 	bl	8000aec <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f040 8289 	bne.w	80075cc <_dtoa_r+0x98c>
 80070ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80070be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f2c0 814e 	blt.w	8007362 <_dtoa_r+0x722>
 80070c6:	f1bb 0f0e 	cmp.w	fp, #14
 80070ca:	f300 814a 	bgt.w	8007362 <_dtoa_r+0x722>
 80070ce:	4b6b      	ldr	r3, [pc, #428]	; (800727c <_dtoa_r+0x63c>)
 80070d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f280 80dc 	bge.w	8007298 <_dtoa_r+0x658>
 80070e0:	9b04      	ldr	r3, [sp, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f300 80d8 	bgt.w	8007298 <_dtoa_r+0x658>
 80070e8:	f040 826f 	bne.w	80075ca <_dtoa_r+0x98a>
 80070ec:	4b68      	ldr	r3, [pc, #416]	; (8007290 <_dtoa_r+0x650>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	4640      	mov	r0, r8
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 fa88 	bl	8000608 <__aeabi_dmul>
 80070f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070fc:	f7f9 fd0a 	bl	8000b14 <__aeabi_dcmpge>
 8007100:	9e04      	ldr	r6, [sp, #16]
 8007102:	4637      	mov	r7, r6
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 8245 	bne.w	8007594 <_dtoa_r+0x954>
 800710a:	9d00      	ldr	r5, [sp, #0]
 800710c:	2331      	movs	r3, #49	; 0x31
 800710e:	f805 3b01 	strb.w	r3, [r5], #1
 8007112:	f10b 0b01 	add.w	fp, fp, #1
 8007116:	e241      	b.n	800759c <_dtoa_r+0x95c>
 8007118:	07f2      	lsls	r2, r6, #31
 800711a:	d505      	bpl.n	8007128 <_dtoa_r+0x4e8>
 800711c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007120:	f7f9 fa72 	bl	8000608 <__aeabi_dmul>
 8007124:	3501      	adds	r5, #1
 8007126:	2301      	movs	r3, #1
 8007128:	1076      	asrs	r6, r6, #1
 800712a:	3708      	adds	r7, #8
 800712c:	e773      	b.n	8007016 <_dtoa_r+0x3d6>
 800712e:	2502      	movs	r5, #2
 8007130:	e775      	b.n	800701e <_dtoa_r+0x3de>
 8007132:	9e04      	ldr	r6, [sp, #16]
 8007134:	465f      	mov	r7, fp
 8007136:	e792      	b.n	800705e <_dtoa_r+0x41e>
 8007138:	9900      	ldr	r1, [sp, #0]
 800713a:	4b50      	ldr	r3, [pc, #320]	; (800727c <_dtoa_r+0x63c>)
 800713c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007140:	4431      	add	r1, r6
 8007142:	9102      	str	r1, [sp, #8]
 8007144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007146:	eeb0 9a47 	vmov.f32	s18, s14
 800714a:	eef0 9a67 	vmov.f32	s19, s15
 800714e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007156:	2900      	cmp	r1, #0
 8007158:	d044      	beq.n	80071e4 <_dtoa_r+0x5a4>
 800715a:	494e      	ldr	r1, [pc, #312]	; (8007294 <_dtoa_r+0x654>)
 800715c:	2000      	movs	r0, #0
 800715e:	f7f9 fb7d 	bl	800085c <__aeabi_ddiv>
 8007162:	ec53 2b19 	vmov	r2, r3, d9
 8007166:	f7f9 f897 	bl	8000298 <__aeabi_dsub>
 800716a:	9d00      	ldr	r5, [sp, #0]
 800716c:	ec41 0b19 	vmov	d9, r0, r1
 8007170:	4649      	mov	r1, r9
 8007172:	4640      	mov	r0, r8
 8007174:	f7f9 fcf8 	bl	8000b68 <__aeabi_d2iz>
 8007178:	4606      	mov	r6, r0
 800717a:	f7f9 f9db 	bl	8000534 <__aeabi_i2d>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f7f9 f887 	bl	8000298 <__aeabi_dsub>
 800718a:	3630      	adds	r6, #48	; 0x30
 800718c:	f805 6b01 	strb.w	r6, [r5], #1
 8007190:	ec53 2b19 	vmov	r2, r3, d9
 8007194:	4680      	mov	r8, r0
 8007196:	4689      	mov	r9, r1
 8007198:	f7f9 fca8 	bl	8000aec <__aeabi_dcmplt>
 800719c:	2800      	cmp	r0, #0
 800719e:	d164      	bne.n	800726a <_dtoa_r+0x62a>
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	4937      	ldr	r1, [pc, #220]	; (8007284 <_dtoa_r+0x644>)
 80071a6:	2000      	movs	r0, #0
 80071a8:	f7f9 f876 	bl	8000298 <__aeabi_dsub>
 80071ac:	ec53 2b19 	vmov	r2, r3, d9
 80071b0:	f7f9 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f040 80b6 	bne.w	8007326 <_dtoa_r+0x6e6>
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	429d      	cmp	r5, r3
 80071be:	f43f af7c 	beq.w	80070ba <_dtoa_r+0x47a>
 80071c2:	4b31      	ldr	r3, [pc, #196]	; (8007288 <_dtoa_r+0x648>)
 80071c4:	ec51 0b19 	vmov	r0, r1, d9
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 fa1d 	bl	8000608 <__aeabi_dmul>
 80071ce:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <_dtoa_r+0x648>)
 80071d0:	ec41 0b19 	vmov	d9, r0, r1
 80071d4:	2200      	movs	r2, #0
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	f7f9 fa15 	bl	8000608 <__aeabi_dmul>
 80071de:	4680      	mov	r8, r0
 80071e0:	4689      	mov	r9, r1
 80071e2:	e7c5      	b.n	8007170 <_dtoa_r+0x530>
 80071e4:	ec51 0b17 	vmov	r0, r1, d7
 80071e8:	f7f9 fa0e 	bl	8000608 <__aeabi_dmul>
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	9d00      	ldr	r5, [sp, #0]
 80071f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071f2:	ec41 0b19 	vmov	d9, r0, r1
 80071f6:	4649      	mov	r1, r9
 80071f8:	4640      	mov	r0, r8
 80071fa:	f7f9 fcb5 	bl	8000b68 <__aeabi_d2iz>
 80071fe:	4606      	mov	r6, r0
 8007200:	f7f9 f998 	bl	8000534 <__aeabi_i2d>
 8007204:	3630      	adds	r6, #48	; 0x30
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4640      	mov	r0, r8
 800720c:	4649      	mov	r1, r9
 800720e:	f7f9 f843 	bl	8000298 <__aeabi_dsub>
 8007212:	f805 6b01 	strb.w	r6, [r5], #1
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	429d      	cmp	r5, r3
 800721a:	4680      	mov	r8, r0
 800721c:	4689      	mov	r9, r1
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	d124      	bne.n	800726e <_dtoa_r+0x62e>
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <_dtoa_r+0x654>)
 8007226:	ec51 0b19 	vmov	r0, r1, d9
 800722a:	f7f9 f837 	bl	800029c <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f9 fc77 	bl	8000b28 <__aeabi_dcmpgt>
 800723a:	2800      	cmp	r0, #0
 800723c:	d173      	bne.n	8007326 <_dtoa_r+0x6e6>
 800723e:	ec53 2b19 	vmov	r2, r3, d9
 8007242:	4914      	ldr	r1, [pc, #80]	; (8007294 <_dtoa_r+0x654>)
 8007244:	2000      	movs	r0, #0
 8007246:	f7f9 f827 	bl	8000298 <__aeabi_dsub>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 fc4b 	bl	8000aec <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f43f af2f 	beq.w	80070ba <_dtoa_r+0x47a>
 800725c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800725e:	1e6b      	subs	r3, r5, #1
 8007260:	930f      	str	r3, [sp, #60]	; 0x3c
 8007262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007266:	2b30      	cmp	r3, #48	; 0x30
 8007268:	d0f8      	beq.n	800725c <_dtoa_r+0x61c>
 800726a:	46bb      	mov	fp, r7
 800726c:	e04a      	b.n	8007304 <_dtoa_r+0x6c4>
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <_dtoa_r+0x648>)
 8007270:	f7f9 f9ca 	bl	8000608 <__aeabi_dmul>
 8007274:	4680      	mov	r8, r0
 8007276:	4689      	mov	r9, r1
 8007278:	e7bd      	b.n	80071f6 <_dtoa_r+0x5b6>
 800727a:	bf00      	nop
 800727c:	08008b90 	.word	0x08008b90
 8007280:	08008b68 	.word	0x08008b68
 8007284:	3ff00000 	.word	0x3ff00000
 8007288:	40240000 	.word	0x40240000
 800728c:	401c0000 	.word	0x401c0000
 8007290:	40140000 	.word	0x40140000
 8007294:	3fe00000 	.word	0x3fe00000
 8007298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800729c:	9d00      	ldr	r5, [sp, #0]
 800729e:	4642      	mov	r2, r8
 80072a0:	464b      	mov	r3, r9
 80072a2:	4630      	mov	r0, r6
 80072a4:	4639      	mov	r1, r7
 80072a6:	f7f9 fad9 	bl	800085c <__aeabi_ddiv>
 80072aa:	f7f9 fc5d 	bl	8000b68 <__aeabi_d2iz>
 80072ae:	9001      	str	r0, [sp, #4]
 80072b0:	f7f9 f940 	bl	8000534 <__aeabi_i2d>
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	f7f9 f9a6 	bl	8000608 <__aeabi_dmul>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f8 ffe8 	bl	8000298 <__aeabi_dsub>
 80072c8:	9e01      	ldr	r6, [sp, #4]
 80072ca:	9f04      	ldr	r7, [sp, #16]
 80072cc:	3630      	adds	r6, #48	; 0x30
 80072ce:	f805 6b01 	strb.w	r6, [r5], #1
 80072d2:	9e00      	ldr	r6, [sp, #0]
 80072d4:	1bae      	subs	r6, r5, r6
 80072d6:	42b7      	cmp	r7, r6
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	d134      	bne.n	8007348 <_dtoa_r+0x708>
 80072de:	f7f8 ffdd 	bl	800029c <__adddf3>
 80072e2:	4642      	mov	r2, r8
 80072e4:	464b      	mov	r3, r9
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	f7f9 fc1d 	bl	8000b28 <__aeabi_dcmpgt>
 80072ee:	b9c8      	cbnz	r0, 8007324 <_dtoa_r+0x6e4>
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80072fc:	b110      	cbz	r0, 8007304 <_dtoa_r+0x6c4>
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	07db      	lsls	r3, r3, #31
 8007302:	d40f      	bmi.n	8007324 <_dtoa_r+0x6e4>
 8007304:	4651      	mov	r1, sl
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fbcc 	bl	8007aa4 <_Bfree>
 800730c:	2300      	movs	r3, #0
 800730e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007310:	702b      	strb	r3, [r5, #0]
 8007312:	f10b 0301 	add.w	r3, fp, #1
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800731a:	2b00      	cmp	r3, #0
 800731c:	f43f ace2 	beq.w	8006ce4 <_dtoa_r+0xa4>
 8007320:	601d      	str	r5, [r3, #0]
 8007322:	e4df      	b.n	8006ce4 <_dtoa_r+0xa4>
 8007324:	465f      	mov	r7, fp
 8007326:	462b      	mov	r3, r5
 8007328:	461d      	mov	r5, r3
 800732a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800732e:	2a39      	cmp	r2, #57	; 0x39
 8007330:	d106      	bne.n	8007340 <_dtoa_r+0x700>
 8007332:	9a00      	ldr	r2, [sp, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d1f7      	bne.n	8007328 <_dtoa_r+0x6e8>
 8007338:	9900      	ldr	r1, [sp, #0]
 800733a:	2230      	movs	r2, #48	; 0x30
 800733c:	3701      	adds	r7, #1
 800733e:	700a      	strb	r2, [r1, #0]
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	3201      	adds	r2, #1
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	e790      	b.n	800726a <_dtoa_r+0x62a>
 8007348:	4ba3      	ldr	r3, [pc, #652]	; (80075d8 <_dtoa_r+0x998>)
 800734a:	2200      	movs	r2, #0
 800734c:	f7f9 f95c 	bl	8000608 <__aeabi_dmul>
 8007350:	2200      	movs	r2, #0
 8007352:	2300      	movs	r3, #0
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	f7f9 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800735c:	2800      	cmp	r0, #0
 800735e:	d09e      	beq.n	800729e <_dtoa_r+0x65e>
 8007360:	e7d0      	b.n	8007304 <_dtoa_r+0x6c4>
 8007362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007364:	2a00      	cmp	r2, #0
 8007366:	f000 80ca 	beq.w	80074fe <_dtoa_r+0x8be>
 800736a:	9a07      	ldr	r2, [sp, #28]
 800736c:	2a01      	cmp	r2, #1
 800736e:	f300 80ad 	bgt.w	80074cc <_dtoa_r+0x88c>
 8007372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007374:	2a00      	cmp	r2, #0
 8007376:	f000 80a5 	beq.w	80074c4 <_dtoa_r+0x884>
 800737a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800737e:	9e08      	ldr	r6, [sp, #32]
 8007380:	9d05      	ldr	r5, [sp, #20]
 8007382:	9a05      	ldr	r2, [sp, #20]
 8007384:	441a      	add	r2, r3
 8007386:	9205      	str	r2, [sp, #20]
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	2101      	movs	r1, #1
 800738c:	441a      	add	r2, r3
 800738e:	4620      	mov	r0, r4
 8007390:	9206      	str	r2, [sp, #24]
 8007392:	f000 fc3d 	bl	8007c10 <__i2b>
 8007396:	4607      	mov	r7, r0
 8007398:	b165      	cbz	r5, 80073b4 <_dtoa_r+0x774>
 800739a:	9b06      	ldr	r3, [sp, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	dd09      	ble.n	80073b4 <_dtoa_r+0x774>
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	9a05      	ldr	r2, [sp, #20]
 80073a4:	bfa8      	it	ge
 80073a6:	462b      	movge	r3, r5
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	9205      	str	r2, [sp, #20]
 80073ac:	9a06      	ldr	r2, [sp, #24]
 80073ae:	1aed      	subs	r5, r5, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	9306      	str	r3, [sp, #24]
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	b1f3      	cbz	r3, 80073f6 <_dtoa_r+0x7b6>
 80073b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80a3 	beq.w	8007506 <_dtoa_r+0x8c6>
 80073c0:	2e00      	cmp	r6, #0
 80073c2:	dd10      	ble.n	80073e6 <_dtoa_r+0x7a6>
 80073c4:	4639      	mov	r1, r7
 80073c6:	4632      	mov	r2, r6
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fce1 	bl	8007d90 <__pow5mult>
 80073ce:	4652      	mov	r2, sl
 80073d0:	4601      	mov	r1, r0
 80073d2:	4607      	mov	r7, r0
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fc31 	bl	8007c3c <__multiply>
 80073da:	4651      	mov	r1, sl
 80073dc:	4680      	mov	r8, r0
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fb60 	bl	8007aa4 <_Bfree>
 80073e4:	46c2      	mov	sl, r8
 80073e6:	9b08      	ldr	r3, [sp, #32]
 80073e8:	1b9a      	subs	r2, r3, r6
 80073ea:	d004      	beq.n	80073f6 <_dtoa_r+0x7b6>
 80073ec:	4651      	mov	r1, sl
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 fcce 	bl	8007d90 <__pow5mult>
 80073f4:	4682      	mov	sl, r0
 80073f6:	2101      	movs	r1, #1
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fc09 	bl	8007c10 <__i2b>
 80073fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	4606      	mov	r6, r0
 8007404:	f340 8081 	ble.w	800750a <_dtoa_r+0x8ca>
 8007408:	461a      	mov	r2, r3
 800740a:	4601      	mov	r1, r0
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fcbf 	bl	8007d90 <__pow5mult>
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	2b01      	cmp	r3, #1
 8007416:	4606      	mov	r6, r0
 8007418:	dd7a      	ble.n	8007510 <_dtoa_r+0x8d0>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	6933      	ldr	r3, [r6, #16]
 8007420:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007424:	6918      	ldr	r0, [r3, #16]
 8007426:	f000 fba5 	bl	8007b74 <__hi0bits>
 800742a:	f1c0 0020 	rsb	r0, r0, #32
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	4418      	add	r0, r3
 8007432:	f010 001f 	ands.w	r0, r0, #31
 8007436:	f000 8094 	beq.w	8007562 <_dtoa_r+0x922>
 800743a:	f1c0 0320 	rsb	r3, r0, #32
 800743e:	2b04      	cmp	r3, #4
 8007440:	f340 8085 	ble.w	800754e <_dtoa_r+0x90e>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	f1c0 001c 	rsb	r0, r0, #28
 800744a:	4403      	add	r3, r0
 800744c:	9305      	str	r3, [sp, #20]
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	4403      	add	r3, r0
 8007452:	4405      	add	r5, r0
 8007454:	9306      	str	r3, [sp, #24]
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	dd05      	ble.n	8007468 <_dtoa_r+0x828>
 800745c:	4651      	mov	r1, sl
 800745e:	461a      	mov	r2, r3
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fcef 	bl	8007e44 <__lshift>
 8007466:	4682      	mov	sl, r0
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	dd05      	ble.n	800747a <_dtoa_r+0x83a>
 800746e:	4631      	mov	r1, r6
 8007470:	461a      	mov	r2, r3
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fce6 	bl	8007e44 <__lshift>
 8007478:	4606      	mov	r6, r0
 800747a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d072      	beq.n	8007566 <_dtoa_r+0x926>
 8007480:	4631      	mov	r1, r6
 8007482:	4650      	mov	r0, sl
 8007484:	f000 fd4a 	bl	8007f1c <__mcmp>
 8007488:	2800      	cmp	r0, #0
 800748a:	da6c      	bge.n	8007566 <_dtoa_r+0x926>
 800748c:	2300      	movs	r3, #0
 800748e:	4651      	mov	r1, sl
 8007490:	220a      	movs	r2, #10
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fb28 	bl	8007ae8 <__multadd>
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800749e:	4682      	mov	sl, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 81b0 	beq.w	8007806 <_dtoa_r+0xbc6>
 80074a6:	2300      	movs	r3, #0
 80074a8:	4639      	mov	r1, r7
 80074aa:	220a      	movs	r2, #10
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fb1b 	bl	8007ae8 <__multadd>
 80074b2:	9b01      	ldr	r3, [sp, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	4607      	mov	r7, r0
 80074b8:	f300 8096 	bgt.w	80075e8 <_dtoa_r+0x9a8>
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dc59      	bgt.n	8007576 <_dtoa_r+0x936>
 80074c2:	e091      	b.n	80075e8 <_dtoa_r+0x9a8>
 80074c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074ca:	e758      	b.n	800737e <_dtoa_r+0x73e>
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	1e5e      	subs	r6, r3, #1
 80074d0:	9b08      	ldr	r3, [sp, #32]
 80074d2:	42b3      	cmp	r3, r6
 80074d4:	bfbf      	itttt	lt
 80074d6:	9b08      	ldrlt	r3, [sp, #32]
 80074d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80074da:	9608      	strlt	r6, [sp, #32]
 80074dc:	1af3      	sublt	r3, r6, r3
 80074de:	bfb4      	ite	lt
 80074e0:	18d2      	addlt	r2, r2, r3
 80074e2:	1b9e      	subge	r6, r3, r6
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	bfbc      	itt	lt
 80074e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80074ea:	2600      	movlt	r6, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb7      	itett	lt
 80074f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80074f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80074f8:	1a9d      	sublt	r5, r3, r2
 80074fa:	2300      	movlt	r3, #0
 80074fc:	e741      	b.n	8007382 <_dtoa_r+0x742>
 80074fe:	9e08      	ldr	r6, [sp, #32]
 8007500:	9d05      	ldr	r5, [sp, #20]
 8007502:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007504:	e748      	b.n	8007398 <_dtoa_r+0x758>
 8007506:	9a08      	ldr	r2, [sp, #32]
 8007508:	e770      	b.n	80073ec <_dtoa_r+0x7ac>
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	2b01      	cmp	r3, #1
 800750e:	dc19      	bgt.n	8007544 <_dtoa_r+0x904>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	b9bb      	cbnz	r3, 8007544 <_dtoa_r+0x904>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751a:	b99b      	cbnz	r3, 8007544 <_dtoa_r+0x904>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007522:	0d1b      	lsrs	r3, r3, #20
 8007524:	051b      	lsls	r3, r3, #20
 8007526:	b183      	cbz	r3, 800754a <_dtoa_r+0x90a>
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	3301      	adds	r3, #1
 800752c:	9305      	str	r3, [sp, #20]
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	3301      	adds	r3, #1
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	f04f 0801 	mov.w	r8, #1
 8007538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f af6f 	bne.w	800741e <_dtoa_r+0x7de>
 8007540:	2001      	movs	r0, #1
 8007542:	e774      	b.n	800742e <_dtoa_r+0x7ee>
 8007544:	f04f 0800 	mov.w	r8, #0
 8007548:	e7f6      	b.n	8007538 <_dtoa_r+0x8f8>
 800754a:	4698      	mov	r8, r3
 800754c:	e7f4      	b.n	8007538 <_dtoa_r+0x8f8>
 800754e:	d082      	beq.n	8007456 <_dtoa_r+0x816>
 8007550:	9a05      	ldr	r2, [sp, #20]
 8007552:	331c      	adds	r3, #28
 8007554:	441a      	add	r2, r3
 8007556:	9205      	str	r2, [sp, #20]
 8007558:	9a06      	ldr	r2, [sp, #24]
 800755a:	441a      	add	r2, r3
 800755c:	441d      	add	r5, r3
 800755e:	9206      	str	r2, [sp, #24]
 8007560:	e779      	b.n	8007456 <_dtoa_r+0x816>
 8007562:	4603      	mov	r3, r0
 8007564:	e7f4      	b.n	8007550 <_dtoa_r+0x910>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	dc37      	bgt.n	80075dc <_dtoa_r+0x99c>
 800756c:	9b07      	ldr	r3, [sp, #28]
 800756e:	2b02      	cmp	r3, #2
 8007570:	dd34      	ble.n	80075dc <_dtoa_r+0x99c>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	b963      	cbnz	r3, 8007594 <_dtoa_r+0x954>
 800757a:	4631      	mov	r1, r6
 800757c:	2205      	movs	r2, #5
 800757e:	4620      	mov	r0, r4
 8007580:	f000 fab2 	bl	8007ae8 <__multadd>
 8007584:	4601      	mov	r1, r0
 8007586:	4606      	mov	r6, r0
 8007588:	4650      	mov	r0, sl
 800758a:	f000 fcc7 	bl	8007f1c <__mcmp>
 800758e:	2800      	cmp	r0, #0
 8007590:	f73f adbb 	bgt.w	800710a <_dtoa_r+0x4ca>
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	9d00      	ldr	r5, [sp, #0]
 8007598:	ea6f 0b03 	mvn.w	fp, r3
 800759c:	f04f 0800 	mov.w	r8, #0
 80075a0:	4631      	mov	r1, r6
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fa7e 	bl	8007aa4 <_Bfree>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f43f aeab 	beq.w	8007304 <_dtoa_r+0x6c4>
 80075ae:	f1b8 0f00 	cmp.w	r8, #0
 80075b2:	d005      	beq.n	80075c0 <_dtoa_r+0x980>
 80075b4:	45b8      	cmp	r8, r7
 80075b6:	d003      	beq.n	80075c0 <_dtoa_r+0x980>
 80075b8:	4641      	mov	r1, r8
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 fa72 	bl	8007aa4 <_Bfree>
 80075c0:	4639      	mov	r1, r7
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fa6e 	bl	8007aa4 <_Bfree>
 80075c8:	e69c      	b.n	8007304 <_dtoa_r+0x6c4>
 80075ca:	2600      	movs	r6, #0
 80075cc:	4637      	mov	r7, r6
 80075ce:	e7e1      	b.n	8007594 <_dtoa_r+0x954>
 80075d0:	46bb      	mov	fp, r7
 80075d2:	4637      	mov	r7, r6
 80075d4:	e599      	b.n	800710a <_dtoa_r+0x4ca>
 80075d6:	bf00      	nop
 80075d8:	40240000 	.word	0x40240000
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80c8 	beq.w	8007774 <_dtoa_r+0xb34>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	dd05      	ble.n	80075f8 <_dtoa_r+0x9b8>
 80075ec:	4639      	mov	r1, r7
 80075ee:	462a      	mov	r2, r5
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fc27 	bl	8007e44 <__lshift>
 80075f6:	4607      	mov	r7, r0
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	d05b      	beq.n	80076b6 <_dtoa_r+0xa76>
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fa0f 	bl	8007a24 <_Balloc>
 8007606:	4605      	mov	r5, r0
 8007608:	b928      	cbnz	r0, 8007616 <_dtoa_r+0x9d6>
 800760a:	4b83      	ldr	r3, [pc, #524]	; (8007818 <_dtoa_r+0xbd8>)
 800760c:	4602      	mov	r2, r0
 800760e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007612:	f7ff bb2e 	b.w	8006c72 <_dtoa_r+0x32>
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	3202      	adds	r2, #2
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	f107 010c 	add.w	r1, r7, #12
 8007620:	300c      	adds	r0, #12
 8007622:	f7ff fa74 	bl	8006b0e <memcpy>
 8007626:	2201      	movs	r2, #1
 8007628:	4629      	mov	r1, r5
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fc0a 	bl	8007e44 <__lshift>
 8007630:	9b00      	ldr	r3, [sp, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800763a:	4413      	add	r3, r2
 800763c:	9308      	str	r3, [sp, #32]
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	46b8      	mov	r8, r7
 8007646:	9306      	str	r3, [sp, #24]
 8007648:	4607      	mov	r7, r0
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	4631      	mov	r1, r6
 800764e:	3b01      	subs	r3, #1
 8007650:	4650      	mov	r0, sl
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	f7ff fa69 	bl	8006b2a <quorem>
 8007658:	4641      	mov	r1, r8
 800765a:	9002      	str	r0, [sp, #8]
 800765c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007660:	4650      	mov	r0, sl
 8007662:	f000 fc5b 	bl	8007f1c <__mcmp>
 8007666:	463a      	mov	r2, r7
 8007668:	9005      	str	r0, [sp, #20]
 800766a:	4631      	mov	r1, r6
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fc71 	bl	8007f54 <__mdiff>
 8007672:	68c2      	ldr	r2, [r0, #12]
 8007674:	4605      	mov	r5, r0
 8007676:	bb02      	cbnz	r2, 80076ba <_dtoa_r+0xa7a>
 8007678:	4601      	mov	r1, r0
 800767a:	4650      	mov	r0, sl
 800767c:	f000 fc4e 	bl	8007f1c <__mcmp>
 8007680:	4602      	mov	r2, r0
 8007682:	4629      	mov	r1, r5
 8007684:	4620      	mov	r0, r4
 8007686:	9209      	str	r2, [sp, #36]	; 0x24
 8007688:	f000 fa0c 	bl	8007aa4 <_Bfree>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	9d04      	ldr	r5, [sp, #16]
 8007692:	ea43 0102 	orr.w	r1, r3, r2
 8007696:	9b06      	ldr	r3, [sp, #24]
 8007698:	4319      	orrs	r1, r3
 800769a:	d110      	bne.n	80076be <_dtoa_r+0xa7e>
 800769c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076a0:	d029      	beq.n	80076f6 <_dtoa_r+0xab6>
 80076a2:	9b05      	ldr	r3, [sp, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dd02      	ble.n	80076ae <_dtoa_r+0xa6e>
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	f883 9000 	strb.w	r9, [r3]
 80076b4:	e774      	b.n	80075a0 <_dtoa_r+0x960>
 80076b6:	4638      	mov	r0, r7
 80076b8:	e7ba      	b.n	8007630 <_dtoa_r+0x9f0>
 80076ba:	2201      	movs	r2, #1
 80076bc:	e7e1      	b.n	8007682 <_dtoa_r+0xa42>
 80076be:	9b05      	ldr	r3, [sp, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db04      	blt.n	80076ce <_dtoa_r+0xa8e>
 80076c4:	9907      	ldr	r1, [sp, #28]
 80076c6:	430b      	orrs	r3, r1
 80076c8:	9906      	ldr	r1, [sp, #24]
 80076ca:	430b      	orrs	r3, r1
 80076cc:	d120      	bne.n	8007710 <_dtoa_r+0xad0>
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	dded      	ble.n	80076ae <_dtoa_r+0xa6e>
 80076d2:	4651      	mov	r1, sl
 80076d4:	2201      	movs	r2, #1
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fbb4 	bl	8007e44 <__lshift>
 80076dc:	4631      	mov	r1, r6
 80076de:	4682      	mov	sl, r0
 80076e0:	f000 fc1c 	bl	8007f1c <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	dc03      	bgt.n	80076f0 <_dtoa_r+0xab0>
 80076e8:	d1e1      	bne.n	80076ae <_dtoa_r+0xa6e>
 80076ea:	f019 0f01 	tst.w	r9, #1
 80076ee:	d0de      	beq.n	80076ae <_dtoa_r+0xa6e>
 80076f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076f4:	d1d8      	bne.n	80076a8 <_dtoa_r+0xa68>
 80076f6:	9a01      	ldr	r2, [sp, #4]
 80076f8:	2339      	movs	r3, #57	; 0x39
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	462b      	mov	r3, r5
 80076fe:	461d      	mov	r5, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007706:	2a39      	cmp	r2, #57	; 0x39
 8007708:	d06c      	beq.n	80077e4 <_dtoa_r+0xba4>
 800770a:	3201      	adds	r2, #1
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	e747      	b.n	80075a0 <_dtoa_r+0x960>
 8007710:	2a00      	cmp	r2, #0
 8007712:	dd07      	ble.n	8007724 <_dtoa_r+0xae4>
 8007714:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007718:	d0ed      	beq.n	80076f6 <_dtoa_r+0xab6>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	f109 0301 	add.w	r3, r9, #1
 8007720:	7013      	strb	r3, [r2, #0]
 8007722:	e73d      	b.n	80075a0 <_dtoa_r+0x960>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	9a08      	ldr	r2, [sp, #32]
 8007728:	f803 9c01 	strb.w	r9, [r3, #-1]
 800772c:	4293      	cmp	r3, r2
 800772e:	d043      	beq.n	80077b8 <_dtoa_r+0xb78>
 8007730:	4651      	mov	r1, sl
 8007732:	2300      	movs	r3, #0
 8007734:	220a      	movs	r2, #10
 8007736:	4620      	mov	r0, r4
 8007738:	f000 f9d6 	bl	8007ae8 <__multadd>
 800773c:	45b8      	cmp	r8, r7
 800773e:	4682      	mov	sl, r0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	f04f 020a 	mov.w	r2, #10
 8007748:	4641      	mov	r1, r8
 800774a:	4620      	mov	r0, r4
 800774c:	d107      	bne.n	800775e <_dtoa_r+0xb1e>
 800774e:	f000 f9cb 	bl	8007ae8 <__multadd>
 8007752:	4680      	mov	r8, r0
 8007754:	4607      	mov	r7, r0
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	3301      	adds	r3, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	e775      	b.n	800764a <_dtoa_r+0xa0a>
 800775e:	f000 f9c3 	bl	8007ae8 <__multadd>
 8007762:	4639      	mov	r1, r7
 8007764:	4680      	mov	r8, r0
 8007766:	2300      	movs	r3, #0
 8007768:	220a      	movs	r2, #10
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f9bc 	bl	8007ae8 <__multadd>
 8007770:	4607      	mov	r7, r0
 8007772:	e7f0      	b.n	8007756 <_dtoa_r+0xb16>
 8007774:	9b04      	ldr	r3, [sp, #16]
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	9d00      	ldr	r5, [sp, #0]
 800777a:	4631      	mov	r1, r6
 800777c:	4650      	mov	r0, sl
 800777e:	f7ff f9d4 	bl	8006b2a <quorem>
 8007782:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	f805 9b01 	strb.w	r9, [r5], #1
 800778c:	1aea      	subs	r2, r5, r3
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	4293      	cmp	r3, r2
 8007792:	dd07      	ble.n	80077a4 <_dtoa_r+0xb64>
 8007794:	4651      	mov	r1, sl
 8007796:	2300      	movs	r3, #0
 8007798:	220a      	movs	r2, #10
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f9a4 	bl	8007ae8 <__multadd>
 80077a0:	4682      	mov	sl, r0
 80077a2:	e7ea      	b.n	800777a <_dtoa_r+0xb3a>
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfc8      	it	gt
 80077aa:	461d      	movgt	r5, r3
 80077ac:	9b00      	ldr	r3, [sp, #0]
 80077ae:	bfd8      	it	le
 80077b0:	2501      	movle	r5, #1
 80077b2:	441d      	add	r5, r3
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	4651      	mov	r1, sl
 80077ba:	2201      	movs	r2, #1
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fb41 	bl	8007e44 <__lshift>
 80077c2:	4631      	mov	r1, r6
 80077c4:	4682      	mov	sl, r0
 80077c6:	f000 fba9 	bl	8007f1c <__mcmp>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dc96      	bgt.n	80076fc <_dtoa_r+0xabc>
 80077ce:	d102      	bne.n	80077d6 <_dtoa_r+0xb96>
 80077d0:	f019 0f01 	tst.w	r9, #1
 80077d4:	d192      	bne.n	80076fc <_dtoa_r+0xabc>
 80077d6:	462b      	mov	r3, r5
 80077d8:	461d      	mov	r5, r3
 80077da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077de:	2a30      	cmp	r2, #48	; 0x30
 80077e0:	d0fa      	beq.n	80077d8 <_dtoa_r+0xb98>
 80077e2:	e6dd      	b.n	80075a0 <_dtoa_r+0x960>
 80077e4:	9a00      	ldr	r2, [sp, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d189      	bne.n	80076fe <_dtoa_r+0xabe>
 80077ea:	f10b 0b01 	add.w	fp, fp, #1
 80077ee:	2331      	movs	r3, #49	; 0x31
 80077f0:	e796      	b.n	8007720 <_dtoa_r+0xae0>
 80077f2:	4b0a      	ldr	r3, [pc, #40]	; (800781c <_dtoa_r+0xbdc>)
 80077f4:	f7ff ba99 	b.w	8006d2a <_dtoa_r+0xea>
 80077f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f47f aa6d 	bne.w	8006cda <_dtoa_r+0x9a>
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <_dtoa_r+0xbe0>)
 8007802:	f7ff ba92 	b.w	8006d2a <_dtoa_r+0xea>
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dcb5      	bgt.n	8007778 <_dtoa_r+0xb38>
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	2b02      	cmp	r3, #2
 8007810:	f73f aeb1 	bgt.w	8007576 <_dtoa_r+0x936>
 8007814:	e7b0      	b.n	8007778 <_dtoa_r+0xb38>
 8007816:	bf00      	nop
 8007818:	08008afc 	.word	0x08008afc
 800781c:	08008a5c 	.word	0x08008a5c
 8007820:	08008a80 	.word	0x08008a80

08007824 <_free_r>:
 8007824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007826:	2900      	cmp	r1, #0
 8007828:	d044      	beq.n	80078b4 <_free_r+0x90>
 800782a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f1a1 0404 	sub.w	r4, r1, #4
 8007836:	bfb8      	it	lt
 8007838:	18e4      	addlt	r4, r4, r3
 800783a:	f000 f8e7 	bl	8007a0c <__malloc_lock>
 800783e:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <_free_r+0x94>)
 8007840:	9801      	ldr	r0, [sp, #4]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	b933      	cbnz	r3, 8007854 <_free_r+0x30>
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	6014      	str	r4, [r2, #0]
 800784a:	b003      	add	sp, #12
 800784c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007850:	f000 b8e2 	b.w	8007a18 <__malloc_unlock>
 8007854:	42a3      	cmp	r3, r4
 8007856:	d908      	bls.n	800786a <_free_r+0x46>
 8007858:	6825      	ldr	r5, [r4, #0]
 800785a:	1961      	adds	r1, r4, r5
 800785c:	428b      	cmp	r3, r1
 800785e:	bf01      	itttt	eq
 8007860:	6819      	ldreq	r1, [r3, #0]
 8007862:	685b      	ldreq	r3, [r3, #4]
 8007864:	1949      	addeq	r1, r1, r5
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	e7ed      	b.n	8007846 <_free_r+0x22>
 800786a:	461a      	mov	r2, r3
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b10b      	cbz	r3, 8007874 <_free_r+0x50>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d9fa      	bls.n	800786a <_free_r+0x46>
 8007874:	6811      	ldr	r1, [r2, #0]
 8007876:	1855      	adds	r5, r2, r1
 8007878:	42a5      	cmp	r5, r4
 800787a:	d10b      	bne.n	8007894 <_free_r+0x70>
 800787c:	6824      	ldr	r4, [r4, #0]
 800787e:	4421      	add	r1, r4
 8007880:	1854      	adds	r4, r2, r1
 8007882:	42a3      	cmp	r3, r4
 8007884:	6011      	str	r1, [r2, #0]
 8007886:	d1e0      	bne.n	800784a <_free_r+0x26>
 8007888:	681c      	ldr	r4, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	6053      	str	r3, [r2, #4]
 800788e:	440c      	add	r4, r1
 8007890:	6014      	str	r4, [r2, #0]
 8007892:	e7da      	b.n	800784a <_free_r+0x26>
 8007894:	d902      	bls.n	800789c <_free_r+0x78>
 8007896:	230c      	movs	r3, #12
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	e7d6      	b.n	800784a <_free_r+0x26>
 800789c:	6825      	ldr	r5, [r4, #0]
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf04      	itt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	bf04      	itt	eq
 80078ac:	1949      	addeq	r1, r1, r5
 80078ae:	6021      	streq	r1, [r4, #0]
 80078b0:	6054      	str	r4, [r2, #4]
 80078b2:	e7ca      	b.n	800784a <_free_r+0x26>
 80078b4:	b003      	add	sp, #12
 80078b6:	bd30      	pop	{r4, r5, pc}
 80078b8:	20002a80 	.word	0x20002a80

080078bc <malloc>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <malloc+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f000 b823 	b.w	800790c <_malloc_r>
 80078c6:	bf00      	nop
 80078c8:	2000006c 	.word	0x2000006c

080078cc <sbrk_aligned>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4e0e      	ldr	r6, [pc, #56]	; (8007908 <sbrk_aligned+0x3c>)
 80078d0:	460c      	mov	r4, r1
 80078d2:	6831      	ldr	r1, [r6, #0]
 80078d4:	4605      	mov	r5, r0
 80078d6:	b911      	cbnz	r1, 80078de <sbrk_aligned+0x12>
 80078d8:	f000 fcce 	bl	8008278 <_sbrk_r>
 80078dc:	6030      	str	r0, [r6, #0]
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 fcc9 	bl	8008278 <_sbrk_r>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d00a      	beq.n	8007900 <sbrk_aligned+0x34>
 80078ea:	1cc4      	adds	r4, r0, #3
 80078ec:	f024 0403 	bic.w	r4, r4, #3
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d007      	beq.n	8007904 <sbrk_aligned+0x38>
 80078f4:	1a21      	subs	r1, r4, r0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fcbe 	bl	8008278 <_sbrk_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d101      	bne.n	8007904 <sbrk_aligned+0x38>
 8007900:	f04f 34ff 	mov.w	r4, #4294967295
 8007904:	4620      	mov	r0, r4
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	20002a84 	.word	0x20002a84

0800790c <_malloc_r>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	1ccd      	adds	r5, r1, #3
 8007912:	f025 0503 	bic.w	r5, r5, #3
 8007916:	3508      	adds	r5, #8
 8007918:	2d0c      	cmp	r5, #12
 800791a:	bf38      	it	cc
 800791c:	250c      	movcc	r5, #12
 800791e:	2d00      	cmp	r5, #0
 8007920:	4607      	mov	r7, r0
 8007922:	db01      	blt.n	8007928 <_malloc_r+0x1c>
 8007924:	42a9      	cmp	r1, r5
 8007926:	d905      	bls.n	8007934 <_malloc_r+0x28>
 8007928:	230c      	movs	r3, #12
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	2600      	movs	r6, #0
 800792e:	4630      	mov	r0, r6
 8007930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a08 <_malloc_r+0xfc>
 8007938:	f000 f868 	bl	8007a0c <__malloc_lock>
 800793c:	f8d8 3000 	ldr.w	r3, [r8]
 8007940:	461c      	mov	r4, r3
 8007942:	bb5c      	cbnz	r4, 800799c <_malloc_r+0x90>
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ffc0 	bl	80078cc <sbrk_aligned>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	4604      	mov	r4, r0
 8007950:	d155      	bne.n	80079fe <_malloc_r+0xf2>
 8007952:	f8d8 4000 	ldr.w	r4, [r8]
 8007956:	4626      	mov	r6, r4
 8007958:	2e00      	cmp	r6, #0
 800795a:	d145      	bne.n	80079e8 <_malloc_r+0xdc>
 800795c:	2c00      	cmp	r4, #0
 800795e:	d048      	beq.n	80079f2 <_malloc_r+0xe6>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	4631      	mov	r1, r6
 8007964:	4638      	mov	r0, r7
 8007966:	eb04 0903 	add.w	r9, r4, r3
 800796a:	f000 fc85 	bl	8008278 <_sbrk_r>
 800796e:	4581      	cmp	r9, r0
 8007970:	d13f      	bne.n	80079f2 <_malloc_r+0xe6>
 8007972:	6821      	ldr	r1, [r4, #0]
 8007974:	1a6d      	subs	r5, r5, r1
 8007976:	4629      	mov	r1, r5
 8007978:	4638      	mov	r0, r7
 800797a:	f7ff ffa7 	bl	80078cc <sbrk_aligned>
 800797e:	3001      	adds	r0, #1
 8007980:	d037      	beq.n	80079f2 <_malloc_r+0xe6>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	442b      	add	r3, r5
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	f8d8 3000 	ldr.w	r3, [r8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d038      	beq.n	8007a02 <_malloc_r+0xf6>
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	42a2      	cmp	r2, r4
 8007994:	d12b      	bne.n	80079ee <_malloc_r+0xe2>
 8007996:	2200      	movs	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e00f      	b.n	80079bc <_malloc_r+0xb0>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	1b52      	subs	r2, r2, r5
 80079a0:	d41f      	bmi.n	80079e2 <_malloc_r+0xd6>
 80079a2:	2a0b      	cmp	r2, #11
 80079a4:	d917      	bls.n	80079d6 <_malloc_r+0xca>
 80079a6:	1961      	adds	r1, r4, r5
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	6025      	str	r5, [r4, #0]
 80079ac:	bf18      	it	ne
 80079ae:	6059      	strne	r1, [r3, #4]
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	bf08      	it	eq
 80079b4:	f8c8 1000 	streq.w	r1, [r8]
 80079b8:	5162      	str	r2, [r4, r5]
 80079ba:	604b      	str	r3, [r1, #4]
 80079bc:	4638      	mov	r0, r7
 80079be:	f104 060b 	add.w	r6, r4, #11
 80079c2:	f000 f829 	bl	8007a18 <__malloc_unlock>
 80079c6:	f026 0607 	bic.w	r6, r6, #7
 80079ca:	1d23      	adds	r3, r4, #4
 80079cc:	1af2      	subs	r2, r6, r3
 80079ce:	d0ae      	beq.n	800792e <_malloc_r+0x22>
 80079d0:	1b9b      	subs	r3, r3, r6
 80079d2:	50a3      	str	r3, [r4, r2]
 80079d4:	e7ab      	b.n	800792e <_malloc_r+0x22>
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	6862      	ldr	r2, [r4, #4]
 80079da:	d1dd      	bne.n	8007998 <_malloc_r+0x8c>
 80079dc:	f8c8 2000 	str.w	r2, [r8]
 80079e0:	e7ec      	b.n	80079bc <_malloc_r+0xb0>
 80079e2:	4623      	mov	r3, r4
 80079e4:	6864      	ldr	r4, [r4, #4]
 80079e6:	e7ac      	b.n	8007942 <_malloc_r+0x36>
 80079e8:	4634      	mov	r4, r6
 80079ea:	6876      	ldr	r6, [r6, #4]
 80079ec:	e7b4      	b.n	8007958 <_malloc_r+0x4c>
 80079ee:	4613      	mov	r3, r2
 80079f0:	e7cc      	b.n	800798c <_malloc_r+0x80>
 80079f2:	230c      	movs	r3, #12
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4638      	mov	r0, r7
 80079f8:	f000 f80e 	bl	8007a18 <__malloc_unlock>
 80079fc:	e797      	b.n	800792e <_malloc_r+0x22>
 80079fe:	6025      	str	r5, [r4, #0]
 8007a00:	e7dc      	b.n	80079bc <_malloc_r+0xb0>
 8007a02:	605b      	str	r3, [r3, #4]
 8007a04:	deff      	udf	#255	; 0xff
 8007a06:	bf00      	nop
 8007a08:	20002a80 	.word	0x20002a80

08007a0c <__malloc_lock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_lock+0x8>)
 8007a0e:	f7ff b87c 	b.w	8006b0a <__retarget_lock_acquire_recursive>
 8007a12:	bf00      	nop
 8007a14:	20002a7c 	.word	0x20002a7c

08007a18 <__malloc_unlock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_unlock+0x8>)
 8007a1a:	f7ff b877 	b.w	8006b0c <__retarget_lock_release_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20002a7c 	.word	0x20002a7c

08007a24 <_Balloc>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	69c6      	ldr	r6, [r0, #28]
 8007a28:	4604      	mov	r4, r0
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	b976      	cbnz	r6, 8007a4c <_Balloc+0x28>
 8007a2e:	2010      	movs	r0, #16
 8007a30:	f7ff ff44 	bl	80078bc <malloc>
 8007a34:	4602      	mov	r2, r0
 8007a36:	61e0      	str	r0, [r4, #28]
 8007a38:	b920      	cbnz	r0, 8007a44 <_Balloc+0x20>
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <_Balloc+0x78>)
 8007a3c:	4818      	ldr	r0, [pc, #96]	; (8007aa0 <_Balloc+0x7c>)
 8007a3e:	216b      	movs	r1, #107	; 0x6b
 8007a40:	f000 fc2a 	bl	8008298 <__assert_func>
 8007a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a48:	6006      	str	r6, [r0, #0]
 8007a4a:	60c6      	str	r6, [r0, #12]
 8007a4c:	69e6      	ldr	r6, [r4, #28]
 8007a4e:	68f3      	ldr	r3, [r6, #12]
 8007a50:	b183      	cbz	r3, 8007a74 <_Balloc+0x50>
 8007a52:	69e3      	ldr	r3, [r4, #28]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a5a:	b9b8      	cbnz	r0, 8007a8c <_Balloc+0x68>
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	fa01 f605 	lsl.w	r6, r1, r5
 8007a62:	1d72      	adds	r2, r6, #5
 8007a64:	0092      	lsls	r2, r2, #2
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fc34 	bl	80082d4 <_calloc_r>
 8007a6c:	b160      	cbz	r0, 8007a88 <_Balloc+0x64>
 8007a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a72:	e00e      	b.n	8007a92 <_Balloc+0x6e>
 8007a74:	2221      	movs	r2, #33	; 0x21
 8007a76:	2104      	movs	r1, #4
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 fc2b 	bl	80082d4 <_calloc_r>
 8007a7e:	69e3      	ldr	r3, [r4, #28]
 8007a80:	60f0      	str	r0, [r6, #12]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e4      	bne.n	8007a52 <_Balloc+0x2e>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	6802      	ldr	r2, [r0, #0]
 8007a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a92:	2300      	movs	r3, #0
 8007a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a98:	e7f7      	b.n	8007a8a <_Balloc+0x66>
 8007a9a:	bf00      	nop
 8007a9c:	08008a8d 	.word	0x08008a8d
 8007aa0:	08008b0d 	.word	0x08008b0d

08007aa4 <_Bfree>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	69c6      	ldr	r6, [r0, #28]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b976      	cbnz	r6, 8007acc <_Bfree+0x28>
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f7ff ff04 	bl	80078bc <malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	61e8      	str	r0, [r5, #28]
 8007ab8:	b920      	cbnz	r0, 8007ac4 <_Bfree+0x20>
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <_Bfree+0x3c>)
 8007abc:	4809      	ldr	r0, [pc, #36]	; (8007ae4 <_Bfree+0x40>)
 8007abe:	218f      	movs	r1, #143	; 0x8f
 8007ac0:	f000 fbea 	bl	8008298 <__assert_func>
 8007ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac8:	6006      	str	r6, [r0, #0]
 8007aca:	60c6      	str	r6, [r0, #12]
 8007acc:	b13c      	cbz	r4, 8007ade <_Bfree+0x3a>
 8007ace:	69eb      	ldr	r3, [r5, #28]
 8007ad0:	6862      	ldr	r2, [r4, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad8:	6021      	str	r1, [r4, #0]
 8007ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	08008a8d 	.word	0x08008a8d
 8007ae4:	08008b0d 	.word	0x08008b0d

08007ae8 <__multadd>:
 8007ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aec:	690d      	ldr	r5, [r1, #16]
 8007aee:	4607      	mov	r7, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	461e      	mov	r6, r3
 8007af4:	f101 0c14 	add.w	ip, r1, #20
 8007af8:	2000      	movs	r0, #0
 8007afa:	f8dc 3000 	ldr.w	r3, [ip]
 8007afe:	b299      	uxth	r1, r3
 8007b00:	fb02 6101 	mla	r1, r2, r1, r6
 8007b04:	0c1e      	lsrs	r6, r3, #16
 8007b06:	0c0b      	lsrs	r3, r1, #16
 8007b08:	fb02 3306 	mla	r3, r2, r6, r3
 8007b0c:	b289      	uxth	r1, r1
 8007b0e:	3001      	adds	r0, #1
 8007b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b14:	4285      	cmp	r5, r0
 8007b16:	f84c 1b04 	str.w	r1, [ip], #4
 8007b1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b1e:	dcec      	bgt.n	8007afa <__multadd+0x12>
 8007b20:	b30e      	cbz	r6, 8007b66 <__multadd+0x7e>
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	42ab      	cmp	r3, r5
 8007b26:	dc19      	bgt.n	8007b5c <__multadd+0x74>
 8007b28:	6861      	ldr	r1, [r4, #4]
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	3101      	adds	r1, #1
 8007b2e:	f7ff ff79 	bl	8007a24 <_Balloc>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b928      	cbnz	r0, 8007b42 <__multadd+0x5a>
 8007b36:	4602      	mov	r2, r0
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <__multadd+0x84>)
 8007b3a:	480d      	ldr	r0, [pc, #52]	; (8007b70 <__multadd+0x88>)
 8007b3c:	21ba      	movs	r1, #186	; 0xba
 8007b3e:	f000 fbab 	bl	8008298 <__assert_func>
 8007b42:	6922      	ldr	r2, [r4, #16]
 8007b44:	3202      	adds	r2, #2
 8007b46:	f104 010c 	add.w	r1, r4, #12
 8007b4a:	0092      	lsls	r2, r2, #2
 8007b4c:	300c      	adds	r0, #12
 8007b4e:	f7fe ffde 	bl	8006b0e <memcpy>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4638      	mov	r0, r7
 8007b56:	f7ff ffa5 	bl	8007aa4 <_Bfree>
 8007b5a:	4644      	mov	r4, r8
 8007b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b60:	3501      	adds	r5, #1
 8007b62:	615e      	str	r6, [r3, #20]
 8007b64:	6125      	str	r5, [r4, #16]
 8007b66:	4620      	mov	r0, r4
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	08008afc 	.word	0x08008afc
 8007b70:	08008b0d 	.word	0x08008b0d

08007b74 <__hi0bits>:
 8007b74:	0c03      	lsrs	r3, r0, #16
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	b9d3      	cbnz	r3, 8007bb0 <__hi0bits+0x3c>
 8007b7a:	0400      	lsls	r0, r0, #16
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b82:	bf04      	itt	eq
 8007b84:	0200      	lsleq	r0, r0, #8
 8007b86:	3308      	addeq	r3, #8
 8007b88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b8c:	bf04      	itt	eq
 8007b8e:	0100      	lsleq	r0, r0, #4
 8007b90:	3304      	addeq	r3, #4
 8007b92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b96:	bf04      	itt	eq
 8007b98:	0080      	lsleq	r0, r0, #2
 8007b9a:	3302      	addeq	r3, #2
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	db05      	blt.n	8007bac <__hi0bits+0x38>
 8007ba0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ba4:	f103 0301 	add.w	r3, r3, #1
 8007ba8:	bf08      	it	eq
 8007baa:	2320      	moveq	r3, #32
 8007bac:	4618      	mov	r0, r3
 8007bae:	4770      	bx	lr
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e7e4      	b.n	8007b7e <__hi0bits+0xa>

08007bb4 <__lo0bits>:
 8007bb4:	6803      	ldr	r3, [r0, #0]
 8007bb6:	f013 0207 	ands.w	r2, r3, #7
 8007bba:	d00c      	beq.n	8007bd6 <__lo0bits+0x22>
 8007bbc:	07d9      	lsls	r1, r3, #31
 8007bbe:	d422      	bmi.n	8007c06 <__lo0bits+0x52>
 8007bc0:	079a      	lsls	r2, r3, #30
 8007bc2:	bf49      	itett	mi
 8007bc4:	085b      	lsrmi	r3, r3, #1
 8007bc6:	089b      	lsrpl	r3, r3, #2
 8007bc8:	6003      	strmi	r3, [r0, #0]
 8007bca:	2201      	movmi	r2, #1
 8007bcc:	bf5c      	itt	pl
 8007bce:	6003      	strpl	r3, [r0, #0]
 8007bd0:	2202      	movpl	r2, #2
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4770      	bx	lr
 8007bd6:	b299      	uxth	r1, r3
 8007bd8:	b909      	cbnz	r1, 8007bde <__lo0bits+0x2a>
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	2210      	movs	r2, #16
 8007bde:	b2d9      	uxtb	r1, r3
 8007be0:	b909      	cbnz	r1, 8007be6 <__lo0bits+0x32>
 8007be2:	3208      	adds	r2, #8
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	0719      	lsls	r1, r3, #28
 8007be8:	bf04      	itt	eq
 8007bea:	091b      	lsreq	r3, r3, #4
 8007bec:	3204      	addeq	r2, #4
 8007bee:	0799      	lsls	r1, r3, #30
 8007bf0:	bf04      	itt	eq
 8007bf2:	089b      	lsreq	r3, r3, #2
 8007bf4:	3202      	addeq	r2, #2
 8007bf6:	07d9      	lsls	r1, r3, #31
 8007bf8:	d403      	bmi.n	8007c02 <__lo0bits+0x4e>
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	f102 0201 	add.w	r2, r2, #1
 8007c00:	d003      	beq.n	8007c0a <__lo0bits+0x56>
 8007c02:	6003      	str	r3, [r0, #0]
 8007c04:	e7e5      	b.n	8007bd2 <__lo0bits+0x1e>
 8007c06:	2200      	movs	r2, #0
 8007c08:	e7e3      	b.n	8007bd2 <__lo0bits+0x1e>
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	e7e1      	b.n	8007bd2 <__lo0bits+0x1e>
	...

08007c10 <__i2b>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	460c      	mov	r4, r1
 8007c14:	2101      	movs	r1, #1
 8007c16:	f7ff ff05 	bl	8007a24 <_Balloc>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	b928      	cbnz	r0, 8007c2a <__i2b+0x1a>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <__i2b+0x24>)
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <__i2b+0x28>)
 8007c22:	f240 1145 	movw	r1, #325	; 0x145
 8007c26:	f000 fb37 	bl	8008298 <__assert_func>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	6144      	str	r4, [r0, #20]
 8007c2e:	6103      	str	r3, [r0, #16]
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	08008afc 	.word	0x08008afc
 8007c38:	08008b0d 	.word	0x08008b0d

08007c3c <__multiply>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4691      	mov	r9, r2
 8007c42:	690a      	ldr	r2, [r1, #16]
 8007c44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bfb8      	it	lt
 8007c4c:	460b      	movlt	r3, r1
 8007c4e:	460c      	mov	r4, r1
 8007c50:	bfbc      	itt	lt
 8007c52:	464c      	movlt	r4, r9
 8007c54:	4699      	movlt	r9, r3
 8007c56:	6927      	ldr	r7, [r4, #16]
 8007c58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	eb07 060a 	add.w	r6, r7, sl
 8007c64:	42b3      	cmp	r3, r6
 8007c66:	b085      	sub	sp, #20
 8007c68:	bfb8      	it	lt
 8007c6a:	3101      	addlt	r1, #1
 8007c6c:	f7ff feda 	bl	8007a24 <_Balloc>
 8007c70:	b930      	cbnz	r0, 8007c80 <__multiply+0x44>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <__multiply+0x14c>)
 8007c76:	4845      	ldr	r0, [pc, #276]	; (8007d8c <__multiply+0x150>)
 8007c78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c7c:	f000 fb0c 	bl	8008298 <__assert_func>
 8007c80:	f100 0514 	add.w	r5, r0, #20
 8007c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c88:	462b      	mov	r3, r5
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4543      	cmp	r3, r8
 8007c8e:	d321      	bcc.n	8007cd4 <__multiply+0x98>
 8007c90:	f104 0314 	add.w	r3, r4, #20
 8007c94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c98:	f109 0314 	add.w	r3, r9, #20
 8007c9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ca0:	9202      	str	r2, [sp, #8]
 8007ca2:	1b3a      	subs	r2, r7, r4
 8007ca4:	3a15      	subs	r2, #21
 8007ca6:	f022 0203 	bic.w	r2, r2, #3
 8007caa:	3204      	adds	r2, #4
 8007cac:	f104 0115 	add.w	r1, r4, #21
 8007cb0:	428f      	cmp	r7, r1
 8007cb2:	bf38      	it	cc
 8007cb4:	2204      	movcc	r2, #4
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9a02      	ldr	r2, [sp, #8]
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d80c      	bhi.n	8007cda <__multiply+0x9e>
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	dd03      	ble.n	8007ccc <__multiply+0x90>
 8007cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05b      	beq.n	8007d84 <__multiply+0x148>
 8007ccc:	6106      	str	r6, [r0, #16]
 8007cce:	b005      	add	sp, #20
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	f843 2b04 	str.w	r2, [r3], #4
 8007cd8:	e7d8      	b.n	8007c8c <__multiply+0x50>
 8007cda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cde:	f1ba 0f00 	cmp.w	sl, #0
 8007ce2:	d024      	beq.n	8007d2e <__multiply+0xf2>
 8007ce4:	f104 0e14 	add.w	lr, r4, #20
 8007ce8:	46a9      	mov	r9, r5
 8007cea:	f04f 0c00 	mov.w	ip, #0
 8007cee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cf2:	f8d9 1000 	ldr.w	r1, [r9]
 8007cf6:	fa1f fb82 	uxth.w	fp, r2
 8007cfa:	b289      	uxth	r1, r1
 8007cfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d04:	f8d9 2000 	ldr.w	r2, [r9]
 8007d08:	4461      	add	r1, ip
 8007d0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d16:	b289      	uxth	r1, r1
 8007d18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d1c:	4577      	cmp	r7, lr
 8007d1e:	f849 1b04 	str.w	r1, [r9], #4
 8007d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d26:	d8e2      	bhi.n	8007cee <__multiply+0xb2>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f845 c002 	str.w	ip, [r5, r2]
 8007d2e:	9a03      	ldr	r2, [sp, #12]
 8007d30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d34:	3304      	adds	r3, #4
 8007d36:	f1b9 0f00 	cmp.w	r9, #0
 8007d3a:	d021      	beq.n	8007d80 <__multiply+0x144>
 8007d3c:	6829      	ldr	r1, [r5, #0]
 8007d3e:	f104 0c14 	add.w	ip, r4, #20
 8007d42:	46ae      	mov	lr, r5
 8007d44:	f04f 0a00 	mov.w	sl, #0
 8007d48:	f8bc b000 	ldrh.w	fp, [ip]
 8007d4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d50:	fb09 220b 	mla	r2, r9, fp, r2
 8007d54:	4452      	add	r2, sl
 8007d56:	b289      	uxth	r1, r1
 8007d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d68:	f8be 1000 	ldrh.w	r1, [lr]
 8007d6c:	fb09 110a 	mla	r1, r9, sl, r1
 8007d70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d74:	4567      	cmp	r7, ip
 8007d76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d7a:	d8e5      	bhi.n	8007d48 <__multiply+0x10c>
 8007d7c:	9a01      	ldr	r2, [sp, #4]
 8007d7e:	50a9      	str	r1, [r5, r2]
 8007d80:	3504      	adds	r5, #4
 8007d82:	e799      	b.n	8007cb8 <__multiply+0x7c>
 8007d84:	3e01      	subs	r6, #1
 8007d86:	e79b      	b.n	8007cc0 <__multiply+0x84>
 8007d88:	08008afc 	.word	0x08008afc
 8007d8c:	08008b0d 	.word	0x08008b0d

08007d90 <__pow5mult>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4615      	mov	r5, r2
 8007d96:	f012 0203 	ands.w	r2, r2, #3
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	d007      	beq.n	8007db0 <__pow5mult+0x20>
 8007da0:	4c25      	ldr	r4, [pc, #148]	; (8007e38 <__pow5mult+0xa8>)
 8007da2:	3a01      	subs	r2, #1
 8007da4:	2300      	movs	r3, #0
 8007da6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007daa:	f7ff fe9d 	bl	8007ae8 <__multadd>
 8007dae:	4607      	mov	r7, r0
 8007db0:	10ad      	asrs	r5, r5, #2
 8007db2:	d03d      	beq.n	8007e30 <__pow5mult+0xa0>
 8007db4:	69f4      	ldr	r4, [r6, #28]
 8007db6:	b97c      	cbnz	r4, 8007dd8 <__pow5mult+0x48>
 8007db8:	2010      	movs	r0, #16
 8007dba:	f7ff fd7f 	bl	80078bc <malloc>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	61f0      	str	r0, [r6, #28]
 8007dc2:	b928      	cbnz	r0, 8007dd0 <__pow5mult+0x40>
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <__pow5mult+0xac>)
 8007dc6:	481e      	ldr	r0, [pc, #120]	; (8007e40 <__pow5mult+0xb0>)
 8007dc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007dcc:	f000 fa64 	bl	8008298 <__assert_func>
 8007dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dd4:	6004      	str	r4, [r0, #0]
 8007dd6:	60c4      	str	r4, [r0, #12]
 8007dd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de0:	b94c      	cbnz	r4, 8007df6 <__pow5mult+0x66>
 8007de2:	f240 2171 	movw	r1, #625	; 0x271
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ff12 	bl	8007c10 <__i2b>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007df2:	4604      	mov	r4, r0
 8007df4:	6003      	str	r3, [r0, #0]
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	07eb      	lsls	r3, r5, #31
 8007dfc:	d50a      	bpl.n	8007e14 <__pow5mult+0x84>
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4622      	mov	r2, r4
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7ff ff1a 	bl	8007c3c <__multiply>
 8007e08:	4639      	mov	r1, r7
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff fe49 	bl	8007aa4 <_Bfree>
 8007e12:	4647      	mov	r7, r8
 8007e14:	106d      	asrs	r5, r5, #1
 8007e16:	d00b      	beq.n	8007e30 <__pow5mult+0xa0>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	b938      	cbnz	r0, 8007e2c <__pow5mult+0x9c>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7ff ff0b 	bl	8007c3c <__multiply>
 8007e26:	6020      	str	r0, [r4, #0]
 8007e28:	f8c0 9000 	str.w	r9, [r0]
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	e7e4      	b.n	8007dfa <__pow5mult+0x6a>
 8007e30:	4638      	mov	r0, r7
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	bf00      	nop
 8007e38:	08008c58 	.word	0x08008c58
 8007e3c:	08008a8d 	.word	0x08008a8d
 8007e40:	08008b0d 	.word	0x08008b0d

08007e44 <__lshift>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6849      	ldr	r1, [r1, #4]
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	4607      	mov	r7, r0
 8007e56:	4691      	mov	r9, r2
 8007e58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e5c:	f108 0601 	add.w	r6, r8, #1
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	db0b      	blt.n	8007e7c <__lshift+0x38>
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff fddd 	bl	8007a24 <_Balloc>
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b948      	cbnz	r0, 8007e82 <__lshift+0x3e>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <__lshift+0xd0>)
 8007e72:	4829      	ldr	r0, [pc, #164]	; (8007f18 <__lshift+0xd4>)
 8007e74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e78:	f000 fa0e 	bl	8008298 <__assert_func>
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	e7ee      	b.n	8007e60 <__lshift+0x1c>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f100 0114 	add.w	r1, r0, #20
 8007e88:	f100 0210 	add.w	r2, r0, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	4553      	cmp	r3, sl
 8007e90:	db33      	blt.n	8007efa <__lshift+0xb6>
 8007e92:	6920      	ldr	r0, [r4, #16]
 8007e94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	f019 091f 	ands.w	r9, r9, #31
 8007ea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ea8:	d02b      	beq.n	8007f02 <__lshift+0xbe>
 8007eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8007eae:	468a      	mov	sl, r1
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	fa00 f009 	lsl.w	r0, r0, r9
 8007eb8:	4310      	orrs	r0, r2
 8007eba:	f84a 0b04 	str.w	r0, [sl], #4
 8007ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec2:	459c      	cmp	ip, r3
 8007ec4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ec8:	d8f3      	bhi.n	8007eb2 <__lshift+0x6e>
 8007eca:	ebac 0304 	sub.w	r3, ip, r4
 8007ece:	3b15      	subs	r3, #21
 8007ed0:	f023 0303 	bic.w	r3, r3, #3
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	f104 0015 	add.w	r0, r4, #21
 8007eda:	4584      	cmp	ip, r0
 8007edc:	bf38      	it	cc
 8007ede:	2304      	movcc	r3, #4
 8007ee0:	50ca      	str	r2, [r1, r3]
 8007ee2:	b10a      	cbz	r2, 8007ee8 <__lshift+0xa4>
 8007ee4:	f108 0602 	add.w	r6, r8, #2
 8007ee8:	3e01      	subs	r6, #1
 8007eea:	4638      	mov	r0, r7
 8007eec:	612e      	str	r6, [r5, #16]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	f7ff fdd8 	bl	8007aa4 <_Bfree>
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007efe:	3301      	adds	r3, #1
 8007f00:	e7c5      	b.n	8007e8e <__lshift+0x4a>
 8007f02:	3904      	subs	r1, #4
 8007f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f0c:	459c      	cmp	ip, r3
 8007f0e:	d8f9      	bhi.n	8007f04 <__lshift+0xc0>
 8007f10:	e7ea      	b.n	8007ee8 <__lshift+0xa4>
 8007f12:	bf00      	nop
 8007f14:	08008afc 	.word	0x08008afc
 8007f18:	08008b0d 	.word	0x08008b0d

08007f1c <__mcmp>:
 8007f1c:	b530      	push	{r4, r5, lr}
 8007f1e:	6902      	ldr	r2, [r0, #16]
 8007f20:	690c      	ldr	r4, [r1, #16]
 8007f22:	1b12      	subs	r2, r2, r4
 8007f24:	d10e      	bne.n	8007f44 <__mcmp+0x28>
 8007f26:	f100 0314 	add.w	r3, r0, #20
 8007f2a:	3114      	adds	r1, #20
 8007f2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f3c:	42a5      	cmp	r5, r4
 8007f3e:	d003      	beq.n	8007f48 <__mcmp+0x2c>
 8007f40:	d305      	bcc.n	8007f4e <__mcmp+0x32>
 8007f42:	2201      	movs	r2, #1
 8007f44:	4610      	mov	r0, r2
 8007f46:	bd30      	pop	{r4, r5, pc}
 8007f48:	4283      	cmp	r3, r0
 8007f4a:	d3f3      	bcc.n	8007f34 <__mcmp+0x18>
 8007f4c:	e7fa      	b.n	8007f44 <__mcmp+0x28>
 8007f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f52:	e7f7      	b.n	8007f44 <__mcmp+0x28>

08007f54 <__mdiff>:
 8007f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	460c      	mov	r4, r1
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4690      	mov	r8, r2
 8007f62:	f7ff ffdb 	bl	8007f1c <__mcmp>
 8007f66:	1e05      	subs	r5, r0, #0
 8007f68:	d110      	bne.n	8007f8c <__mdiff+0x38>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fd59 	bl	8007a24 <_Balloc>
 8007f72:	b930      	cbnz	r0, 8007f82 <__mdiff+0x2e>
 8007f74:	4b3a      	ldr	r3, [pc, #232]	; (8008060 <__mdiff+0x10c>)
 8007f76:	4602      	mov	r2, r0
 8007f78:	f240 2137 	movw	r1, #567	; 0x237
 8007f7c:	4839      	ldr	r0, [pc, #228]	; (8008064 <__mdiff+0x110>)
 8007f7e:	f000 f98b 	bl	8008298 <__assert_func>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8c:	bfa4      	itt	ge
 8007f8e:	4643      	movge	r3, r8
 8007f90:	46a0      	movge	r8, r4
 8007f92:	4630      	mov	r0, r6
 8007f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f98:	bfa6      	itte	ge
 8007f9a:	461c      	movge	r4, r3
 8007f9c:	2500      	movge	r5, #0
 8007f9e:	2501      	movlt	r5, #1
 8007fa0:	f7ff fd40 	bl	8007a24 <_Balloc>
 8007fa4:	b920      	cbnz	r0, 8007fb0 <__mdiff+0x5c>
 8007fa6:	4b2e      	ldr	r3, [pc, #184]	; (8008060 <__mdiff+0x10c>)
 8007fa8:	4602      	mov	r2, r0
 8007faa:	f240 2145 	movw	r1, #581	; 0x245
 8007fae:	e7e5      	b.n	8007f7c <__mdiff+0x28>
 8007fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fb4:	6926      	ldr	r6, [r4, #16]
 8007fb6:	60c5      	str	r5, [r0, #12]
 8007fb8:	f104 0914 	add.w	r9, r4, #20
 8007fbc:	f108 0514 	add.w	r5, r8, #20
 8007fc0:	f100 0e14 	add.w	lr, r0, #20
 8007fc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fcc:	f108 0210 	add.w	r2, r8, #16
 8007fd0:	46f2      	mov	sl, lr
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fdc:	fa11 f88b 	uxtah	r8, r1, fp
 8007fe0:	b299      	uxth	r1, r3
 8007fe2:	0c1b      	lsrs	r3, r3, #16
 8007fe4:	eba8 0801 	sub.w	r8, r8, r1
 8007fe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ff0:	fa1f f888 	uxth.w	r8, r8
 8007ff4:	1419      	asrs	r1, r3, #16
 8007ff6:	454e      	cmp	r6, r9
 8007ff8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ffc:	f84a 3b04 	str.w	r3, [sl], #4
 8008000:	d8e8      	bhi.n	8007fd4 <__mdiff+0x80>
 8008002:	1b33      	subs	r3, r6, r4
 8008004:	3b15      	subs	r3, #21
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	3304      	adds	r3, #4
 800800c:	3415      	adds	r4, #21
 800800e:	42a6      	cmp	r6, r4
 8008010:	bf38      	it	cc
 8008012:	2304      	movcc	r3, #4
 8008014:	441d      	add	r5, r3
 8008016:	4473      	add	r3, lr
 8008018:	469e      	mov	lr, r3
 800801a:	462e      	mov	r6, r5
 800801c:	4566      	cmp	r6, ip
 800801e:	d30e      	bcc.n	800803e <__mdiff+0xea>
 8008020:	f10c 0203 	add.w	r2, ip, #3
 8008024:	1b52      	subs	r2, r2, r5
 8008026:	f022 0203 	bic.w	r2, r2, #3
 800802a:	3d03      	subs	r5, #3
 800802c:	45ac      	cmp	ip, r5
 800802e:	bf38      	it	cc
 8008030:	2200      	movcc	r2, #0
 8008032:	4413      	add	r3, r2
 8008034:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008038:	b17a      	cbz	r2, 800805a <__mdiff+0x106>
 800803a:	6107      	str	r7, [r0, #16]
 800803c:	e7a4      	b.n	8007f88 <__mdiff+0x34>
 800803e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008042:	fa11 f288 	uxtah	r2, r1, r8
 8008046:	1414      	asrs	r4, r2, #16
 8008048:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800804c:	b292      	uxth	r2, r2
 800804e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008052:	f84e 2b04 	str.w	r2, [lr], #4
 8008056:	1421      	asrs	r1, r4, #16
 8008058:	e7e0      	b.n	800801c <__mdiff+0xc8>
 800805a:	3f01      	subs	r7, #1
 800805c:	e7ea      	b.n	8008034 <__mdiff+0xe0>
 800805e:	bf00      	nop
 8008060:	08008afc 	.word	0x08008afc
 8008064:	08008b0d 	.word	0x08008b0d

08008068 <__d2b>:
 8008068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800806c:	460f      	mov	r7, r1
 800806e:	2101      	movs	r1, #1
 8008070:	ec59 8b10 	vmov	r8, r9, d0
 8008074:	4616      	mov	r6, r2
 8008076:	f7ff fcd5 	bl	8007a24 <_Balloc>
 800807a:	4604      	mov	r4, r0
 800807c:	b930      	cbnz	r0, 800808c <__d2b+0x24>
 800807e:	4602      	mov	r2, r0
 8008080:	4b24      	ldr	r3, [pc, #144]	; (8008114 <__d2b+0xac>)
 8008082:	4825      	ldr	r0, [pc, #148]	; (8008118 <__d2b+0xb0>)
 8008084:	f240 310f 	movw	r1, #783	; 0x30f
 8008088:	f000 f906 	bl	8008298 <__assert_func>
 800808c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008094:	bb2d      	cbnz	r5, 80080e2 <__d2b+0x7a>
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	f1b8 0300 	subs.w	r3, r8, #0
 800809c:	d026      	beq.n	80080ec <__d2b+0x84>
 800809e:	4668      	mov	r0, sp
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	f7ff fd87 	bl	8007bb4 <__lo0bits>
 80080a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080aa:	b1e8      	cbz	r0, 80080e8 <__d2b+0x80>
 80080ac:	f1c0 0320 	rsb	r3, r0, #32
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	430b      	orrs	r3, r1
 80080b6:	40c2      	lsrs	r2, r0
 80080b8:	6163      	str	r3, [r4, #20]
 80080ba:	9201      	str	r2, [sp, #4]
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	61a3      	str	r3, [r4, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2202      	movne	r2, #2
 80080c6:	2201      	moveq	r2, #1
 80080c8:	6122      	str	r2, [r4, #16]
 80080ca:	b1bd      	cbz	r5, 80080fc <__d2b+0x94>
 80080cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080d0:	4405      	add	r5, r0
 80080d2:	603d      	str	r5, [r7, #0]
 80080d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080d8:	6030      	str	r0, [r6, #0]
 80080da:	4620      	mov	r0, r4
 80080dc:	b003      	add	sp, #12
 80080de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e6:	e7d6      	b.n	8008096 <__d2b+0x2e>
 80080e8:	6161      	str	r1, [r4, #20]
 80080ea:	e7e7      	b.n	80080bc <__d2b+0x54>
 80080ec:	a801      	add	r0, sp, #4
 80080ee:	f7ff fd61 	bl	8007bb4 <__lo0bits>
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	6163      	str	r3, [r4, #20]
 80080f6:	3020      	adds	r0, #32
 80080f8:	2201      	movs	r2, #1
 80080fa:	e7e5      	b.n	80080c8 <__d2b+0x60>
 80080fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008104:	6038      	str	r0, [r7, #0]
 8008106:	6918      	ldr	r0, [r3, #16]
 8008108:	f7ff fd34 	bl	8007b74 <__hi0bits>
 800810c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008110:	e7e2      	b.n	80080d8 <__d2b+0x70>
 8008112:	bf00      	nop
 8008114:	08008afc 	.word	0x08008afc
 8008118:	08008b0d 	.word	0x08008b0d

0800811c <__sflush_r>:
 800811c:	898a      	ldrh	r2, [r1, #12]
 800811e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008122:	4605      	mov	r5, r0
 8008124:	0710      	lsls	r0, r2, #28
 8008126:	460c      	mov	r4, r1
 8008128:	d458      	bmi.n	80081dc <__sflush_r+0xc0>
 800812a:	684b      	ldr	r3, [r1, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dc05      	bgt.n	800813c <__sflush_r+0x20>
 8008130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc02      	bgt.n	800813c <__sflush_r+0x20>
 8008136:	2000      	movs	r0, #0
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813e:	2e00      	cmp	r6, #0
 8008140:	d0f9      	beq.n	8008136 <__sflush_r+0x1a>
 8008142:	2300      	movs	r3, #0
 8008144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008148:	682f      	ldr	r7, [r5, #0]
 800814a:	6a21      	ldr	r1, [r4, #32]
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	d032      	beq.n	80081b6 <__sflush_r+0x9a>
 8008150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	075a      	lsls	r2, r3, #29
 8008156:	d505      	bpl.n	8008164 <__sflush_r+0x48>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	1ac0      	subs	r0, r0, r3
 800815c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800815e:	b10b      	cbz	r3, 8008164 <__sflush_r+0x48>
 8008160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	2300      	movs	r3, #0
 8008166:	4602      	mov	r2, r0
 8008168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800816a:	6a21      	ldr	r1, [r4, #32]
 800816c:	4628      	mov	r0, r5
 800816e:	47b0      	blx	r6
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	d106      	bne.n	8008184 <__sflush_r+0x68>
 8008176:	6829      	ldr	r1, [r5, #0]
 8008178:	291d      	cmp	r1, #29
 800817a:	d82b      	bhi.n	80081d4 <__sflush_r+0xb8>
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <__sflush_r+0x108>)
 800817e:	410a      	asrs	r2, r1
 8008180:	07d6      	lsls	r6, r2, #31
 8008182:	d427      	bmi.n	80081d4 <__sflush_r+0xb8>
 8008184:	2200      	movs	r2, #0
 8008186:	6062      	str	r2, [r4, #4]
 8008188:	04d9      	lsls	r1, r3, #19
 800818a:	6922      	ldr	r2, [r4, #16]
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	d504      	bpl.n	800819a <__sflush_r+0x7e>
 8008190:	1c42      	adds	r2, r0, #1
 8008192:	d101      	bne.n	8008198 <__sflush_r+0x7c>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b903      	cbnz	r3, 800819a <__sflush_r+0x7e>
 8008198:	6560      	str	r0, [r4, #84]	; 0x54
 800819a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819c:	602f      	str	r7, [r5, #0]
 800819e:	2900      	cmp	r1, #0
 80081a0:	d0c9      	beq.n	8008136 <__sflush_r+0x1a>
 80081a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a6:	4299      	cmp	r1, r3
 80081a8:	d002      	beq.n	80081b0 <__sflush_r+0x94>
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff fb3a 	bl	8007824 <_free_r>
 80081b0:	2000      	movs	r0, #0
 80081b2:	6360      	str	r0, [r4, #52]	; 0x34
 80081b4:	e7c0      	b.n	8008138 <__sflush_r+0x1c>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b0      	blx	r6
 80081bc:	1c41      	adds	r1, r0, #1
 80081be:	d1c8      	bne.n	8008152 <__sflush_r+0x36>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c5      	beq.n	8008152 <__sflush_r+0x36>
 80081c6:	2b1d      	cmp	r3, #29
 80081c8:	d001      	beq.n	80081ce <__sflush_r+0xb2>
 80081ca:	2b16      	cmp	r3, #22
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0xb6>
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	e7b1      	b.n	8008136 <__sflush_r+0x1a>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e7ad      	b.n	8008138 <__sflush_r+0x1c>
 80081dc:	690f      	ldr	r7, [r1, #16]
 80081de:	2f00      	cmp	r7, #0
 80081e0:	d0a9      	beq.n	8008136 <__sflush_r+0x1a>
 80081e2:	0793      	lsls	r3, r2, #30
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	bf08      	it	eq
 80081e8:	694b      	ldreq	r3, [r1, #20]
 80081ea:	600f      	str	r7, [r1, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2300      	movne	r3, #0
 80081f0:	eba6 0807 	sub.w	r8, r6, r7
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	dd9c      	ble.n	8008136 <__sflush_r+0x1a>
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008200:	4643      	mov	r3, r8
 8008202:	463a      	mov	r2, r7
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	2800      	cmp	r0, #0
 800820a:	dc06      	bgt.n	800821a <__sflush_r+0xfe>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e78e      	b.n	8008138 <__sflush_r+0x1c>
 800821a:	4407      	add	r7, r0
 800821c:	eba8 0800 	sub.w	r8, r8, r0
 8008220:	e7e9      	b.n	80081f6 <__sflush_r+0xda>
 8008222:	bf00      	nop
 8008224:	dfbffffe 	.word	0xdfbffffe

08008228 <_fflush_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	b913      	cbnz	r3, 8008238 <_fflush_r+0x10>
 8008232:	2500      	movs	r5, #0
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	b118      	cbz	r0, 8008242 <_fflush_r+0x1a>
 800823a:	6a03      	ldr	r3, [r0, #32]
 800823c:	b90b      	cbnz	r3, 8008242 <_fflush_r+0x1a>
 800823e:	f7fe fb6d 	bl	800691c <__sinit>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f3      	beq.n	8008232 <_fflush_r+0xa>
 800824a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800824c:	07d0      	lsls	r0, r2, #31
 800824e:	d404      	bmi.n	800825a <_fflush_r+0x32>
 8008250:	0599      	lsls	r1, r3, #22
 8008252:	d402      	bmi.n	800825a <_fflush_r+0x32>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f7fe fc58 	bl	8006b0a <__retarget_lock_acquire_recursive>
 800825a:	4628      	mov	r0, r5
 800825c:	4621      	mov	r1, r4
 800825e:	f7ff ff5d 	bl	800811c <__sflush_r>
 8008262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008264:	07da      	lsls	r2, r3, #31
 8008266:	4605      	mov	r5, r0
 8008268:	d4e4      	bmi.n	8008234 <_fflush_r+0xc>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	059b      	lsls	r3, r3, #22
 800826e:	d4e1      	bmi.n	8008234 <_fflush_r+0xc>
 8008270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008272:	f7fe fc4b 	bl	8006b0c <__retarget_lock_release_recursive>
 8008276:	e7dd      	b.n	8008234 <_fflush_r+0xc>

08008278 <_sbrk_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d06      	ldr	r5, [pc, #24]	; (8008294 <_sbrk_r+0x1c>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7f9 ffc4 	bl	8002210 <_sbrk>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_sbrk_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_sbrk_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20002a78 	.word	0x20002a78

08008298 <__assert_func>:
 8008298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800829a:	4614      	mov	r4, r2
 800829c:	461a      	mov	r2, r3
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <__assert_func+0x2c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4605      	mov	r5, r0
 80082a4:	68d8      	ldr	r0, [r3, #12]
 80082a6:	b14c      	cbz	r4, 80082bc <__assert_func+0x24>
 80082a8:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <__assert_func+0x30>)
 80082aa:	9100      	str	r1, [sp, #0]
 80082ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082b0:	4906      	ldr	r1, [pc, #24]	; (80082cc <__assert_func+0x34>)
 80082b2:	462b      	mov	r3, r5
 80082b4:	f000 f844 	bl	8008340 <fiprintf>
 80082b8:	f000 f854 	bl	8008364 <abort>
 80082bc:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <__assert_func+0x38>)
 80082be:	461c      	mov	r4, r3
 80082c0:	e7f3      	b.n	80082aa <__assert_func+0x12>
 80082c2:	bf00      	nop
 80082c4:	2000006c 	.word	0x2000006c
 80082c8:	08008c6e 	.word	0x08008c6e
 80082cc:	08008c7b 	.word	0x08008c7b
 80082d0:	08008ca9 	.word	0x08008ca9

080082d4 <_calloc_r>:
 80082d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082d6:	fba1 2402 	umull	r2, r4, r1, r2
 80082da:	b94c      	cbnz	r4, 80082f0 <_calloc_r+0x1c>
 80082dc:	4611      	mov	r1, r2
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	f7ff fb14 	bl	800790c <_malloc_r>
 80082e4:	9a01      	ldr	r2, [sp, #4]
 80082e6:	4605      	mov	r5, r0
 80082e8:	b930      	cbnz	r0, 80082f8 <_calloc_r+0x24>
 80082ea:	4628      	mov	r0, r5
 80082ec:	b003      	add	sp, #12
 80082ee:	bd30      	pop	{r4, r5, pc}
 80082f0:	220c      	movs	r2, #12
 80082f2:	6002      	str	r2, [r0, #0]
 80082f4:	2500      	movs	r5, #0
 80082f6:	e7f8      	b.n	80082ea <_calloc_r+0x16>
 80082f8:	4621      	mov	r1, r4
 80082fa:	f7fe fb88 	bl	8006a0e <memset>
 80082fe:	e7f4      	b.n	80082ea <_calloc_r+0x16>

08008300 <__ascii_mbtowc>:
 8008300:	b082      	sub	sp, #8
 8008302:	b901      	cbnz	r1, 8008306 <__ascii_mbtowc+0x6>
 8008304:	a901      	add	r1, sp, #4
 8008306:	b142      	cbz	r2, 800831a <__ascii_mbtowc+0x1a>
 8008308:	b14b      	cbz	r3, 800831e <__ascii_mbtowc+0x1e>
 800830a:	7813      	ldrb	r3, [r2, #0]
 800830c:	600b      	str	r3, [r1, #0]
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	1e10      	subs	r0, r2, #0
 8008312:	bf18      	it	ne
 8008314:	2001      	movne	r0, #1
 8008316:	b002      	add	sp, #8
 8008318:	4770      	bx	lr
 800831a:	4610      	mov	r0, r2
 800831c:	e7fb      	b.n	8008316 <__ascii_mbtowc+0x16>
 800831e:	f06f 0001 	mvn.w	r0, #1
 8008322:	e7f8      	b.n	8008316 <__ascii_mbtowc+0x16>

08008324 <__ascii_wctomb>:
 8008324:	b149      	cbz	r1, 800833a <__ascii_wctomb+0x16>
 8008326:	2aff      	cmp	r2, #255	; 0xff
 8008328:	bf85      	ittet	hi
 800832a:	238a      	movhi	r3, #138	; 0x8a
 800832c:	6003      	strhi	r3, [r0, #0]
 800832e:	700a      	strbls	r2, [r1, #0]
 8008330:	f04f 30ff 	movhi.w	r0, #4294967295
 8008334:	bf98      	it	ls
 8008336:	2001      	movls	r0, #1
 8008338:	4770      	bx	lr
 800833a:	4608      	mov	r0, r1
 800833c:	4770      	bx	lr
	...

08008340 <fiprintf>:
 8008340:	b40e      	push	{r1, r2, r3}
 8008342:	b503      	push	{r0, r1, lr}
 8008344:	4601      	mov	r1, r0
 8008346:	ab03      	add	r3, sp, #12
 8008348:	4805      	ldr	r0, [pc, #20]	; (8008360 <fiprintf+0x20>)
 800834a:	f853 2b04 	ldr.w	r2, [r3], #4
 800834e:	6800      	ldr	r0, [r0, #0]
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	f000 f837 	bl	80083c4 <_vfiprintf_r>
 8008356:	b002      	add	sp, #8
 8008358:	f85d eb04 	ldr.w	lr, [sp], #4
 800835c:	b003      	add	sp, #12
 800835e:	4770      	bx	lr
 8008360:	2000006c 	.word	0x2000006c

08008364 <abort>:
 8008364:	b508      	push	{r3, lr}
 8008366:	2006      	movs	r0, #6
 8008368:	f000 fa04 	bl	8008774 <raise>
 800836c:	2001      	movs	r0, #1
 800836e:	f7f9 fed7 	bl	8002120 <_exit>

08008372 <__sfputc_r>:
 8008372:	6893      	ldr	r3, [r2, #8]
 8008374:	3b01      	subs	r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	b410      	push	{r4}
 800837a:	6093      	str	r3, [r2, #8]
 800837c:	da08      	bge.n	8008390 <__sfputc_r+0x1e>
 800837e:	6994      	ldr	r4, [r2, #24]
 8008380:	42a3      	cmp	r3, r4
 8008382:	db01      	blt.n	8008388 <__sfputc_r+0x16>
 8008384:	290a      	cmp	r1, #10
 8008386:	d103      	bne.n	8008390 <__sfputc_r+0x1e>
 8008388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800838c:	f000 b934 	b.w	80085f8 <__swbuf_r>
 8008390:	6813      	ldr	r3, [r2, #0]
 8008392:	1c58      	adds	r0, r3, #1
 8008394:	6010      	str	r0, [r2, #0]
 8008396:	7019      	strb	r1, [r3, #0]
 8008398:	4608      	mov	r0, r1
 800839a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <__sfputs_r>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	4614      	mov	r4, r2
 80083a8:	18d5      	adds	r5, r2, r3
 80083aa:	42ac      	cmp	r4, r5
 80083ac:	d101      	bne.n	80083b2 <__sfputs_r+0x12>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e007      	b.n	80083c2 <__sfputs_r+0x22>
 80083b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b6:	463a      	mov	r2, r7
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffda 	bl	8008372 <__sfputc_r>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d1f3      	bne.n	80083aa <__sfputs_r+0xa>
 80083c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083c4 <_vfiprintf_r>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	460d      	mov	r5, r1
 80083ca:	b09d      	sub	sp, #116	; 0x74
 80083cc:	4614      	mov	r4, r2
 80083ce:	4698      	mov	r8, r3
 80083d0:	4606      	mov	r6, r0
 80083d2:	b118      	cbz	r0, 80083dc <_vfiprintf_r+0x18>
 80083d4:	6a03      	ldr	r3, [r0, #32]
 80083d6:	b90b      	cbnz	r3, 80083dc <_vfiprintf_r+0x18>
 80083d8:	f7fe faa0 	bl	800691c <__sinit>
 80083dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d405      	bmi.n	80083ee <_vfiprintf_r+0x2a>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_vfiprintf_r+0x2a>
 80083e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ea:	f7fe fb8e 	bl	8006b0a <__retarget_lock_acquire_recursive>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	071b      	lsls	r3, r3, #28
 80083f2:	d501      	bpl.n	80083f8 <_vfiprintf_r+0x34>
 80083f4:	692b      	ldr	r3, [r5, #16]
 80083f6:	b99b      	cbnz	r3, 8008420 <_vfiprintf_r+0x5c>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 f93a 	bl	8008674 <__swsetup_r>
 8008400:	b170      	cbz	r0, 8008420 <_vfiprintf_r+0x5c>
 8008402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008404:	07dc      	lsls	r4, r3, #31
 8008406:	d504      	bpl.n	8008412 <_vfiprintf_r+0x4e>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	b01d      	add	sp, #116	; 0x74
 800840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	0598      	lsls	r0, r3, #22
 8008416:	d4f7      	bmi.n	8008408 <_vfiprintf_r+0x44>
 8008418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800841a:	f7fe fb77 	bl	8006b0c <__retarget_lock_release_recursive>
 800841e:	e7f3      	b.n	8008408 <_vfiprintf_r+0x44>
 8008420:	2300      	movs	r3, #0
 8008422:	9309      	str	r3, [sp, #36]	; 0x24
 8008424:	2320      	movs	r3, #32
 8008426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800842a:	f8cd 800c 	str.w	r8, [sp, #12]
 800842e:	2330      	movs	r3, #48	; 0x30
 8008430:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085e4 <_vfiprintf_r+0x220>
 8008434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008438:	f04f 0901 	mov.w	r9, #1
 800843c:	4623      	mov	r3, r4
 800843e:	469a      	mov	sl, r3
 8008440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008444:	b10a      	cbz	r2, 800844a <_vfiprintf_r+0x86>
 8008446:	2a25      	cmp	r2, #37	; 0x25
 8008448:	d1f9      	bne.n	800843e <_vfiprintf_r+0x7a>
 800844a:	ebba 0b04 	subs.w	fp, sl, r4
 800844e:	d00b      	beq.n	8008468 <_vfiprintf_r+0xa4>
 8008450:	465b      	mov	r3, fp
 8008452:	4622      	mov	r2, r4
 8008454:	4629      	mov	r1, r5
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff ffa2 	bl	80083a0 <__sfputs_r>
 800845c:	3001      	adds	r0, #1
 800845e:	f000 80a9 	beq.w	80085b4 <_vfiprintf_r+0x1f0>
 8008462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008464:	445a      	add	r2, fp
 8008466:	9209      	str	r2, [sp, #36]	; 0x24
 8008468:	f89a 3000 	ldrb.w	r3, [sl]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80a1 	beq.w	80085b4 <_vfiprintf_r+0x1f0>
 8008472:	2300      	movs	r3, #0
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800847c:	f10a 0a01 	add.w	sl, sl, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008488:	931a      	str	r3, [sp, #104]	; 0x68
 800848a:	4654      	mov	r4, sl
 800848c:	2205      	movs	r2, #5
 800848e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008492:	4854      	ldr	r0, [pc, #336]	; (80085e4 <_vfiprintf_r+0x220>)
 8008494:	f7f7 fea4 	bl	80001e0 <memchr>
 8008498:	9a04      	ldr	r2, [sp, #16]
 800849a:	b9d8      	cbnz	r0, 80084d4 <_vfiprintf_r+0x110>
 800849c:	06d1      	lsls	r1, r2, #27
 800849e:	bf44      	itt	mi
 80084a0:	2320      	movmi	r3, #32
 80084a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a6:	0713      	lsls	r3, r2, #28
 80084a8:	bf44      	itt	mi
 80084aa:	232b      	movmi	r3, #43	; 0x2b
 80084ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b0:	f89a 3000 	ldrb.w	r3, [sl]
 80084b4:	2b2a      	cmp	r3, #42	; 0x2a
 80084b6:	d015      	beq.n	80084e4 <_vfiprintf_r+0x120>
 80084b8:	9a07      	ldr	r2, [sp, #28]
 80084ba:	4654      	mov	r4, sl
 80084bc:	2000      	movs	r0, #0
 80084be:	f04f 0c0a 	mov.w	ip, #10
 80084c2:	4621      	mov	r1, r4
 80084c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c8:	3b30      	subs	r3, #48	; 0x30
 80084ca:	2b09      	cmp	r3, #9
 80084cc:	d94d      	bls.n	800856a <_vfiprintf_r+0x1a6>
 80084ce:	b1b0      	cbz	r0, 80084fe <_vfiprintf_r+0x13a>
 80084d0:	9207      	str	r2, [sp, #28]
 80084d2:	e014      	b.n	80084fe <_vfiprintf_r+0x13a>
 80084d4:	eba0 0308 	sub.w	r3, r0, r8
 80084d8:	fa09 f303 	lsl.w	r3, r9, r3
 80084dc:	4313      	orrs	r3, r2
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	46a2      	mov	sl, r4
 80084e2:	e7d2      	b.n	800848a <_vfiprintf_r+0xc6>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d19      	adds	r1, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9103      	str	r1, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfbb      	ittet	lt
 80084f0:	425b      	neglt	r3, r3
 80084f2:	f042 0202 	orrlt.w	r2, r2, #2
 80084f6:	9307      	strge	r3, [sp, #28]
 80084f8:	9307      	strlt	r3, [sp, #28]
 80084fa:	bfb8      	it	lt
 80084fc:	9204      	strlt	r2, [sp, #16]
 80084fe:	7823      	ldrb	r3, [r4, #0]
 8008500:	2b2e      	cmp	r3, #46	; 0x2e
 8008502:	d10c      	bne.n	800851e <_vfiprintf_r+0x15a>
 8008504:	7863      	ldrb	r3, [r4, #1]
 8008506:	2b2a      	cmp	r3, #42	; 0x2a
 8008508:	d134      	bne.n	8008574 <_vfiprintf_r+0x1b0>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	1d1a      	adds	r2, r3, #4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	9203      	str	r2, [sp, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfb8      	it	lt
 8008516:	f04f 33ff 	movlt.w	r3, #4294967295
 800851a:	3402      	adds	r4, #2
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085f4 <_vfiprintf_r+0x230>
 8008522:	7821      	ldrb	r1, [r4, #0]
 8008524:	2203      	movs	r2, #3
 8008526:	4650      	mov	r0, sl
 8008528:	f7f7 fe5a 	bl	80001e0 <memchr>
 800852c:	b138      	cbz	r0, 800853e <_vfiprintf_r+0x17a>
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	eba0 000a 	sub.w	r0, r0, sl
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	4082      	lsls	r2, r0
 8008538:	4313      	orrs	r3, r2
 800853a:	3401      	adds	r4, #1
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008542:	4829      	ldr	r0, [pc, #164]	; (80085e8 <_vfiprintf_r+0x224>)
 8008544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008548:	2206      	movs	r2, #6
 800854a:	f7f7 fe49 	bl	80001e0 <memchr>
 800854e:	2800      	cmp	r0, #0
 8008550:	d03f      	beq.n	80085d2 <_vfiprintf_r+0x20e>
 8008552:	4b26      	ldr	r3, [pc, #152]	; (80085ec <_vfiprintf_r+0x228>)
 8008554:	bb1b      	cbnz	r3, 800859e <_vfiprintf_r+0x1da>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	3307      	adds	r3, #7
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	3308      	adds	r3, #8
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	443b      	add	r3, r7
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	e768      	b.n	800843c <_vfiprintf_r+0x78>
 800856a:	fb0c 3202 	mla	r2, ip, r2, r3
 800856e:	460c      	mov	r4, r1
 8008570:	2001      	movs	r0, #1
 8008572:	e7a6      	b.n	80084c2 <_vfiprintf_r+0xfe>
 8008574:	2300      	movs	r3, #0
 8008576:	3401      	adds	r4, #1
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	4619      	mov	r1, r3
 800857c:	f04f 0c0a 	mov.w	ip, #10
 8008580:	4620      	mov	r0, r4
 8008582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008586:	3a30      	subs	r2, #48	; 0x30
 8008588:	2a09      	cmp	r2, #9
 800858a:	d903      	bls.n	8008594 <_vfiprintf_r+0x1d0>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0c6      	beq.n	800851e <_vfiprintf_r+0x15a>
 8008590:	9105      	str	r1, [sp, #20]
 8008592:	e7c4      	b.n	800851e <_vfiprintf_r+0x15a>
 8008594:	fb0c 2101 	mla	r1, ip, r1, r2
 8008598:	4604      	mov	r4, r0
 800859a:	2301      	movs	r3, #1
 800859c:	e7f0      	b.n	8008580 <_vfiprintf_r+0x1bc>
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <_vfiprintf_r+0x22c>)
 80085a6:	a904      	add	r1, sp, #16
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7fd fd65 	bl	8006078 <_printf_float>
 80085ae:	4607      	mov	r7, r0
 80085b0:	1c78      	adds	r0, r7, #1
 80085b2:	d1d6      	bne.n	8008562 <_vfiprintf_r+0x19e>
 80085b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d405      	bmi.n	80085c6 <_vfiprintf_r+0x202>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_vfiprintf_r+0x202>
 80085c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085c2:	f7fe faa3 	bl	8006b0c <__retarget_lock_release_recursive>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	065b      	lsls	r3, r3, #25
 80085ca:	f53f af1d 	bmi.w	8008408 <_vfiprintf_r+0x44>
 80085ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d0:	e71c      	b.n	800840c <_vfiprintf_r+0x48>
 80085d2:	ab03      	add	r3, sp, #12
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	462a      	mov	r2, r5
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <_vfiprintf_r+0x22c>)
 80085da:	a904      	add	r1, sp, #16
 80085dc:	4630      	mov	r0, r6
 80085de:	f7fd ffef 	bl	80065c0 <_printf_i>
 80085e2:	e7e4      	b.n	80085ae <_vfiprintf_r+0x1ea>
 80085e4:	08008dab 	.word	0x08008dab
 80085e8:	08008db5 	.word	0x08008db5
 80085ec:	08006079 	.word	0x08006079
 80085f0:	080083a1 	.word	0x080083a1
 80085f4:	08008db1 	.word	0x08008db1

080085f8 <__swbuf_r>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	460e      	mov	r6, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	4605      	mov	r5, r0
 8008600:	b118      	cbz	r0, 800860a <__swbuf_r+0x12>
 8008602:	6a03      	ldr	r3, [r0, #32]
 8008604:	b90b      	cbnz	r3, 800860a <__swbuf_r+0x12>
 8008606:	f7fe f989 	bl	800691c <__sinit>
 800860a:	69a3      	ldr	r3, [r4, #24]
 800860c:	60a3      	str	r3, [r4, #8]
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	071a      	lsls	r2, r3, #28
 8008612:	d525      	bpl.n	8008660 <__swbuf_r+0x68>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b31b      	cbz	r3, 8008660 <__swbuf_r+0x68>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	6922      	ldr	r2, [r4, #16]
 800861c:	1a98      	subs	r0, r3, r2
 800861e:	6963      	ldr	r3, [r4, #20]
 8008620:	b2f6      	uxtb	r6, r6
 8008622:	4283      	cmp	r3, r0
 8008624:	4637      	mov	r7, r6
 8008626:	dc04      	bgt.n	8008632 <__swbuf_r+0x3a>
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f7ff fdfc 	bl	8008228 <_fflush_r>
 8008630:	b9e0      	cbnz	r0, 800866c <__swbuf_r+0x74>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	3b01      	subs	r3, #1
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	701e      	strb	r6, [r3, #0]
 8008640:	6962      	ldr	r2, [r4, #20]
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d004      	beq.n	8008652 <__swbuf_r+0x5a>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d506      	bpl.n	800865c <__swbuf_r+0x64>
 800864e:	2e0a      	cmp	r6, #10
 8008650:	d104      	bne.n	800865c <__swbuf_r+0x64>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f7ff fde7 	bl	8008228 <_fflush_r>
 800865a:	b938      	cbnz	r0, 800866c <__swbuf_r+0x74>
 800865c:	4638      	mov	r0, r7
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 f806 	bl	8008674 <__swsetup_r>
 8008668:	2800      	cmp	r0, #0
 800866a:	d0d5      	beq.n	8008618 <__swbuf_r+0x20>
 800866c:	f04f 37ff 	mov.w	r7, #4294967295
 8008670:	e7f4      	b.n	800865c <__swbuf_r+0x64>
	...

08008674 <__swsetup_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4b2a      	ldr	r3, [pc, #168]	; (8008720 <__swsetup_r+0xac>)
 8008678:	4605      	mov	r5, r0
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	460c      	mov	r4, r1
 800867e:	b118      	cbz	r0, 8008688 <__swsetup_r+0x14>
 8008680:	6a03      	ldr	r3, [r0, #32]
 8008682:	b90b      	cbnz	r3, 8008688 <__swsetup_r+0x14>
 8008684:	f7fe f94a 	bl	800691c <__sinit>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868e:	0718      	lsls	r0, r3, #28
 8008690:	d422      	bmi.n	80086d8 <__swsetup_r+0x64>
 8008692:	06d9      	lsls	r1, r3, #27
 8008694:	d407      	bmi.n	80086a6 <__swsetup_r+0x32>
 8008696:	2309      	movs	r3, #9
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e034      	b.n	8008710 <__swsetup_r+0x9c>
 80086a6:	0758      	lsls	r0, r3, #29
 80086a8:	d512      	bpl.n	80086d0 <__swsetup_r+0x5c>
 80086aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ac:	b141      	cbz	r1, 80086c0 <__swsetup_r+0x4c>
 80086ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d002      	beq.n	80086bc <__swsetup_r+0x48>
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff f8b4 	bl	8007824 <_free_r>
 80086bc:	2300      	movs	r3, #0
 80086be:	6363      	str	r3, [r4, #52]	; 0x34
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	2300      	movs	r3, #0
 80086ca:	6063      	str	r3, [r4, #4]
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0308 	orr.w	r3, r3, #8
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b94b      	cbnz	r3, 80086f0 <__swsetup_r+0x7c>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e6:	d003      	beq.n	80086f0 <__swsetup_r+0x7c>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f884 	bl	80087f8 <__smakebuf_r>
 80086f0:	89a0      	ldrh	r0, [r4, #12]
 80086f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f6:	f010 0301 	ands.w	r3, r0, #1
 80086fa:	d00a      	beq.n	8008712 <__swsetup_r+0x9e>
 80086fc:	2300      	movs	r3, #0
 80086fe:	60a3      	str	r3, [r4, #8]
 8008700:	6963      	ldr	r3, [r4, #20]
 8008702:	425b      	negs	r3, r3
 8008704:	61a3      	str	r3, [r4, #24]
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	b943      	cbnz	r3, 800871c <__swsetup_r+0xa8>
 800870a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800870e:	d1c4      	bne.n	800869a <__swsetup_r+0x26>
 8008710:	bd38      	pop	{r3, r4, r5, pc}
 8008712:	0781      	lsls	r1, r0, #30
 8008714:	bf58      	it	pl
 8008716:	6963      	ldrpl	r3, [r4, #20]
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	e7f4      	b.n	8008706 <__swsetup_r+0x92>
 800871c:	2000      	movs	r0, #0
 800871e:	e7f7      	b.n	8008710 <__swsetup_r+0x9c>
 8008720:	2000006c 	.word	0x2000006c

08008724 <_raise_r>:
 8008724:	291f      	cmp	r1, #31
 8008726:	b538      	push	{r3, r4, r5, lr}
 8008728:	4604      	mov	r4, r0
 800872a:	460d      	mov	r5, r1
 800872c:	d904      	bls.n	8008738 <_raise_r+0x14>
 800872e:	2316      	movs	r3, #22
 8008730:	6003      	str	r3, [r0, #0]
 8008732:	f04f 30ff 	mov.w	r0, #4294967295
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800873a:	b112      	cbz	r2, 8008742 <_raise_r+0x1e>
 800873c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008740:	b94b      	cbnz	r3, 8008756 <_raise_r+0x32>
 8008742:	4620      	mov	r0, r4
 8008744:	f000 f830 	bl	80087a8 <_getpid_r>
 8008748:	462a      	mov	r2, r5
 800874a:	4601      	mov	r1, r0
 800874c:	4620      	mov	r0, r4
 800874e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008752:	f000 b817 	b.w	8008784 <_kill_r>
 8008756:	2b01      	cmp	r3, #1
 8008758:	d00a      	beq.n	8008770 <_raise_r+0x4c>
 800875a:	1c59      	adds	r1, r3, #1
 800875c:	d103      	bne.n	8008766 <_raise_r+0x42>
 800875e:	2316      	movs	r3, #22
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	2001      	movs	r0, #1
 8008764:	e7e7      	b.n	8008736 <_raise_r+0x12>
 8008766:	2400      	movs	r4, #0
 8008768:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800876c:	4628      	mov	r0, r5
 800876e:	4798      	blx	r3
 8008770:	2000      	movs	r0, #0
 8008772:	e7e0      	b.n	8008736 <_raise_r+0x12>

08008774 <raise>:
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <raise+0xc>)
 8008776:	4601      	mov	r1, r0
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	f7ff bfd3 	b.w	8008724 <_raise_r>
 800877e:	bf00      	nop
 8008780:	2000006c 	.word	0x2000006c

08008784 <_kill_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	; (80087a4 <_kill_r+0x20>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	f7f9 fcb5 	bl	8002100 <_kill>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d102      	bne.n	80087a0 <_kill_r+0x1c>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	b103      	cbz	r3, 80087a0 <_kill_r+0x1c>
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	bd38      	pop	{r3, r4, r5, pc}
 80087a2:	bf00      	nop
 80087a4:	20002a78 	.word	0x20002a78

080087a8 <_getpid_r>:
 80087a8:	f7f9 bca2 	b.w	80020f0 <_getpid>

080087ac <__swhatbuf_r>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	460c      	mov	r4, r1
 80087b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b4:	2900      	cmp	r1, #0
 80087b6:	b096      	sub	sp, #88	; 0x58
 80087b8:	4615      	mov	r5, r2
 80087ba:	461e      	mov	r6, r3
 80087bc:	da0d      	bge.n	80087da <__swhatbuf_r+0x2e>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087c4:	f04f 0100 	mov.w	r1, #0
 80087c8:	bf0c      	ite	eq
 80087ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80087ce:	2340      	movne	r3, #64	; 0x40
 80087d0:	2000      	movs	r0, #0
 80087d2:	6031      	str	r1, [r6, #0]
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	b016      	add	sp, #88	; 0x58
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	466a      	mov	r2, sp
 80087dc:	f000 f848 	bl	8008870 <_fstat_r>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	dbec      	blt.n	80087be <__swhatbuf_r+0x12>
 80087e4:	9901      	ldr	r1, [sp, #4]
 80087e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80087ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80087ee:	4259      	negs	r1, r3
 80087f0:	4159      	adcs	r1, r3
 80087f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f6:	e7eb      	b.n	80087d0 <__swhatbuf_r+0x24>

080087f8 <__smakebuf_r>:
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087fc:	079d      	lsls	r5, r3, #30
 80087fe:	4606      	mov	r6, r0
 8008800:	460c      	mov	r4, r1
 8008802:	d507      	bpl.n	8008814 <__smakebuf_r+0x1c>
 8008804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	2301      	movs	r3, #1
 800880e:	6163      	str	r3, [r4, #20]
 8008810:	b002      	add	sp, #8
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	ab01      	add	r3, sp, #4
 8008816:	466a      	mov	r2, sp
 8008818:	f7ff ffc8 	bl	80087ac <__swhatbuf_r>
 800881c:	9900      	ldr	r1, [sp, #0]
 800881e:	4605      	mov	r5, r0
 8008820:	4630      	mov	r0, r6
 8008822:	f7ff f873 	bl	800790c <_malloc_r>
 8008826:	b948      	cbnz	r0, 800883c <__smakebuf_r+0x44>
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	059a      	lsls	r2, r3, #22
 800882e:	d4ef      	bmi.n	8008810 <__smakebuf_r+0x18>
 8008830:	f023 0303 	bic.w	r3, r3, #3
 8008834:	f043 0302 	orr.w	r3, r3, #2
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	e7e3      	b.n	8008804 <__smakebuf_r+0xc>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	6020      	str	r0, [r4, #0]
 8008840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	6163      	str	r3, [r4, #20]
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	6120      	str	r0, [r4, #16]
 800884e:	b15b      	cbz	r3, 8008868 <__smakebuf_r+0x70>
 8008850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008854:	4630      	mov	r0, r6
 8008856:	f000 f81d 	bl	8008894 <_isatty_r>
 800885a:	b128      	cbz	r0, 8008868 <__smakebuf_r+0x70>
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f023 0303 	bic.w	r3, r3, #3
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	431d      	orrs	r5, r3
 800886c:	81a5      	strh	r5, [r4, #12]
 800886e:	e7cf      	b.n	8008810 <__smakebuf_r+0x18>

08008870 <_fstat_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_fstat_r+0x20>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f7f9 fc9e 	bl	80021be <_fstat>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d102      	bne.n	800888c <_fstat_r+0x1c>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b103      	cbz	r3, 800888c <_fstat_r+0x1c>
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	20002a78 	.word	0x20002a78

08008894 <_isatty_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d06      	ldr	r5, [pc, #24]	; (80088b0 <_isatty_r+0x1c>)
 8008898:	2300      	movs	r3, #0
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	f7f9 fc9d 	bl	80021de <_isatty>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_isatty_r+0x1a>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_isatty_r+0x1a>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	20002a78 	.word	0x20002a78

080088b4 <_init>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr

080088c0 <_fini>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr
